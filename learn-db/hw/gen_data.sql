insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '103a5e86-c3cd-40a7-54df-7b9295aeeea8', ' Interactive - 01 - Create Table', '1', 'hw01.mp4', 'hw01.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '1872b003-35ed-4c62-4229-b102e14f8856', 'create table' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1872b003-35ed-4c62-4229-b102e14f8856', '103a5e86-c3cd-40a7-54df-7b9295aeeea8' );
insert into ct_tag ( tag_id, tag_word ) values ( '8e5c7768-615e-44c3-583b-83557c9b5a49', 'type text' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8e5c7768-615e-44c3-583b-83557c9b5a49', '103a5e86-c3cd-40a7-54df-7b9295aeeea8' );
insert into ct_tag ( tag_id, tag_word ) values ( '1a0831c9-04f6-4839-618f-f59886839aaf', 'type int' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1a0831c9-04f6-4839-618f-f59886839aaf', '103a5e86-c3cd-40a7-54df-7b9295aeeea8' );
insert into ct_tag ( tag_id, tag_word ) values ( '93759fe6-cb13-4cd9-6c21-01358e022391', 'type varchar' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '93759fe6-cb13-4cd9-6c21-01358e022391', '103a5e86-c3cd-40a7-54df-7b9295aeeea8' );
insert into ct_tag ( tag_id, tag_word ) values ( '4a8e5faf-35cf-4286-66e5-3180d25021f2', 'hw01' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4a8e5faf-35cf-4286-66e5-3180d25021f2', '103a5e86-c3cd-40a7-54df-7b9295aeeea8' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '7eca9faf-575d-4716-7485-3824ee87dc25', 1, 'te: SQL-Select', 'select validate_hw01()' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 01 - Create Table\n\nCreate a table with 3 columns.  The table name will be \"name_list\".\nThe columns are:\n\n- real_name a text column\n- age an integer\n- state a 2 character field for a US state code.\n\n```\ncreate table \u003cname\u003e (\n\t\u003ccolumn\u003e,\t\n\t\u003ccolumn\u003e,\t\n\t\u003ccolumn\u003e,\t\n\t...\n\t\u003ccolumn\u003e\n);\n```\nThe columns are a comma `,` separated list.   The set of\ncolumns tars with a `(` and ends with a `)`.\n\nA `;` (semicolon) is used to mark the end of the statement.\n\nOfficially this is call the Data Definition Language or DDL.\n\nWe have to declare what we want to store before storing it.\n\nWe will get back to data-types and SQL in a future homework.\n\nso with 3 columns\n\n```\n\nCREATE TABLE name_list (\n\treal_name text,\t\n\tage int,\t\n\tstate varchar(2)\n);\n\n\n```\n\nBook: Pages 5 to 7\n\n\n\n\n#### Tags: \"create table\",\"type text\",\"type int\",\"type varchar\",\"hw01\"\n\n\n","Lesson_no":1}' where homework_id = '103a5e86-c3cd-40a7-54df-7b9295aeeea8';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '0d1ad7cf-ef0d-4dbb-7b68-f342869e5ace', ' Interactive - 02 - Insert data into "name_list"', '2', 'hw02.mp4', 'hw02.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '4bbd907f-fc27-44ff-6116-befcef3dbfdf', 'hw02' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4bbd907f-fc27-44ff-6116-befcef3dbfdf', '0d1ad7cf-ef0d-4dbb-7b68-f342869e5ace' );
insert into ct_tag ( tag_id, tag_word ) values ( '8af3cfb9-c102-4383-4e48-e66510f07d05', 'insert' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8af3cfb9-c102-4383-4e48-e66510f07d05', '0d1ad7cf-ef0d-4dbb-7b68-f342869e5ace' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'c6bd189f-e90c-4c2e-7710-5c339eba8954', 2, 'te: SQL-Select', 'select ''PASS'' from name_list where name = ''Philip Schlump''' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 02 - Insert data into \"name_list\"\n\nInsert some data into the table.  \n\n```\ninsert into \u003cname\u003e ( \u003ccolumn-name\u003e, \u003ccolumn-name\u003e, .... ) values\n\t( \u003ccolun-data1\u003e, \u003ccolun-data2\u003e, ... ),\n\t( \u003ccolun-row2\u003e, \u003ccolun-row2\u003e, ... ),\n\t( \u003ccolun-row2\u003e, \u003ccolun-row2\u003e, ... )\n;\n```\n\nso our example, we will use all the columns so we can leave the\nlist of columns out  and just put the data in the table declared\norder.\n\n```\nINSERT INTO name_list values\n\t( ''bob true'',            22, ''WY'' ),\n\t( ''Jane True'',           20, ''WY'' ),\n\t( ''Tom Ace'',             31, ''NJ'' ),\n\t( ''Steve Pen'',           33, ''NJ'' ),\n\t( ''Laura Jean Alkinoos'', 34, ''PA'' )\n;\n\n```\n\nand a single row (note that the column order\nis chained).  It is better to list the columns\nso that if the table is changed the data can\nstill be loaded.  It is possible to add new columns to a table\nand break old code - so it is better to have:\n\n```\ninsert into name_list ( real_name, age, state ) values\n\t( ''bob true'',            22, ''WY'' ),\n\t( ''Jane True'',           20, ''WY'' ),\n\t( ''Tom Ace'',             31, ''NJ'' ),\n\t( ''Steve Pen'',           33, ''NJ'' ),\n\t( ''Laura Jean Alkinoos'', 34, ''PA'' )\n;\n```\n\nAlso note that it is intentional at this point that `bob true` is all lower\ncase.  We will fix that in a little bit.\n\n```\n\nINSERT INTO name_list ( real_name, state, age )\n\tvalues\t( ''Philip Schlump'', ''WY'', 62 );\n\n```\n\nEach set of data that we inset is separated with a comma, `,`.\nWhen we insert text we use single quotes, `''` to mark that it is\ntext.  To insert a quote mark we put in 2 of them in a row.\nSo, To insert `that''s`  we would use in our insert statement,\n`''that''''s``.\n\nNumbers are respresented as a set of digits.  With fractional(floating point) numbers you put in a decimal\npoint - but note that our column age is not a float - so just whole years.\n\n\n\n\nBook: Pages 7 to 9\n\n#### Tags: \"hw02\",\"insert\"    \t\n\n\n","Lesson_no":2}' where homework_id = '0d1ad7cf-ef0d-4dbb-7b68-f342869e5ace';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '62cd3e1e-cb68-478c-435d-014eb1eca4ec', ' Interactive - 03 - Select data back from the table', '3', 'hw03.mp4', 'hw03.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '505094b1-a331-430e-4ff2-abd28f9f4475', 'select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '505094b1-a331-430e-4ff2-abd28f9f4475', '62cd3e1e-cb68-478c-435d-014eb1eca4ec' );
insert into ct_tag ( tag_id, tag_word ) values ( '47eba19c-ed56-47cf-7586-b9881a3bb239', 'where' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '47eba19c-ed56-47cf-7586-b9881a3bb239', '62cd3e1e-cb68-478c-435d-014eb1eca4ec' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 03 - Select data back from the table\n\nData is more fun when you can put some in and get it \nback later.  Enter \"select\".\n\n```\nSELECT * from name_list;\n\n```\n\ngives you get back all the data.  The `*` is the list\nof columns you get back.  `*` is for all the columns.\n\n```\nSELECT real_name, state from name_list;\n\n```\n\nGives you back just the name and state.\n\n```\n\nSELECT lower(real_name) as \"real_name_lower\", real_name\nfrom name_list;\n\n```\n\nGives you back a lower case version of the name.\n\nOr make it in order from z to a.\n\n```\n\nSELECT lower(real_name) as \"real_name_lower\", real_name\n\tfrom name_list\n\torder by 1 desc\n;\n\n```\n\nMaybe we just want the names in Wyoming.  This is the\nwhere clause.\n\n```\n\nSELECT real_name\n\tFROM name_list\n\tWHERE state = ''WY''\n;\n\n```\n\nRemember that if you want to match a text field you\nhave to use quotes.  Also it is case sensitive.\n\n```\nselect real_name\nfrom name_list\nwhere state = ''wy''\n;\n```\n\nwill not give you any rows.  Try it.\n\n#### Tags: select,where \n","Lesson_no":3}' where homework_id = '62cd3e1e-cb68-478c-435d-014eb1eca4ec';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'd76c8ea7-f73f-4ecf-4236-205238d35a83', ' Interactive - 04 - update the table', '4', 'hw04.mp4', 'hw04.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '70dd269d-4627-4984-6725-d2524e307af9', 'update' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '70dd269d-4627-4984-6725-d2524e307af9', 'd76c8ea7-f73f-4ecf-4236-205238d35a83' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '47eba19c-ed56-47cf-7586-b9881a3bb239', 'd76c8ea7-f73f-4ecf-4236-205238d35a83' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 04 - update the table\n\nNote that we have an error in our data.  `Bob true` should\nbe `Bob True`.   Let''s change some data.\n\n```\nupdate \u003ctabe-name\u003e\n\tset \u003clist of columns to modify\u003e\n\twhere \u003cboolean expresison\u003e\n;\n```\n\nso... let''s look at the data before the update\n\n```\nSELECT * from name_list;\n\n```\n\nUpdate it to fix it\n\n```\nUPDATE name_list\n\tSET real_name = ''Bob True''\n\tWHERE real_name = ''bob true''\n;\n\n```\n\nNow let''s look at the data:\n\n```\nSELECT * from name_list;\n\n```\n\nMuch better!\n\n\nBook: page 139\n\n#### Tags: update,where\n","Lesson_no":4}' where homework_id = 'd76c8ea7-f73f-4ecf-4236-205238d35a83';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'c2dd76e4-357d-4c03-4dcf-c0b5509b2b51', ' Interactive - 05 - insert more data / select unique data', '5', 'hw05.mp4', 'hw05.jpg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8af3cfb9-c102-4383-4e48-e66510f07d05', 'c2dd76e4-357d-4c03-4dcf-c0b5509b2b51' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '505094b1-a331-430e-4ff2-abd28f9f4475', 'c2dd76e4-357d-4c03-4dcf-c0b5509b2b51' );
insert into ct_tag ( tag_id, tag_word ) values ( '788b6d37-6c30-48cb-4c68-943435e9e3c8', 'distinct' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '788b6d37-6c30-48cb-4c68-943435e9e3c8', 'c2dd76e4-357d-4c03-4dcf-c0b5509b2b51' );
insert into ct_tag ( tag_id, tag_word ) values ( '3e084915-11a7-4ada-729e-492c68254587', 'select distinct' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3e084915-11a7-4ada-729e-492c68254587', 'c2dd76e4-357d-4c03-4dcf-c0b5509b2b51' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 05 - insert more data / select unique data\n\nLet''s put in some more data - that has some mistakes in it.\n\n\n```\nINSERT INTO name_list values\n\t( ''Liz Trubune'',         30, ''WY'' ),\n\t( ''Jane True'',           20, ''WY'' ),\n\t( ''Lary Smith'',          58, ''NJ'' ),\n\t( ''Dave Dave'',           21, ''NJ'' ),\n\t( ''Laura Ann Alkinoos'',  34, ''PA'' )\n;\n\n\n```\n\nThe problem is that \"Jane True\" is now a duplicate!\n\nLet''s see it.\n\n```\n\nSELECT * from name_list;\n\n\n```\n\nWe will get how to prevent this later.\nRight now let''s get unique data back when the\nactual data has duplicates.   For lots of reasons you \ncan get duplicates in a set of selected data.\n\n```\nSELECT distinct * from name_list;\n\n```\n\nBook: pages 12 to 14.\n\n#### Tags: insert,select,distinct,select distinct\n","Lesson_no":5}' where homework_id = 'c2dd76e4-357d-4c03-4dcf-c0b5509b2b51';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'fd0be3ef-ca0c-48ba-5f75-9b1a4cecb73e', ' Interactive - 06 - count rows of data', '6', 'hw06.mp4', 'hw06.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '86a62157-ac6c-41ed-5c53-da7aa4733809', 'count' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '86a62157-ac6c-41ed-5c53-da7aa4733809', 'fd0be3ef-ca0c-48ba-5f75-9b1a4cecb73e' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '788b6d37-6c30-48cb-4c68-943435e9e3c8', 'fd0be3ef-ca0c-48ba-5f75-9b1a4cecb73e' );
insert into ct_tag ( tag_id, tag_word ) values ( 'cc2c5025-6e9d-417c-78fe-fc5a4324565e', 'count distinct' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'cc2c5025-6e9d-417c-78fe-fc5a4324565e', 'fd0be3ef-ca0c-48ba-5f75-9b1a4cecb73e' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 06 - count rows of data\n\nuse count to get how many rows.\n\n```\nSELECT count(*) from name_list;\n\n```\n\nYou should get 11 rows.\n\nor with a where clause\n\n```\n\nSELECT count(*) from name_list\nwhere state = ''NJ''\n;\n\n```\n\nYou should get 4 rows.\n\nwith a name for the returned data column\n\n```\n\nSELECT count(*) as \"count_of_names\"\n\tFROM name_list\n;\n\n```\n\nYou should get 10 rows.\n\nBook: page 117 to 118\n\n``` \n\nSELECT count(distinct real_name) \n\tFROM name_list\n\tWHERE state = ''NJ''\n;\n\n```\n\n#### Tags: count,distinct,\"count distinct\"\n","Lesson_no":6}' where homework_id = 'fd0be3ef-ca0c-48ba-5f75-9b1a4cecb73e';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '3cbca434-c8d8-442c-48b6-01fd4b16eea4', ' Interactive - 07 - add a check constraint on age', '7', 'hw07.mp4', 'hw07.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'b0678904-3610-4588-606f-26f3ac430716', 'alter table rename' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'b0678904-3610-4588-606f-26f3ac430716', '3cbca434-c8d8-442c-48b6-01fd4b16eea4' );
insert into ct_tag ( tag_id, tag_word ) values ( '77d835b4-87d9-4585-430a-c0935b8a7987', 'rename' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '77d835b4-87d9-4585-430a-c0935b8a7987', '3cbca434-c8d8-442c-48b6-01fd4b16eea4' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8af3cfb9-c102-4383-4e48-e66510f07d05', '3cbca434-c8d8-442c-48b6-01fd4b16eea4' );
insert into ct_tag ( tag_id, tag_word ) values ( '62295df2-b7b8-40fa-6562-aee695070bcb', 'drop table' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '62295df2-b7b8-40fa-6562-aee695070bcb', '3cbca434-c8d8-442c-48b6-01fd4b16eea4' );
insert into ct_tag ( tag_id, tag_word ) values ( '01b4038b-69f9-480e-67aa-0c50a9cff1bb', 'insert select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '01b4038b-69f9-480e-67aa-0c50a9cff1bb', '3cbca434-c8d8-442c-48b6-01fd4b16eea4' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 07 - add a check constraint on age\n\nWe can use the Data Definition Language (DDL) - create table to check\nthat values are in a correct range or value.\n\nThese are check constrains.\n\nLet''s save our data for later, then recreate the table.\n\nFirst we are going to rename the table - so we can save \nit for later.\n\n```\nALTER TABLE name_list\n\tRENAME TO old_name_list;\n```\n\n\nNow we will re-create the table with the check constraint.\n\n```\ncreate table name_list (\n\treal_name text,\n\tage int check ( age \u003e 0 and age \u003c 154 ),\t\n\tstate char varying (2)\n);\n\n```\n\nNow copy the data back.  \n\n```\ninsert into name_list ( real_name, age, state ) \n\tselect real_name, age, state \n\tfrom old_name_list;\n```\n\nVerify data amount.  Check how many rows.\n\n```\nselect count(1) from name_list;\nselect count(1) from old_name_list;\n```\n\nProvided that the counts are the same let''s clean up the temporary table with the old data. \n\n```\ndrop table old_name_list;\n```\n\nAnd let''s look at the data.\n\n\n```\nselect * from name_list;\n```\n\n#### Tags: \"alter table rename\",\"rename\",\"insert\",\"drop table\",\"insert select\"\n","Lesson_no":7}' where homework_id = '3cbca434-c8d8-442c-48b6-01fd4b16eea4';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'f52169d8-180a-4ee5-6c5e-676e2b8cb6ca', ' Interactive - 08 - create unique id and a primary key ', '8', 'hw08.mp4', 'hw08.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd62a7a30-f8d3-4a95-596f-9944db500c4e', 'primary key' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd62a7a30-f8d3-4a95-596f-9944db500c4e', 'f52169d8-180a-4ee5-6c5e-676e2b8cb6ca' );
insert into ct_tag ( tag_id, tag_word ) values ( '49858e94-6633-4695-77a4-ac65db172205', 'uuid' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '49858e94-6633-4695-77a4-ac65db172205', 'f52169d8-180a-4ee5-6c5e-676e2b8cb6ca' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd0404bc5-4945-48af-428a-8b6af44927dd', 'unique id' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd0404bc5-4945-48af-428a-8b6af44927dd', 'f52169d8-180a-4ee5-6c5e-676e2b8cb6ca' );
insert into ct_tag ( tag_id, tag_word ) values ( '5b383f7f-a3e3-4edf-6269-5d953127ead0', 'UUID' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5b383f7f-a3e3-4edf-6269-5d953127ead0', 'f52169d8-180a-4ee5-6c5e-676e2b8cb6ca' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 08 - create unique id and a primary key \n\nIt is really hard to update data when you don''t have a unique way of identifying a row.\nPeople will often imagine that there is something unique in the data.  Some combination\nof name/date/place-of-birth, generally it is not true.\n\nThe easy way to deal with this is to create unique keys.  PostgreSQL offers two ways \nof doing this.  The first is a key that counts up.   This makes short keys, that''s good\nbut also creates a bottle neck with a single source of \"count-up\" values.  The second\nway is use a university unique identifier or UUID.  UUIDs are can be created in parallel\nand will not collide.  This has lot''s of advantages, but they are long, hard to type\nand take up lots of space in your database.\n\nWe will get back to sequential values later, for a different purpose.  Let''s do the\nmore general approach and use UUIDs.\n\nWe are going to change our table to have a unique ID column, then create an index \non that column.\n\nThis relies on having a way to generate UUIDs, it is an extension package to the\ndefault Postgres database. (double quotes, `\"` are correct for this command).\n\n```\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n```\n\nThere are ways to add a column to the table without re-creating the table.\nThey will not work for this.\n\nLet''s save our data for later, then recreate the table.\n\nFirst we are going to rename the table, so we can save \nit for later. (Familiar, we did this last time)\n\n```\nALTER TABLE name_list\n\tRENAME TO old_name_list;\n```\n\n\nNow we will re-create the table with the check constraint.\n\n```\ncreate table name_list (\n\tname_list_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key,\n\treal_name text,\n\tage int check ( age \u003e 0 and age \u003c 154 ),\t\n\tstate char varying (2)\n);\n\n```\n\nNow copy the data back.\n\n```\ninsert into name_list ( real_name, age, state ) \n\tselect real_name, age, state \n\tfrom old_name_list;\n```\n\nVerify data amount.  Check how many rows.\n\n```\nselect count(1) from name_list;\nselect count(1) from old_name_list;\n```\n\nProvided that the counts are the same let''s clean up the temporary table with the old data. \n\n\n```\ndrop table old_name_list;\n```\n\nThere are 2 parts that we added.  Both a ID column that is unique and\na thing called a `PRIMARY KEY`.\n\n\nYour result should be similar to this list (the name_list_id''s will\nbe unique).\n\n\n```\n             name_list_id             |      real_name      | age | state \n--------------------------------------+---------------------+-----+-------\n 1fb069ca-a4a2-412a-8401-c835b6c45cb7 | Jane True           |  20 | WY\n 39fff492-f369-4552-bf49-b8d7ae57bf9a | Tom Ace             |  31 | NJ\n 8e91d65f-ee0a-4642-8d62-1cc1e1058238 | Steve Pen           |  33 | NJ\n e245b3ec-9e5f-4112-ac7e-1d9732d9a4f1 | Laura Jean Alkinoos |  34 | PA\n b8c2468e-694d-46de-acc3-e8da239aa1a3 | Philip Schlump      |  62 | WY\n 983b17d2-39f7-45bc-96b2-66ffdbb96c0e | Bob True            |  22 | WY\n 2db6af28-47c7-4107-9b67-bdec3321f14c | Liz Trubune         |  30 | WY\n ea51c6b2-37f0-47ed-9211-d1064d3eacfd | Jane True           |  44 | WY\n 4c827537-1755-4242-8241-a77ff4173554 | Lary Smith          |  58 | NJ\n 3674b39d-4a61-45e0-99e6-65fb7edbbf82 | Dave Dave           |  21 | NJ\n e543c622-24be-4cc2-8241-e8a2dfd1f15c | Laura Ann Alkinoos  |  34 | PA\n(11 rows)\n\n```\n\n#### Tags: \"primary key\",\"uuid\",\"unique id\",\"UUID\"\n\n","Lesson_no":8}' where homework_id = 'f52169d8-180a-4ee5-6c5e-676e2b8cb6ca';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'b2af745c-ab4b-4ffc-4852-535139741388', ' Interactive - 09 - add a table with state codes', '9', 'hw09.mp4', 'hw09.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '45734fac-134a-4937-4f2d-f4d2b4b2785e', 'foreign key' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '45734fac-134a-4937-4f2d-f4d2b4b2785e', 'b2af745c-ab4b-4ffc-4852-535139741388' );
insert into ct_tag ( tag_id, tag_word ) values ( '27426a75-9e5b-40c7-6a28-edfe273df1c9', 'alter table' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '27426a75-9e5b-40c7-6a28-edfe273df1c9', 'b2af745c-ab4b-4ffc-4852-535139741388' );
insert into ct_tag ( tag_id, tag_word ) values ( 'bcdee2bd-ce03-44ee-44d7-abc03f6b25b7', 'add constraint' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bcdee2bd-ce03-44ee-44d7-abc03f6b25b7', 'b2af745c-ab4b-4ffc-4852-535139741388' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 09 - add a table with state codes\n\nA check constraint on all the state codes would be very long.   There are also\ntimes when that is just not the best way to check that a value is correct.\n\nThere is a different way to check that a value is in a range of values.\nThat is to add a new table that contains all the values and have the\ndatabase verify that new values are in this list.\n\nFirst let''s create the table with the values.  We can also have the\ndatabase verify that nobody puts in an empty state name.  This is\nthe \"NOT NULL\" on each of the types.\n\n```\nCREATE TABLE us_state (\n\tstate_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key,\n\tstate_name text NOT NULL,\n\tstate char varying (2) NOT NULL,\n\tFIPS_code char varying (2) NOT NULL\n);\n\n```\n\nWe will also need an index on the state code so that we can\nreference it.\n\n\n```\nCREATE UNIQUE INDEX us_state_uidx1 on us_state ( state );\n\n```\n\nThen we need to populate the state table with states.  Please cut-and-paste\nthis or use the supplied file to insert the states.\n\n```\nINSERT INTO us_state ( state_name, state, FIPS_code ) values\n\t(''Alabama'',''AL'',''01''),\n\t(''Alaska'',''AK'',''02''),\n\t(''Arizona'',''AZ'',''04''),\n\t(''Arkansas'',''AR'',''05''),\n\t(''California'',''CA'',''06''),\n\t(''Colorado'',''CO'',''08''),\n\t(''Connecticut'',''CT'',''09''),\n\t(''Delaware'',''DE'',''10''),\n\t(''District of Columbia'',''DC'',''11''),\n\t(''Florida'',''FL'',''12''),\n\t(''Georgia'',''GA'',''13''),\n\t(''Hawaii'',''HI'',''15''),\n\t(''Idaho'',''ID'',''16''),\n\t(''Illinois'',''IL'',''17''),\n\t(''Indiana'',''IN'',''18''),\n\t(''Iowa'',''IA'',''19''),\n\t(''Kansas'',''KS'',''20''),\n\t(''Kentucky'',''KY'',''21''),\n\t(''Louisiana'',''LA'',''22''),\n\t(''Maine'',''ME'',''23''),\n\t(''Maryland'',''MD'',''24''),\n\t(''Massachusetts'',''MA'',''25''),\n\t(''Michigan'',''MI'',''26''),\n\t(''Minnesota'',''MN'',''27''),\n\t(''Mississippi'',''MS'',''28''),\n\t(''Missouri'',''MO'',''29''),\n\t(''Montana'',''MT'',''30''),\n\t(''Nebraska'',''NE'',''31''),\n\t(''Nevada'',''NV'',''32''),\n\t(''New Hampshire'',''NH'',''33''),\n\t(''New Jersey'',''NJ'',''34''),\n\t(''New Mexico'',''NM'',''35''),\n\t(''New York'',''NY'',''36''),\n\t(''North Carolina'',''NC'',''37''),\n\t(''North Dakota'',''ND'',''38''),\n\t(''Ohio'',''OH'',''39''),\n\t(''Oklahoma'',''OK'',''40''),\n\t(''Oregon'',''OR'',''41''),\n\t(''Pennsylvania'',''PA'',''42''),\n\t(''Puerto Rico'',''PR'',''72''),\n\t(''Rhode Island'',''RI'',''44''),\n\t(''South Carolina'',''SC'',''45''),\n\t(''South Dakota'',''SD'',''46''),\n\t(''Tennessee'',''TN'',''47''),\n\t(''Texas'',''TX'',''48''),\n\t(''Utah'',''UT'',''49''),\n\t(''Vermont'',''VT'',''50''),\n\t(''Virginia'',''VA'',''51''),\n\t(''Virgin Islands'',''VI'',''78''),\n\t(''Washington'',''WA'',''53''),\n\t(''West Virginia'',''WV'',''54''),\n\t(''Wisconsin'',''WI'',''55''),\n\t(''Wyoming'',''WY'',''56'')\n;\n\n```\n\nNow let''s make the relationship between them know to the database.\nThis is called a foreign key constraint.\n\n```\nALTER TABLE name_list \n\tADD CONSTRAINT name_list_state_fk\n\tFOREIGN KEY (state) \n\tREFERENCES us_state (state)\n;\n\n```\n\nNow when we try to insert data that is has an invalid state code\ninto our list of names it will get rejected.\n\nThe following SQL will *not* run successfully\n\n```\ninsert into name_list ( real_name, state ) values\n\t( ''nobody'', ''XX'' )\n;\n```\n\nYou should get an error that looks similar to:\n\n```\nERROR:  insert or update on table \"name_list\" violates foreign key constraint \"name_list_state_fk\"\nDETAIL:  Key (state)=(XX) is not present in table \"us_state\".\n```\n\n#### Tags: \"foreign key\",\"alter table\",\"add constraint\"\n\n\n","Lesson_no":9}' where homework_id = 'b2af745c-ab4b-4ffc-4852-535139741388';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '897b9257-aebf-4b50-7ea7-1027b0ff0d3c', ' Interactive - 10 - add a index on the name table', '10', 'hw10.mp4', 'hw10.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '74edc0f5-1e9f-40b2-5b77-aa5c1ef5d385', 'create index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '74edc0f5-1e9f-40b2-5b77-aa5c1ef5d385', '897b9257-aebf-4b50-7ea7-1027b0ff0d3c' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 10 - add a index on the name table\n\nWe have already added indexes but we need to make this process explicit.\n\nThe most common indexes are based on special kind of tree called a b-tree.\n\nIt is a very wide tree that allows us to get to the data stored on disk\nquickly.  This is not the only kind of index.\n\nThere are indexes for other things that are built into PostgreSQL.\n\nLet''s create an index on the real_name field.\n\nThe general form for the create index looks like:\n\n```\ncreate [unique] index \u003cindex-name\u003e on \u003ctable-name\u003e (\n\t\u003ccolunm-name-1\u003e,\n\t\u003ccol-2\u003e,\n\t...\n);\n```\n\nSo...\n\n```\nCREATE INDEX name_list_idx1 on name_list ( real_name );\n\n```\n\nNow when we search for a name it will use the index to help to find the\nnames in the table.  If we have a million names in many blocks of data\nit will only take a few blocks of index search to get to the row with\nthe name we are interested in.\n\nThe disadvantage is that we have to have the exact name to search on.\nDo you remember our lower-case name, `bob true` from the 2nd homework.\nIf we look for that we will not find it at all because we fixed the\nname to be `Bob True`.\n\n\n```\nselect * from name_list where real_name = ''bob true'';\n\n```\n\nIndexes are important because this is the primary way that we can\ninfluence the performance of a database.   If we add the word \"unique\"\nthen it also grantees that a column of data is unique.\n\nNote that we can build indexes on more than one column.  If that is\nthe case then a for a select to use the multi-column index will\nrequire that all of the columns in the index are in the where \nclause.\n\nIndexes are also used when we sort data to get it back in order.\nWe will return to this subject of sorting data in a future\nhomework.\n\n\n#### Tags: \"create index\"\n\n","Lesson_no":10}' where homework_id = '897b9257-aebf-4b50-7ea7-1027b0ff0d3c';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '3c0d812e-fd9a-4968-46b0-c3b36129336a', ' Interactive - 11 - add a index on the name table that is case insensitive.', '11', 'hw11.mp4', 'hw11.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c9ffa298-a83d-49fb-42c0-727724c94f42', 'index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c9ffa298-a83d-49fb-42c0-727724c94f42', '3c0d812e-fd9a-4968-46b0-c3b36129336a' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '74edc0f5-1e9f-40b2-5b77-aa5c1ef5d385', '3c0d812e-fd9a-4968-46b0-c3b36129336a' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a39483d7-c1a3-4852-54a9-21a764a11be4', 'lower' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a39483d7-c1a3-4852-54a9-21a764a11be4', '3c0d812e-fd9a-4968-46b0-c3b36129336a' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 11 - add a index on the name table that is case insensitive.\n\nLet''s address the case sensitive problem first.\n\nWe can create indexes on functions of data.  This allows us to have\nan index where we convert the upper/lower case to all lower case\nand then index this result.\n\n```\nCREATE INDEX user_real_name_ci_idx1 ON name_list ((lower(real_name)));\n\n```\n\nNow when we search the table using the WHERE clause we can use the `lower()` function on\nboth sides of the equal and use the index to find the data.\n\n```\nSELECT * \n\tFROM name_list \n\tWHERE lower(real_name) = lower(''Bob True'')\n;\n\n```\n\nIndexes are also a disadvantage.  Every insert of a row now requires an insert\nto each of the indexes.  They take up storage space.   This means that we are\nusing space and time at data insert or update to save time when we select the\ndata back.  Most interactive databases have 10 to 20 times as many selects\nas they do insert/update operations.   So this is usually a good tried off.\n\nWe can also get the database to tell us the set of indexes that are not\nused.  We may want to get rid of unused indexes.  We can do that with\n\n```\ndrop index \u003cindex_name\u003e;\n```\n\nCare should be taken.  If the index is a \"UNIQUE\" index and you remove it\nyou are also removing the unique constraint on the column of data.\n\nLet''s get rid of the index that is upper-lower case on the table.\n\n```\ndrop index name_list_idx1;\n```\n\nThis is the query that I used to find unused indexes (it''s a bit complicated):\nWe will use this in a homework on database performance later in the class.\n\n```\nSELECT\n    idstat.relname AS TABLE_NAME,\n    indexrelname AS INDEX_NAME,\n    idstat.idx_scan AS index_scans_count,\n    pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,\n    tabstat.idx_scan AS table_reads_index_count,\n    tabstat.seq_scan AS table_reads_seq_count,\n    tabstat.seq_scan + tabstat.idx_scan AS table_reads_count,\n    n_tup_upd + n_tup_ins + n_tup_del AS table_writes_count,\n    pg_size_pretty(pg_relation_size(idstat.relid)) AS table_size\nFROM pg_stat_user_indexes AS idstat\n\tJOIN pg_indexes ON indexrelname = indexname\n\t\t\tAND idstat.schemaname = pg_indexes.schemaname\n\tJOIN pg_stat_user_tables AS tabstat ON idstat.relid = tabstat.relid\nWHERE indexdef !~* ''unique''\nORDER BY\n    idstat.idx_scan DESC,\n    pg_relation_size(indexrelid) DESC\n;\n\n```\n\nPlease cut/past the above query and run it once.\n\n\nThings to note:\n\n1. The index name has to be unique.\n2. You can have more than one index on a table.\n3. Function based indexes require that the function be run on every insert.  That takes time.\n4. We can create our own functions and index on them as well.   We will return to this subject later with `soundex()`\n\n#### Tags: index,\"create index\",\"lower\"\n\n","Lesson_no":11}' where homework_id = '3c0d812e-fd9a-4968-46b0-c3b36129336a';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'b29de643-4918-4a40-7cf3-0d5d90fda2cd', ' Interactive - 12 - fix our duplicate data', '12', 'hw12.mp4', 'hw12.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ab77d992-71e4-490b-666f-8e63a0b7b44c', 'duplicate data' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ab77d992-71e4-490b-666f-8e63a0b7b44c', 'b29de643-4918-4a40-7cf3-0d5d90fda2cd' );
insert into ct_tag ( tag_id, tag_word ) values ( '3e8b4634-8320-4ec1-472b-1f488db26238', 'delete' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3e8b4634-8320-4ec1-472b-1f488db26238', 'b29de643-4918-4a40-7cf3-0d5d90fda2cd' );
insert into ct_tag ( tag_id, tag_word ) values ( 'abcce537-a46a-4a76-77ab-8996892b4027', 'type cast' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'abcce537-a46a-4a76-77ab-8996892b4027', 'b29de643-4918-4a40-7cf3-0d5d90fda2cd' );
insert into ct_tag ( tag_id, tag_word ) values ( '9b4258dc-9c05-47f4-58c3-54e9daf5add8', 'min' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9b4258dc-9c05-47f4-58c3-54e9daf5add8', 'b29de643-4918-4a40-7cf3-0d5d90fda2cd' );
insert into ct_tag ( tag_id, tag_word ) values ( 'b445cd3a-fe83-494f-5850-72fc5baba48d', 'not in' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'b445cd3a-fe83-494f-5850-72fc5baba48d', 'b29de643-4918-4a40-7cf3-0d5d90fda2cd' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 12 - fix our duplicate data\n\nNow that we have a unique primary key we can fix the duplicate name and its row.\n\n```\nSELECT * from name_list;\n\n```\n\nThis shows us 2 rows and we would like to delete just one of them.  Without the unique\nprimary key this is really hard to do.  With the key we can delete one of the two rows.\n\nThis makes for a complex query.   First let''s select the UUID column, name_list_id\nwhere the duplicate is.\n\n\n```\nSELECT name_list_id\n\tFROM name_list \n\tWHERE real_name = ''Jane True''\n;\n\n```\n\nNow let''s just select 1 of the IDs. To do this we have to convert the UUID to text,\nthat is the `::text` so that we can use a function `min()` on it.  This is kind of\na random pick - but it will give us just 1 UUID.\n\n\n```\nSELECT min(name_list_id::text)\n\tFROM name_list \n\tWHERE real_name = ''Jane True''\n;\n\n```\n\nNow we can delete and skip over the 1 UUID that we picked from above.  This is\nthe `not in` portion - where we put a select inside the delete.\n\n\n```\nDELETE FROM name_list\n\tWHERE real_name = ''Jane True''\n\t  AND name_list_id::text not in (\n\t\tSELECT min(name_list_id::text)\n\t\tFROM name_list \n\t\tWHERE real_name = ''Jane True''\n\t)\n;\n\n```\n\nNow select again and we have removed the duplicate.\n\n```\nSELECT * from name_list;\n\n```\n\n#### Tags: \"duplicate data\",\"delete\",\"type cast\",\"min\",\"not in\"\n\n","Lesson_no":12}' where homework_id = 'b29de643-4918-4a40-7cf3-0d5d90fda2cd';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '21b4dc44-6e85-4efb-4c63-9b59e3a154ee', ' Interactive - 13 - drop both tables', '13', 'hw13.mp4', 'hw13.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'be890fbf-7de3-4404-44fa-22c770ccb1cb', 'reload data' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'be890fbf-7de3-4404-44fa-22c770ccb1cb', '21b4dc44-6e85-4efb-4c63-9b59e3a154ee' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ed0588d2-74b4-4587-7661-c5e810c6a4ba', 'drop cascade' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ed0588d2-74b4-4587-7661-c5e810c6a4ba', '21b4dc44-6e85-4efb-4c63-9b59e3a154ee' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '5f03ddb2-3620-4dac-4170-1b374bcad6a3', 13, 'te: SQL-Select', 'select ''PASS'' from ( select count(1) as cnt from us_state ) as foo where foo.cnt = 53' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '2731d1e9-2863-4773-615c-a1e454d3a498', 13, 'oRun: hw13_4.sql' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 13 - drop both tables\n\nLet''s try getting rid of our 2 tables.   Our first attempt to do this will fail.\n\n```\ndrop table us_state;\n```\n\nWe have a dependency via foreign constraint on us_state.  That is name_list.\n\nWe can do this in order - or we can use an option to \"cascade\" the drops.\n\"cascade\" is powerful but dangerous.  In PosgreSQL it will drop the table\nand associated constraints.  In Oracle it cascades to the tables referenced!\n\n\n```\n\nDROP table name_list;\nDROP table us_state;\n\n\n```\n\n\n\nNow use the supplied script to re-create the tables.  There will be some additional\ncolumns when you do this that we will use in future homework exercises.\n\nThe file is hw13_4.sql - run the entire file.  The file is show below.   After you\nhave run the file do the select to see a table of the states.\n\n```\n\nDROP TABLE if exists name_list cascade ;\nDROP TABLE if exists us_state cascade ;\n\nCREATE TABLE us_state (\n\tstate_id       UUID NOT NULL DEFAULT uuid_generate_v4() primary key,\n\tstate_name     text NOT NULL,\n\tstate          char varying (2) NOT NULL,\n\tFIPS_code      char varying (2) NOT NULL,\n\tarea_rank      int not null default 9999,\n\tarea_sq_mi     numeric not null default 0,\n\tpopulation     int not null default 0,\n\tfed_area       int   not null default 0,\n\tgdp_growth     float null default 0.0,\n\tgdp            float null default 0.0\n);\n\nCREATE UNIQUE INDEX us_state_uidx1 on us_state ( state );\n\n\nINSERT INTO us_state\n    ( state_name,             state,  FIPS_code,  population, area_rank, area_sq_mi, fed_area, gdp_growth, gdp ) values\n\t( ''Alabama'',               ''AL'',     ''01'' ,      4903185,        25,      50750,     6,         2.0,   196.9  ),\n\t( ''Alaska'',                ''AK'',     ''02'' ,       731545,         1,     570641,    12,        -0.3,    52.3  ),\n\t( ''Arizona'',               ''AZ'',     ''04'' ,      7278717,         6,     113642,    12,         4.0,   309.1  ),\n\t( ''Arkansas'',              ''AR'',     ''05'' ,      3017825,        27,      52075,     8,         0.9,   115.9  ),\n\t( ''California'',            ''CA'',     ''06'' ,     39512223,         3,     155973,    12,         3.5,  2700.0  ),\n\t( ''Colorado'',              ''CO'',     ''08'' ,      5758736,         8,     103730,    10,         3.5,   336.4  ),\n\t( ''Connecticut'',           ''CT'',     ''09'' ,      3565387,        48,       4845,     1,         1.0,   242.2  ),\n\t( ''Delaware'',              ''DE'',     ''10'' ,       973764,        50,       1955,     3,         0.3,    63.9  ),\n\t( ''District of Columbia'',  ''DC'',     ''11'' ,       705749,        52,        137,     5,         3.2,  125.94  ),\n\t( ''Florida'',               ''FL'',     ''12'' ,     21477737,        26,      53997,     6,         3.5,   917.0  ),\n\t( ''Georgia'',               ''GA'',     ''13'' ,     10617423,        21,      57919,     6,         2.6,   522.4  ),\n\t( ''Hawaii'',                ''HI'',     ''15'' ,      1415872,        47,       6423,    12,         1.0,    80.8  ),\n\t( ''Idaho'',                 ''ID'',     ''16'' ,      1787065,        11,      82751,    12,         4.1,    69.9  ),\n\t( ''Illinois'',              ''IL'',     ''17'' ,     12671821,        24,      55593,     7,         2.1,   764.2  ),\n\t( ''Indiana'',               ''IN'',     ''18'' ,      6732219,        38,      35870,     7,         1.9,   326.1  ),\n\t( ''Iowa'',                  ''IA'',     ''19'' ,      3155070,        23,      55875,     7,         1.4,   170.7  ),\n\t( ''Kansas'',                ''KS'',     ''20'' ,      2913314,        13,      81823,    10,         1.9,   152.3  ),\n\t( ''Kentucky'',              ''KY'',     ''21'' ,      4467673,        36,      39732,     8,         1.4,   186.1  ),\n\t( ''Louisiana'',             ''LA'',     ''22'' ,      4648794,        33,      43566,    11,         1.1,   231.2  ),\n\t( ''Maine'',                 ''ME'',     ''23'' ,      1344212,        39,      30865,     1,         1.9,    56.7  ),\n\t( ''Maryland'',              ''MD'',     ''24'' ,      6045680,        42,       9775,     5,         1.6,   367.9  ),\n\t( ''Massachusetts'',         ''MA'',     ''25'' ,      6949503,        45,       7838,     1,         2.7,   501.3  ),\n\t( ''Michigan'',              ''MI'',     ''26'' ,      9986857,        22,      56539,     7,         2.7,   468.4  ),\n\t( ''Minnesota'',             ''MN'',     ''27'' ,      5639632,        14,      79617,     9,         2.2,   331.4  ),\n\t( ''Mississippi'',           ''MS'',     ''28'' ,      2976149,        31,      46914,     6,         1.0,   101.6  ),\n\t( ''Missouri'',              ''MO'',     ''29'' ,      6137428,        18,      68898,     8,         2.3,   282.2  ),\n\t( ''Montana'',               ''MT'',     ''30'' ,      1068778,         4,     145556,     9,         0.9,    44.8  ),\n\t( ''Nebraska'',              ''NE'',     ''31'' ,      1934408,        15,      76878,    10,         1.5,   112.2  ),\n\t( ''Nevada'',                ''NV'',     ''32'' ,      3080156,         7,     109806,    12,         3.2,   146.2  ),\n\t( ''New Hampshire'',         ''NH'',     ''33'' ,      1359711,        44,       8969,     1,         2.2,    75.6  ),\n\t( ''New Jersey'',            ''NJ'',     ''34'' ,      8882190,        46,       7419,     5,         2.0,   554.7  ),\n\t( ''New Mexico'',            ''NM'',     ''35'' ,      2096829,         5,     121365,    11,         1.8,    92.6  ),\n\t( ''New York'',              ''NY'',     ''36'' ,     19453561,        30,      47224,     2,         2.1,  1400.0  ),\n\t( ''North Carolina'',        ''NC'',     ''37'' ,     10488084,        29,      48718,     5,         2.9,   496.1  ),\n\t( ''North Dakota'',          ''ND'',     ''38'' ,       762062,        17,      68994,     9,         2.5,    51.2  ),\n\t( ''Ohio'',                  ''OH'',     ''39'' ,     11689100,        35,      40953,     4,         1.8,   601.5  ),\n\t( ''Oklahoma'',              ''OK'',     ''40'' ,      3956971,        19,      68679,    10,         1.8,   193.0  ),\n\t( ''Oregon'',                ''OR'',     ''41'' ,      4217737,        10,      96003,    12,         3.4,   213.7  ),\n\t( ''Pennsylvania'',          ''PA'',     ''42'' ,     12801989,        32,      44820,     4,         2.1,   712.1  ),\n\t( ''Puerto Rico'',           ''PR'',     ''72'' ,      3194000,        49,       3515,     2,         0.4,   101.0  ),\n\t( ''Rhode Island'',          ''RI'',     ''44'' ,      1059361,        51,       1034,     1,         0.6,    53.7  ),\n\t( ''South Carolina'',        ''SC'',     ''45'' ,      5148714,        40,      30111,     5,         1.6,   202.8  ),\n\t( ''South Dakota'',          ''SD'',     ''46'' ,       884659,        16,      75898,     9,         1.3,    45.9  ),\n\t( ''Tennessee'',             ''TN'',     ''47'' ,      6833174,        34,      41220,     6,         3.0,   322.9  ),\n\t( ''Texas'',                 ''TX'',     ''48'' ,     28995881,         2,     261914,    11,         3.2,  1700.0  ),\n\t( ''Utah'',                  ''UT'',     ''49'' ,      3205958,        12,      82168,    12,         4.3,   157.2  ),\n\t( ''Vermont'',               ''VT'',     ''50'' ,       623989,        43,       9249,     1,         1.2,    30.0  ),\n\t( ''Virginia'',              ''VA'',     ''51'' ,      8535519,        37,      39598,     5,         2.4,    71.3  ),\n\t( ''Virgin Islands'',        ''VI'',     ''78'' ,       106977,        53,         68,    12,         0.24,     3.85),\n\t( ''Washington'',            ''WA'',     ''53'' ,      7614893,        20,      66582,    12,         5.7,   506.7  ),\n\t( ''West Virginia'',         ''WV'',     ''54'' ,      1792147,        41,      24087,     5,         2.4,    71.3  ),\n\t( ''Wisconsin'',             ''WI'',     ''55'' ,      5822434,        25,      54314,     7,         2.5,   299.8  ),\n\t( ''Wyoming'',               ''WY'',     ''56'' ,       578759,         9,      97105,    10,         0.3,    38.4  );\n\n\nCREATE TABLE name_list (\n\tname_list_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key,\n\treal_name text check ( length(real_name) \u003e= 1 ) not null,\n\tage int check ( age \u003e 0 and age \u003c 154 ) not  null,\t\n\tstate char varying (2) not null,\n\tpay numeric(10,2) \n);\n\nCREATE INDEX name_list_idx1 on name_list ( real_name );\nCREATE INDEX user_real_name_ci_idx1 ON name_list ((lower(real_name)));\n\nALTER TABLE name_list\n\tADD CONSTRAINT name_list_state_fk\n\tFOREIGN KEY (state)\n\tREFERENCES us_state (state)\n;\n\nINSERT INTO name_list ( real_name, age, state, pay ) values\n\t( ''Bob True'',            22, ''WY'', 31000 ),\n\t( ''Jane True'',           20, ''WY'', 28000 ),\n\t( ''Tom Ace'',             31, ''NJ'', 82500 ),\n\t( ''Steve Pen'',           33, ''NJ'', 89400 ),\n\t( ''Laura Jean Alkinoos'', 34, ''PA'', 120000 ),\n\t( ''Philip Schlump'',      62, ''WY'', 101200 ),\n\t( ''Liz Trubune'',         30, ''WY'', 48000 ),\n\t( ''Lary Smith'',          58, ''NJ'', 48000 ),\n\t( ''Dave Dave'',           21, ''NJ'', 48000 ),\n\t( ''Laura Ann Alkinoos'',  34, ''PA'', 48000 )\n;\n\n\n```\n\nYou should have both states and territories with square miles.\n\n```\nSELECT * from us_state;\n```\n\n#### Tags: \"reload data\",\"drop cascade\"\n\n\n\n","Lesson_no":13}' where homework_id = '21b4dc44-6e85-4efb-4c63-9b59e3a154ee';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '29928fdf-4739-4ac6-5a0c-a547bf360734', ' Interactive - 14 - data types', '14', 'hw14.mp4', 'hw14.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '959ca46c-55ad-4f5f-55c2-78f90d5234dc', 'data types' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '959ca46c-55ad-4f5f-55c2-78f90d5234dc', '29928fdf-4739-4ac6-5a0c-a547bf360734' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 14 - data types\n\nThis is really the stuff from chapter 3 in the book.\n\nWhen we create a table,  ( Already created in the last homework when you ran the file )\n\n```\nCREATE TABLE us_state (\n\tstate_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key,\n\tstate_name text NOT NULL,\n\tstate char varying (2) NOT NULL,\n\tFIPS_code char varying (2) NOT NULL,\n\tarea_rank int not null default 9999,\n\tarea_sq_mi numeric not null default 0\n);\n\n```\n\nwe specify that the columns have a \"type\" and constraints on the data.\n\nThe most common set of types are (ordered from my own code on how frequently I use each type):\n\n| Type               | Description                                                           |\n|--------------------|-----------------------------------------------------------------------|\n| text               | a string of 0 or more characters.                                     |\n| varchar(n)         | a string of 0 to `n` characters.                                      |\n| uuid               | a UUID.                                                               |\n| date               | a date - not a time.                                                  |\n| time               | a time value.                                                         |\n| bigint, int8       | 8 byte integer                                                        |\n| timestamp          | a date and a time - usually with a time zone.                         |\n| numeric            | a large number with (think 130k digits, before/after decimal point)   |\n| decimal            | a large number with (think 130k digits, before/after decimal point)   |\n| float              | 4 byte - a floating point number with an exponent                     |\n| real               | 4 byte - a floating point number with an exponent                     |\n| json, jsonb        | JSON data                                                             |\n| double precision   | 8 byte - a floating point number with an exponent                     |\n| bit, varbit        | variable length bit string values                                     |\n| serial             | a 4 byte auto-generated integer that counts up                        |\n| interval           | a time interval can be +/- 178million years                           |\n| bytea              | byte array - binary data                                              |\n| boolean            | true/false                                                            |\n| point, line        | geometric data                                                        |\n| box, path          | geometric data                                                        |\n| polygon, cirlce    | geometric data                                                        |\n| tvector, tsquery   | full text search type                                                 |\n| inet, cidr         | interget address tyeps, IPv4 122.4.3.22 or IPV6                       |\n| user defined tyeps | The type system is extensible!                                        |\n\t\n\nAlso there is a Geographic Information Package for PostgreSQL that is very good.\nIt is built on top of the geometric data types and GIN indexes.   \n\nWe are not going to use all of these types.  Just a few of the most common ones like timestamp.\n\nOften we want a column to show when a new row is inserted or updated in a table.\nLet''s add these to our name_list table.\n\n```\nalter table name_list add updated timestamp ;\nalter table name_list add created timestamp \n\tdefault current_timestamp not null  ;\n\n```\n\nTo make the ''updated'' column work we need have PostgreSQL run some\ncode when an update happens.  This kind of a thing is called a \"trigger\".\n\nLet''s add a trigger to the table.  \nRun the file `hw14_2.sql`.  The contents of the file is shown below.\n\n\n```\n\nCREATE OR REPLACE function name_list_upd()\nRETURNS trigger AS \n$$\nBEGIN\n  NEW.updated := current_timestamp;\n  RETURN NEW;\nEND\n$$\nLANGUAGE ''plpgsql'';\n\n\nCREATE TRIGGER name_list_trig\nBEFORE update ON name_list\nFOR EACH ROW\nEXECUTE PROCEDURE name_list_upd();\n\n\n```\n\n\nNow when we do an update on this table it will set the updated field\nto the current time.\n\n\n#### Tags: \"data types\"\n","Lesson_no":14}' where homework_id = '29928fdf-4739-4ac6-5a0c-a547bf360734';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '97969e65-84f4-4231-49e7-9d3649611fb7', ' Interactive - 15 - select with group data of data', '15', 'hw15.mp4', 'hw15.jpg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9b4258dc-9c05-47f4-58c3-54e9daf5add8', '97969e65-84f4-4231-49e7-9d3649611fb7' );
insert into ct_tag ( tag_id, tag_word ) values ( '999d7ce8-2206-4b4e-7b00-8bbd626c627d', 'max' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '999d7ce8-2206-4b4e-7b00-8bbd626c627d', '97969e65-84f4-4231-49e7-9d3649611fb7' );
insert into ct_tag ( tag_id, tag_word ) values ( 'f6e067a3-d310-4766-4d29-bed7ea7b7b8a', 'avg' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f6e067a3-d310-4766-4d29-bed7ea7b7b8a', '97969e65-84f4-4231-49e7-9d3649611fb7' );
insert into ct_tag ( tag_id, tag_word ) values ( '5ff7cc40-baa5-4347-6a31-14aff29ebf5f', 'group by' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5ff7cc40-baa5-4347-6a31-14aff29ebf5f', '97969e65-84f4-4231-49e7-9d3649611fb7' );
insert into ct_tag ( tag_id, tag_word ) values ( '50c3b1ea-3130-48e7-6c7b-7cbe28763701', 'order by' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '50c3b1ea-3130-48e7-6c7b-7cbe28763701', '97969e65-84f4-4231-49e7-9d3649611fb7' );
insert into ct_tag ( tag_id, tag_word ) values ( '392c4309-8638-4e5f-6a6d-70c98f41230e', 'nested query' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '392c4309-8638-4e5f-6a6d-70c98f41230e', '97969e65-84f4-4231-49e7-9d3649611fb7' );
insert into ct_tag ( tag_id, tag_word ) values ( '3c87fd41-d551-495a-5eea-bea4f7a983bd', 'sub query' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3c87fd41-d551-495a-5eea-bea4f7a983bd', '97969e65-84f4-4231-49e7-9d3649611fb7' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 15 - select with group data of data\n\nSQL has the ability to group data.  When we use the count() function\nwe are grouping by data.  You can only group by data that you\nselect - you can not group by hidden columns.   However you can\nuse a nested select to pick just some of the columns after you\nhave grouped.  The last part of this homework will show this.\nFirst we have to group the data.\n\n```\nSELECT \n\t\tfed_area,\n\t\tmin(gdp_growth) as max_growth,\n\t\tavg(gdp_growth) as avg_growth,\n\t\tmax(gdp_growth) as min_growth,\n\t\tstring_agg(state, '','' ORDER BY state) as  state_list\n\tFROM us_state\n\tGROUP BY fed_area\n\tORDER BY fed_area\n;\n\n```\n\nYou can group by more than one column.  All the non-grouped columns\nhave to be in some form aggregated.   In this example we have min, max, avg\nand string_agg.\n\nTo group columns the database has to sort them.  So an order by is usually\nfree.  If you group by a column that there is a b-tree index on the group\nby is much faster.   The database will use the index instead of re-sorting\nthe data.  Other index types do not provide sorted data (gin, gist, hash etc).\n\nLet''s say we just want the avg_growth and the list of states.  We\nhave to have fed_area to do the grouping - but we can nest\nour select.\n\n\n```\nSELECT t1.avg_growth, t1.state_list\n\tFROM (\n\t\tSELECT \n\t\t\t\tt2.fed_area,\n\t\t\t\tavg(t2.gdp_growth) as avg_growth,\n\t\t\t\tstring_agg(t2.state, '','' ORDER BY state) as  state_list\n\t\t\tFROM us_state as t2\n\t\t\tGROUP BY t2.fed_area\n\t) as t1\n;\n\n```\n\n## Take Away\n\n1. group by\n2. order by\n3. min/avg/max\n4. nested selects in FROM\n4. Aliasing tables int the \"FROM\" with \"as\"\n\n## Book\n\n- group by - page 120 to 121\n- min, max - page 119\n- avg - 64, 195\n- order by - page 15, 16\n- alias table name - page 86\n- nested query in From - page 195 (avg used also)\n\n#### Tags: \"min\",\"max\",\"avg\",\"group by\",\"order by\",\"nested query\",\"sub query\"\n\n","Lesson_no":15}' where homework_id = '97969e65-84f4-4231-49e7-9d3649611fb7';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'ede933b8-9242-47da-5c8b-f4e791a8945f', ' Interactive - 16 - count matching rows in a select', '16', 'hw16.mp4', 'hw16.jpg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5ff7cc40-baa5-4347-6a31-14aff29ebf5f', 'ede933b8-9242-47da-5c8b-f4e791a8945f' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f6e067a3-d310-4766-4d29-bed7ea7b7b8a', 'ede933b8-9242-47da-5c8b-f4e791a8945f' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '50c3b1ea-3130-48e7-6c7b-7cbe28763701', 'ede933b8-9242-47da-5c8b-f4e791a8945f' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 16 - count matching rows in a select\n\nYou can count stuff that is grouped.   This turns out to be very useful.\n\nSuppose that we want to know how many states are in a group and the\nsum of the population in the group.\n\n```\nSELECT \n\t\tfed_area,\n\t\tround(avg(gdp_growth)::numeric,2)::text||''%'' as avg_growth,\n\t\tsum(population) as sum_population,\n\t\tcount(state) as no_of_states,\n\t\tstring_agg(state, '','' ORDER BY state) as  state_list\n\tFROM us_state\n\tGROUP BY fed_area\n\tORDER BY 2 desc\n;\n\n```\n\nYou should get 12 rows order by decreasing average growth.\n\n\n\n\n## Take Away\n\n1. You can count the number of rows in the group with count.\n2. You can order by a column position this is the \"2 desc\".\n3. The function round() takes a numeric argument - but the output of avg() is a double precision float.  A type cast is used.\n4. You can convert from the numeric result of round to text with a \"::text\" type cast - then add the ''%'' to show it is a percentage.\n\n\n\n## Book\n\n- group by - page 120 to 121\n- avg - 64\n- order by - page 15, 16\n\n#### Tags: \"group by\",\"avg\",\"order by\"\n","Lesson_no":16}' where homework_id = 'ede933b8-9242-47da-5c8b-f4e791a8945f';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'f3cf1b03-f905-4d7d-4811-78463b17345d', ' Interactive - 17 - select with join ( inner join, left outer join )', '17', 'hw17.mp4', 'hw17.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '88f699b8-9e19-43b3-5796-0f0ca01f25ef', 'inner join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '88f699b8-9e19-43b3-5796-0f0ca01f25ef', 'f3cf1b03-f905-4d7d-4811-78463b17345d' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ea0b1916-c6c1-4c47-6274-13659a49b7db', 'outer join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ea0b1916-c6c1-4c47-6274-13659a49b7db', 'f3cf1b03-f905-4d7d-4811-78463b17345d' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e56850af-db1c-4139-4e32-1a4c4688e614', 'left outer join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e56850af-db1c-4139-4e32-1a4c4688e614', 'f3cf1b03-f905-4d7d-4811-78463b17345d' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 17 - select with join ( inner join, left outer join )\n\nSQL starts to get fun, and become a programming task as soon\nas we have more than one table.\n\nWe have already seen a join between name_list and us_state based\non state code.  Let''s get specific on how joins work and how\nto use them.\n\nThe most common join is the \"inner\" join.   This is when two\ntables have a common field and we match that field.\n\nThe SQL system takes the first table and creates a loop that\nwill iterate across the 2nd table and where the field matches\nit connects (joins) the data together.\n\nThis is all based on sets of data.\n\nSuppose that we have 2 tables, employees and departments.\n\n\n#### Employee Table\n\n\n| Name\t\t\t\t | Dept Code |  Pay        |\n|--------------------|-----------|-------------|\n| Bob                |   1       | $36,000.00  |\n| Jane               |   1       | $140,000.00 |\n| Sally              |   2       | $121,000.00 |\n| Liz                |   2       | $101,000.00 |\n| Dave               |   1       | $51,000,00  |\n| CEO Kelly          |   3       | $1.00       |\n| Uncle Bob          |   NULL    | $96,000.00  |\n| Brother Charley    |   NULL    | $48,000.00  |\n\n\n#### Department\n\n| Department\t\t | Dept Code |\n|--------------------|-----------|\n| Sales              |   1       |\n| Development        |   2       |\n| Executive          |   3       |\n| Maintenance        |   4       |\n\nBoth tables have `Dept_Code` and by matching them\nup we can find that Sally and Liz and the \nDevelopment Department.\n\nFile: hw17_1.sql\n\n\n```\n\nDROP TABLE if exists employee;\nDROP TABLE if exists department;\n\nCREATE TABLE employee (\n\temployee_id serial not null primary key,\n\tname text not null,\n\tdepartment_id  int,\n\tpay numeric(12,2) not null default 0\n);\n\nCREATE TABLE department (\n\tdepartment_id  serial not null primary key,\n\tdept_name text not null\n);\n\nINSERT INTO department ( department_id, dept_name ) values\n\t( 1, ''Sales'' ),\n\t( 2, ''Development'' ),\n\t( 3, ''Execuatie'' ),\n\t( 4, ''Maintenance'' )\n;\n\nINSERT INTO employee (  name, department_id, pay ) values\t\n\t( ''Bob'', 1, 36000 ),\n\t( ''Jane'', 1, 140000 ),\n\t( ''Sally'', 2, 121000 ),\n\t( ''Liz'', 2, 101000 ),\n\t( ''Dave'', 1, 51000 ),\n\t( ''CEO Kelly'', 3, 1 ),\n\t( ''Uncle Bob'', NULL, 96000 ),\n\t( ''Brother Charley'', NULL, 48000 )\n;\n\n\n\n```\n\nWe have created the table department with a set of used IDs, 1..4.  We need\nto update the number generator for the `serial` data to reflect this.\nIf we don''t it will start with 1 and we have already used 1.  We will not\nbe able to insert data into it.\n\nThe command to do this is:\n\n```\nALTER SEQUENCE department_department_id_seq RESTART WITH 5;\n\n```\n\nHowever you will want to be able to generate this kind of an alter.\nThe name for the sequence is,  the table name, concatenated with\nan underscore, then the column name, then `_seq`.\n\n## Inner Join \n\nThis is the set that both tables have in common.\n\n![PostgreSQL Inner Join](PostgreSQL-Inner-Join.png)\n\n\n```\nselect t1.name as \"Employee Name\", t2.dept_name as \"Department Name\", t1.pay \"Year pay\"\nfrom employee as t1\n\tjoin department as t2 on ( t1.department_id = t2.department_id )\n;\n\n```\n\nYou should get back 6 rows.  Note that \"Uncle Bob\" fails to show up.\nThis is an inner join - where the common field is not null.\n\nNote the double quotes `\"` around the column names to allow for upper-lower\ncase aliases on column names.\n\nWe can get the database to fill in NULLs for all the values for\n`Uncle Bob`.  This is a left outer join.  This is the 2nd most common\njoin.\n\n## Left Outer Join\n\nThis is all the rows in the FROM table joined to the right table\nor NULLs where they don''t join.\n\n![Left Outer Join](PostgreSQL-Left-Outer-Join.png)\n\n```\nselect t1.name as \"Employee Name\", t2.dept_name as \"Department Name\", t1.pay \"Year Pay\"\nfrom employee as t1\n\tleft outer join department as t2 on ( t1.department_id = t2.department_id )\n;\n\n```\n\nNow you should get back 8 rows including \"Uncle Bob\".\n\n\nNow we can answer the question how many people are not in departments and\nhow much do they get payed.\n\n```\nselect t1.name as \"Employee Name\", t2.dept_name as \"Department Name\", t1.pay \"Year Pay\"\nfrom employee as t1\n\tleft outer join department as t2 on ( t1.department_id = t2.department_id )\nwhere t1.department_id is null\n;\n\n```\n\nor how much pay is spent on employees not in departments.\n\n\n```\nselect sum(t0.pay) as \"Total Pay\"\nfrom (\n\tselect t1.name, t2.dept_name, t1.pay \n\tfrom employee as t1\n\t\tleft outer join department as t2 on ( t1.department_id = t2.department_id )\n\twhere t1.department_id is null\n) t0\n;\n\n```\n\nInteresting .... That is $144,000.00 payed out to employees that aren''t in\ndepartments.\n\n\nThere are \"right\" joins but usually I just swap the order of the tables and use the left joins.\n\n\n#### Tags: \"inner join\",\"outer join\",\"left outer join\"\n\n","Lesson_no":17}' where homework_id = 'f3cf1b03-f905-4d7d-4811-78463b17345d';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'cd59e967-3e24-4b6e-70d7-5ef73c40485a', ' Interactive - 18 - More joins (full joins)', '18', 'hw18.mp4', 'hw18.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '082f30bc-237d-4e90-6acc-478d5ec108e4', 'full join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '082f30bc-237d-4e90-6acc-478d5ec108e4', 'cd59e967-3e24-4b6e-70d7-5ef73c40485a' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c905f566-97e6-42cd-61c6-1596bd5c0523', 'full outer join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c905f566-97e6-42cd-61c6-1596bd5c0523', 'cd59e967-3e24-4b6e-70d7-5ef73c40485a' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 18 - More joins (full joins)\n\nWe will use the same data (hw17_1.sql)\n\n\n#### Employee Table\n\n\n| Name\t\t\t\t | Dept Code |  Pay        |\n|--------------------|-----------|-------------|\n| Bob                |   1       | $36,000.00  |\n| Jane               |   1       | $140,000.00 |\n| Sally              |   2       | $121,000.00 |\n| Liz                |   2       | $101,000.00 |\n| Dave               |   1       | $51,000,00  |\n| CEO Kelly          |   3       | $1.00       |\n| Uncle Bob          |   NULL    | $96,000.00  |\n| Brother Charley    |   NULL    | $48,000.00  |\n\n\n#### Department\n\n| Department\t\t | Dept Code |\n|--------------------|-----------|\n| Sales              |   1       |\n| Development        |   2       |\n| Executive          |   3       |\n| Maintenance        |   4       |\n\n\n## Full Join\n\nThis is more of a concatenation of rows of data.\n\n![Full Outer Join](PostgreSQL-Full-Outer-Join.png)\n\n```\nSELECT t1.name as \"Employee Name\", t2.dept_name as \"Department Name\", t1.pay \"Year pay\"\nFROM employee as t1\n\tFULL JOIN  department as t2 on ( t1.department_id = t2.department_id )\n;\n\n```\n\nYou shoudl get back 9 rows - note where the NULL values are.\n\n\n## Full Outer Join - Unique to Both tables Rows\n\nYou can also use the join to find the rows that are unique in each table.\n\n![PostgreSQL Inner Join](PostgreSQL-Full-Outer-Unique-Join.png)\n\n\n```\nSELECT t1.name as \"Employee Name\", t2.dept_name as \"Department Name\", t1.pay \"Year pay\"\nFROM employee as t1\n\tFULL JOIN department as t2 on ( t1.department_id = t2.department_id )\nWHERE t1.name is null \n   OR t2.dept_name is null\n;\n\n```\n\nYou should get back 3 rows.\n\n\n#### Tags: \"full join\",\"full outer join\"\n\n","Lesson_no":18}' where homework_id = 'cd59e967-3e24-4b6e-70d7-5ef73c40485a';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'c4ea7444-9d45-4d77-765d-18426ca22f50', ' Interactive - 19 - select using sub-query and exists', '19', 'hw19.mp4', 'hw19.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '03bb8d8f-c57c-4e16-4916-af489d8f7ae2', 'select exists' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '03bb8d8f-c57c-4e16-4916-af489d8f7ae2', 'c4ea7444-9d45-4d77-765d-18426ca22f50' );
insert into ct_tag ( tag_id, tag_word ) values ( '6fea96d3-55b5-4629-5299-ed400a6e7fa3', 'sub-query' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '6fea96d3-55b5-4629-5299-ed400a6e7fa3', 'c4ea7444-9d45-4d77-765d-18426ca22f50' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 19 - select using sub-query and exists\n\nLet''s use some of our joins to delete some data.\n\nLet''s get rid of the people that are not in a department.\n\n```\nSELECT t0.name as \"Employee Name\", t0.dept_name as \"Department Name\", t0.pay \"Year Pay\"\nFROM  (\n\t\tSELECT t1.name, t2.dept_name, t1.pay, t1.employee_id\n\t\tFROM employee as t1\n\t\t\tLEFT OUTER join department as t2 on ( t1.department_id = t2.department_id )\n\t\tWHERE t1.department_id is null\n\t\tORDER BY 1, 3 desc, 4\n\t) as t0\n;\n\n```\n\nYou should get back 2 rows.\n\nThese rows should be the offending rows with the department-less employees.\n\n#### Tags: \"select exists\",\"sub-query\"\n","Lesson_no":19}' where homework_id = 'c4ea7444-9d45-4d77-765d-18426ca22f50';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '6ddcb91a-d01e-49d8-78a3-a2dc1498a579', ' Interactive - 20 - delete with in based sub-query', '20', 'hw20.mp4', 'hw20.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '40e7e6d4-f3f4-49e8-597f-c5a2d121e279', 'delete exists' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '40e7e6d4-f3f4-49e8-597f-c5a2d121e279', '6ddcb91a-d01e-49d8-78a3-a2dc1498a579' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '6fea96d3-55b5-4629-5299-ed400a6e7fa3', '6ddcb91a-d01e-49d8-78a3-a2dc1498a579' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 20 - delete with in based sub-query\n\nLet''s use some of our joins to delete some data.\n\nWe will recreate the data from homework 17 again.  The file is hw17_1.sql\n\n```\n\nDROP TABLE if exists employee;\nDROP TABLE if exists department;\n\nCREATE TABLE employee (\n\temployee_id serial not null primary key,\n\tname text not null,\n\tdepartment_id  int,\n\tpay numeric(12,2) not null default 0\n);\n\nCREATE TABLE department (\n\tdepartment_id  serial not null primary key,\n\tdept_name text not null\n);\n\nINSERT INTO department ( department_id, dept_name ) values\n\t( 1, ''Sales'' ),\n\t( 2, ''Development'' ),\n\t( 3, ''Execuatie'' ),\n\t( 4, ''Maintenance'' )\n;\n\nINSERT INTO employee (  name, department_id, pay ) values\t\n\t( ''Bob'', 1, 36000 ),\n\t( ''Jane'', 1, 140000 ),\n\t( ''Sally'', 2, 121000 ),\n\t( ''Liz'', 2, 101000 ),\n\t( ''Dave'', 1, 51000 ),\n\t( ''CEO Kelly'', 3, 1 ),\n\t( ''Uncle Bob'', NULL, 96000 ),\n\t( ''Brother Charley'', NULL, 48000 )\n;\n\n\n\n```\n\n\nLet''s get rid of the people that are not in a department.\n\n```\nDELETE FROM employee as t0\n\tWHERE t0.employee_id in (\n\t\tSELECT t1.employee_id\n\t\tFROM employee as t1\n\t\t\tLEFT OUTER join department as t2 on ( t1.department_id = t2.department_id )\n\t\tWHERE t1.department_id is null\n\t)\n;\n\n```\n\nIt should delete 2 rows.\n\nThere are performance reasons to use either exists or in.  Exists combines the queries and is better when the tables are similar in size.\nIn is usually better when the left table is much smaller than the parent table.  In results in the inside query running to completion\nbefore the outside query.\n\n\n#### Tags: \"delete exists\",\"sub-query\"\n","Lesson_no":20}' where homework_id = '6ddcb91a-d01e-49d8-78a3-a2dc1498a579';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'ae30a109-4341-4b58-72bb-51ad0dbf5fee', ' Interactive - 21 - select with union / minus', '21', 'hw21.mp4', 'hw21.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '0c2f75e4-11ca-4d7a-69cd-e9834127a37c', 'union' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '0c2f75e4-11ca-4d7a-69cd-e9834127a37c', 'ae30a109-4341-4b58-72bb-51ad0dbf5fee' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 21 - select with union / minus\n\nYou can concatenate results with a \"UNION\" between two selects.  This can be kind of like a full join\nbut instead of getting back nulls you can fill in values that you like.\n\n```\n\tSELECT t1.name as \"Employee Name\", ''No Departmnt'' \"Department Name\", t1.pay \"Year Pay\"\n\tFROM employee as t1\n\tWHERE t1.department_id is null\nUNION\n\tSELECT ''No Name'' as \"Employee Name\", t2.dept_name as \"Department Name\", 0.0 \"Year Pay\"\n\tFROM department as t2 \nORDER BY 1\n;\n\n```\n\nYou should get back 4 rows.\n\n#### Tags: \"union\"\n\n\n","Lesson_no":21}' where homework_id = 'ae30a109-4341-4b58-72bb-51ad0dbf5fee';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'bb2d52a1-551d-4340-77a3-6a85480ae211', ' Interactive - 22 - recursive select - populating existing tables ', '22', 'hw22.mp4', 'hw22.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'cee659dd-63ff-44a9-4d17-3a02df580138', 'recursive select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'cee659dd-63ff-44a9-4d17-3a02df580138', 'bb2d52a1-551d-4340-77a3-6a85480ae211' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fc7f0190-0f97-463a-5a18-0f40aab6bddf', 'recursive' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fc7f0190-0f97-463a-5a18-0f40aab6bddf', 'bb2d52a1-551d-4340-77a3-6a85480ae211' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 22 - recursive select - populating existing tables \n\nIt is also possible to store and query recursive data.   You need a table\nwith and \"id\" and a \"parent_id\" that referees back to the same table.\n\n```\nCREATE TABLE tree_example (\n\tid  \t\t\tint not null primary key,\n\tmanager_id  \tint,\n\tname \t\t\ttext\n);\n\nINSERT INTO tree_example ( id, name, manager_id ) values\n\t(1, ''Michael North'', NULL),\n\t(2, ''Megan Berry'', 1),\n\t(3, ''Sarah Berry'', 1),\n\t(4, ''Zoe Black'', 1),\n\t(5, ''Tim James'', 1),\n\t(6, ''Bella Tucker'', 2),\n\t(7, ''Ryan Metcalfe'', 2),\n\t(8, ''Max Mills'', 2),\n\t(9, ''Benjamin Glover'', 2),\n\t(10, ''Carolyn Henderson'', 3),\n\t(11, ''Nicola Kelly'', 3),\n\t(12, ''Alexandra Climo'', 3),\n\t(13, ''Dominic King'', 3),\n\t(14, ''Leonard Gray'', 4),\n\t(15, ''Eric Rampling'', 4),\n\t(16, ''Piers Paige'', 7),\n\t(17, ''Ryan Henderson'', 7),\n\t(18, ''Frank Tucker'', 8),\n\t(19, ''Nathan Ferguson'', 8),\n\t(20, ''Kevin Rampling'', 8)\n;\n\n\n```\n\nNow we can to a recursive query.   In PostgreSQL they are composed of a base query\nunironed with all the children.\n\n```\nWITH RECURSIVE subordinates AS (\n\t\tSELECT\n\t\t\tid,\n\t\t\tmanager_id,\n\t\t\tname\n\t\tFROM tree_example\n\t\tWHERE id = 2\n\tUNION\n\t\tSELECT\n\t\t\te.id,\n\t\t\te.manager_id,\n\t\t\te.name\n\t\tFROM tree_example e\n\t\tINNER JOIN subordinates s ON s.id = e.manager_id\n) SELECT * FROM subordinates\n;\n\n```\n\n#### Tags: \"recursive select\",recursive\n\n","Lesson_no":22}' where homework_id = 'bb2d52a1-551d-4340-77a3-6a85480ae211';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'd4844e73-1fbc-4c96-6f79-cd3431c4e92f', ' Interactive - 23 - with - pre-selects to do stuff.', '23', 'hw23.mp4', 'hw23.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ab15a127-d41e-442e-7e40-98f248a299ef', 'with' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ab15a127-d41e-442e-7e40-98f248a299ef', 'd4844e73-1fbc-4c96-6f79-cd3431c4e92f' );
insert into ct_tag ( tag_id, tag_word ) values ( '47b4e743-39cd-45f3-72c5-839874fbbcae', 'with select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '47b4e743-39cd-45f3-72c5-839874fbbcae', 'd4844e73-1fbc-4c96-6f79-cd3431c4e92f' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 23 - with - pre-selects to do stuff.\n\nYou can run queries before your main query and give the results names.\nThese are run in order and that can have substantial advantages.\n\nThe general syntax is\n\n```\nwith\n\ttemp_name as ( select ... )\n\nselect stufff.\n\n\tfrom  temp_name\n\n;\n```\n\n```\nWITH\n\tmystery_employess as ( select sum(pay) total_pay  from name_list where state = ''WY'' ),\n\tnormal_employees as ( select sum(pay) total_pay from name_list where state in ( ''NJ'', ''NY'' ) )\nSELECT round( ( tWY.total_pay / ( tWY.total_pay + tEast.total_pay ) ) * 100.0, 2)  as relative_pay\nFROM \n\tmystery_employess  as tWY\n\t, normal_employees  as tEast\n;\n\n```\n\n\nYou should get back a single row of data that tells you that in Wyoming you get 43% as much pay\nas a job in NY or NJ (Note that the data in this example is not totally accurate.  Also you have\na much lower cost of living in Wyoming than you do in NY NY.)\n\n#### Tags: \"with\",\"with select\"\n\n\n","Lesson_no":23}' where homework_id = 'd4844e73-1fbc-4c96-6f79-cd3431c4e92f';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'e5c4aacb-3906-41bf-7589-db99dae562cd', ' Interactive - 24 - truncate table', '24', 'hw24.mp4', 'hw24.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a3621f8c-7e98-4cf0-7778-9a1f754cd90f', 'truncate' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a3621f8c-7e98-4cf0-7778-9a1f754cd90f', 'e5c4aacb-3906-41bf-7589-db99dae562cd' );
insert into ct_tag ( tag_id, tag_word ) values ( '673e927d-6232-4009-5bdf-8f42da17a517', 'fast delete' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '673e927d-6232-4009-5bdf-8f42da17a517', 'e5c4aacb-3906-41bf-7589-db99dae562cd' );
insert into ct_tag ( tag_id, tag_word ) values ( '3a15e6fa-74b1-4c48-4fd1-317b7924a644', 'delete all rows' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3a15e6fa-74b1-4c48-4fd1-317b7924a644', 'e5c4aacb-3906-41bf-7589-db99dae562cd' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 24 - truncate table\n\nPostgreSQL (and most other SQL databases, Oracle, DB/2, DB/2 Universal etc)\nprovide the ability to discard ALL the data in a table.     This is implemented\nas a re-write of the table header info and putting all the data in the table\non the re-claim block list.  So it is linear time(fast).\n\nAlso it is a part of the Data Definition Language (not Data Manipulation)\nso it often can not be used in a transaction.  It can not be rolled back\nif the transaction fails.\n\nAlso when you use truncate stuff like triggers for delete will not fire.\n\n```\nTRUNCATE TABLE name_list;\nSELECT count(1) from name_list;\n\n```\n\nYou should get back 0 rows.\n\n#### Tags: \"truncate\",\"fast delete\",\"delete all rows\"\n\n","Lesson_no":24}' where homework_id = 'e5c4aacb-3906-41bf-7589-db99dae562cd';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'e2f92fbc-4193-47a1-4fc0-dc6cb623e119', ' Interactive - 25 - drop cascade ', '25', 'hw25.mp4', 'hw25.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '1bb39f20-e3c7-4e27-7bb8-b115a2d61aa6', 'drop' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1bb39f20-e3c7-4e27-7bb8-b115a2d61aa6', 'e2f92fbc-4193-47a1-4fc0-dc6cb623e119' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ed0588d2-74b4-4587-7661-c5e810c6a4ba', 'e2f92fbc-4193-47a1-4fc0-dc6cb623e119' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 25 - drop cascade \n\nYou can drop a table or other database object.  This destroys it.\nPostgreSQL provides the ability to do the \"drop\" but only if\nthe object exists.\n\n\n```\ndrop table name_list;\n```\n\nWill error if the object is not there.\n\n```\n\ndrop table if exists name_list cascade;\n\n```\n\n\nDrop can also detach a table from the set of constraints that it\nmay have.  This is the \"cascade\" option to remove foreign\nkey constraints.  Do note that in Oracle this will drop\nadditional tables - not just constraints.  Take care with\n\"cascade\".\n\n\n```\ndrop table if exists us_state cascade;\n\n```\n\n\nLet''s re-create our tables at this point so we have fresh\ndata for future homework problems.\n\nRun the file to re-create : hw13_4.sql\n\ndrop table if exists us_state cascade;\n\n\n#### Tags: \"drop\",\"drop cascade\"\n\n","Lesson_no":25}' where homework_id = 'e2f92fbc-4193-47a1-4fc0-dc6cb623e119';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'bb06327f-3ce3-482e-4a4d-5536e5932c73', ' Interactive - 26 - 1 to 1 relationship  				(pk to pk)', '26', 'hw26.mp4', 'hw26.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c5524146-bd4b-4972-75f8-92279ff7ea95', 'setup' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c5524146-bd4b-4972-75f8-92279ff7ea95', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e4bae00a-617d-4b14-7122-c2f4d331f66e', 'ct_homework' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e4bae00a-617d-4b14-7122-c2f4d331f66e', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( 'cbb22bd1-5dcd-46df-5eed-7d18b810f354', 'ct_homework_ans' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'cbb22bd1-5dcd-46df-5eed-7d18b810f354', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( '79f646f9-fa3a-4ab2-61a0-9116529824a2', 'ct_tag' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '79f646f9-fa3a-4ab2-61a0-9116529824a2', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( '35f65d22-7bac-443a-7830-837f3a594c2c', 'ct_tag_homework' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '35f65d22-7bac-443a-7830-837f3a594c2c', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fee16c51-36f5-49e9-64b2-2109edf064a4', 't_ymux_user' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fee16c51-36f5-49e9-64b2-2109edf064a4', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( 'bc2990f2-2c8e-4f69-4d7d-572cdeffc90f', 't_ymux_user_log' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bc2990f2-2c8e-4f69-4d7d-572cdeffc90f', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e5ac27a3-808c-4c81-60d8-b4ef4a7f2d6c', 't_ymux_auth_token' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e5ac27a3-808c-4c81-60d8-b4ef4a7f2d6c', 'bb06327f-3ce3-482e-4a4d-5536e5932c73' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '16228a7b-f417-4990-78bf-224514c390c7', 26, 'te: SQL-Select', 'select select setup_data_26()' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '60efd180-7180-4adb-5bc7-8c86f0af5321', 26, 'oRun: hw26_01.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '5bf449da-2aa5-4bf7-5517-ecb0ab4c3668', 26, 'oRun: hw26_02.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'b956081a-06d6-4cd3-7f1a-3c5578082aef', 26, 'oRun: hw26_03.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'ffff84fd-8b21-42c3-4727-10308e5f1159', 26, 'oRun: hw26_04.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '6bb586e9-d97d-443b-4c03-cda968435ec1', 26, 'oRun: hw26_05.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '476d46a6-062d-4d02-7e94-5a86897c93ed', 26, 'oRun: hw26_06.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'b84a40df-3a63-424c-7d0f-b990f69db63e', 26, 'oRun: hw26_07.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '32596404-8544-4562-4bff-4bfe05a481b3', 26, 'oRun: hw26_08.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '64d0350b-90ed-4e0d-645d-e0776bd5014c', 26, 'oRun: hw26_09.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'd36c2568-469f-44c1-686e-19830784398d', 26, 'oRun: hw26_10.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '5d3f7791-45f0-4bcb-4f56-bbb101e4b4fa', 26, 'oRun: hw26_11.sql' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 26 - 1 to 1 relationship  \t\t\t\t(pk to pk)\n\n\nThe application uses a small set of user authorization tables from a wrapper application.\nWe have to create the tables and the tables that match with in the application.\n\n\nOur 1 to 1 relationship is between `\"t_ymux_user\"` and our application table\n`ct_login`.    ct_login privies extra application specific columns that every user has\nto have.\n\nWe are just going to create all 6 tables - then explore the relationships.\n\n\n\n\n\n3 Tables From The Security Application\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThe Tables are \"t_ymux_user\" , \"ct_homework_ans\"  and  \"t_ymux_user_log\" .\n\n\nRun the file hw26_01.sql\n\n```\nDROP TABLE if exists \"t_ymux_user\" cascade ;\n\nCREATE TABLE \"t_ymux_user\" (\n\t  \"id\"\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, \"username\" \t\t\ttext\n\t, \"password\" \t\t\ttext\n\t, \"realm\" \t\t\t\ttext\n\t, \"real_name\" \t\t\ttext\n\t, \"salt\" \t\t\t\ttext\n\t, \"email\" \t\t\t\ttext\n\t, \"email_confirmed\" \tchar varying (1) default ''n'' not null\n\t, \"setup_2fa_complete\" \tchar varying (1) default ''n'' not null\n\t, \"rfc_6238_secret\"\t\ttext -- if not null then this supports auth with RFC 6238 hmac/hash time based 2fa.\n\t, \"recovery_token\" \t\ttext\n\t, \"recovery_expire\" \ttimestamp\n\t, \"parent_user_id\"\t\tuuid\n\t, \"org_user_id\"\t\t\tuuid\n\t, \"auth_token\"\t\t\ttext -- if this is an auth-token based device login\n\t, \"acct_expire\" \t\ttimestamp\n\t, \"updated\" \t\t\ttimestamp\n\t, \"created\" \t\t\ttimestamp default current_timestamp not null\n);\nCOMMENT ON TABLE \"t_ymux_user\" IS ''version: m4_ver_version() tag: m4_ver_tag() build_date: m4_ver_date()'';\n\n\ncreate unique index \"t_ymux_user_u1\" on \"t_ymux_user\" ( \"username\" );\ncreate index \"t_ymux_user_p1\" on \"t_ymux_user\" ( \"email\" );\ncreate unique index \"t_ymux_user_u3\" on \"t_ymux_user\" ( \"recovery_token\" );\ncreate index \"t_ymux_user_p2\" on \"t_ymux_user\" ( \"created\", \"setup_2fa_complete\" );\ncreate index \"t_ymux_user_p3\" on \"t_ymux_user\" ( \"created\", \"email_confirmed\" );\n\n\n\n\nCREATE OR REPLACE function t_ymux_user_upd()\nRETURNS trigger AS $$\nBEGIN\n\t-- version: b14871d878aa2f9fbaa35f4ad2c6c2baf9584c06 tag: v0.1.9 build_date: Fri Dec 11 14:30:43 MST 2020\n\tNEW.updated := current_timestamp;\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nCREATE TRIGGER t_ymux_user_trig\nBEFORE update ON \"t_ymux_user\"\nFOR EACH ROW\nEXECUTE PROCEDURE t_ymux_user_upd();\n\n```\n\nRun the file hw26_02.sql\n\n```\n\n-- -------------------------------------------------------- -- --------------------------------------------------------\n-- Note the \"auth_token\" is the \"ID\" for this row. (Primnary Key)\n-- -------------------------------------------------------- -- --------------------------------------------------------\n\ndrop TABLE if exists \"t_ymux_auth_token\" ;\nCREATE TABLE \"t_ymux_auth_token\" (\n\t  \"id\"\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, \"user_id\"\t\t\t\tuuid not null\n\t, \"updated\" \t\t\ttimestamp\n\t, \"created\" \t\t\ttimestamp default current_timestamp not null\n);\nCOMMENT ON TABLE \"t_ymux_auth_token\" IS ''version: b14871d878aa2f9fbaa35f4ad2c6c2baf9584c06 tag: v0.1.9 build_date: Fri Dec 11 14:30:43 MST 2020'';\n\ncreate index \"t_ymux_auth_token_p1\" on \"t_ymux_auth_token\" ( \"user_id\" );\ncreate index \"t_ymux_auth_token_p2\" on \"t_ymux_auth_token\" ( \"created\" );\n\n\nALTER TABLE \"t_ymux_auth_token\"\n\tADD CONSTRAINT \"t_ymux_auth_token_user_id_fk1\"\n\tFOREIGN KEY (\"user_id\")\n\tREFERENCES \"t_ymux_user\" (\"id\")\n;\n\nCREATE OR REPLACE function t_ymux_auth_token_upd()\nRETURNS trigger AS $$\nBEGIN\n\t-- version: b14871d878aa2f9fbaa35f4ad2c6c2baf9584c06 tag: v0.1.9 build_date: Fri Dec 11 14:30:43 MST 2020\n\tNEW.updated := current_timestamp;\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nCREATE TRIGGER t_ymux_auth_token_trig\nBEFORE update ON \"t_ymux_auth_token\"\nFOR EACH ROW\nEXECUTE PROCEDURE t_ymux_auth_token_upd();\n\n```\n\nRun the file hw26_03.sql\n\n```\nCREATE SEQUENCE t_log_seq\n  INCREMENT 1\n  MINVALUE 1\n  MAXVALUE 9223372036854775807\n  START 1\n  CACHE 1;\n\nDROP TABLE if exists \"t_ymux_user_log\" ;\n\nCREATE TABLE \"t_ymux_user_log\" (\n\t  \"id\"\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, \"user_id\"\t\t\t\tuuid \t-- if null then a failed event\n\t, \"seq\"\t \t\t\t\tbigint DEFAULT nextval(''t_log_seq''::regclass) NOT NULL \n\t, \"activity_name\"\t\ttext\n\t, \"updated\" \t\t\ttimestamp\n\t, \"created\" \t\t\ttimestamp default current_timestamp not null\n);\nCOMMENT ON TABLE \"t_ymux_user_log\" IS ''version: b14871d878aa2f9fbaa35f4ad2c6c2baf9584c06 tag: v0.1.9 build_date: Fri Dec 11 14:30:43 MST 2020'';\n\ncreate index \"t_ymux_user_log_p1\" on \"t_ymux_user_log\" ( \"user_id\", \"seq\" );\ncreate index \"t_ymux_user_log_p2\" on \"t_ymux_user_log\" ( \"user_id\", \"created\" );\n\nALTER TABLE \"t_ymux_user_log\"\n\tADD CONSTRAINT \"t_ymux_user_log_user_id_fk1\"\n\tFOREIGN KEY (\"user_id\")\n\tREFERENCES \"t_ymux_user\" (\"id\")\n;\n\nCREATE OR REPLACE function t_ymux_user_log_upd()\nRETURNS trigger AS $$\nBEGIN\n\t-- version: b14871d878aa2f9fbaa35f4ad2c6c2baf9584c06 tag: v0.1.9 build_date: Fri Dec 11 14:30:43 MST 2020\n\tNEW.updated := current_timestamp;\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nCREATE TRIGGER t_ymux_user_log_trig\nBEFORE update ON \"t_ymux_user_log\"\nFOR EACH ROW\nEXECUTE PROCEDURE t_ymux_user_log_upd();\n\n```\n\n\n\n\n## Applications Tables\n\n\"t_ymux_user\" joins to ct_login on a 1 to 1 basis.  Each time a user is inserted\ntinto ct_login a set of rows is populated for all the homework that exits into\nct_homework_ans.\n\n\nct_login\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nRun the file hw26_04.sql\n\n```\nDROP TABLE if exists ct_login ;\nCREATE TABLE ct_login (\n\t  user_id\t\t\t\t\tuuid not null primary key -- 1 to 1 to \"t_ymux_user\".\"id\"\n\t, pg_acct\t\t\t\t\tchar varying (20) not null\n\t, class_no\t\t\t\t\ttext default ''4010-BC'' not null\t-- 4280 or 4010-BC - one of 2 classes\n\t, lang_to_use\t\t\t\ttext default ''Go'' not null\t\t-- Go or PostgreSQL\n\t, misc\t\t\t\t\t\tJSONb default ''{}'' not null\t\t-- Whatever I forgot\n);\n\ncreate unique index ct_login_u1 on ct_login ( pg_acct );\ncreate index ct_login_p1 on ct_login using gin ( misc );\n\nALTER TABLE ct_login\n\tADD CONSTRAINT ct_login_user_id_fk\n\tFOREIGN KEY (user_id)\n\tREFERENCES \"t_ymux_user\" (\"id\")\n;\n\n```\n\n\nct_homeowrk\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nRun the file hw26_05.sql\n\n```\nDROP TABLE if exists ct_homework cascade;\n\nCREATE TABLE ct_homework (\n\t  homework_id\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, homework_title\t\t\ttext not null\n\t, lesson_no\t\t\t\t\ttext not null\n\t, points_avail\t\t\t\tint not null default 10\n\t, video_url\t\t\t\t\ttext not null\n\t, video_img\t\t\t\t\ttext not null\n\t, lesson_body \t\t\t\tJSONb not null \t-- body, html, text etc.\n);\n\nCREATE INDEX ct_homework_p1 on ct_homework ( homework_no );\n\n```\n\nct_homeowrk_ans\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nRun the file hw26_06.sql\n\n```\nDROP TABLE if exists ct_homework_ans ;\nCREATE TABLE ct_homework_ans (\n\t  homework_ans_id\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, homework_id\t\t\t\tuuid not null\n\t, user_id\t\t\t\t\tuuid not null\n\t, points\t\t\t\t\tint not null default 0\n\t, completed\t\t\t\t\tchar(1) default ''n'' not null\n\t, updated\t\t \t\t\ttimestamp\n\t, created \t\t\t\t\ttimestamp default current_timestamp not null\n);\n\n\ncreate unique index ct_homework_ans_u1 on ct_homework_ans ( homework_id, user_id );\ncreate unique index ct_homework_ans_u2 on ct_homework_ans ( user_id, homework_id );\n\n\n-- homework_id is fk to ct_homework\nALTER TABLE ct_homework_ans\n\tADD CONSTRAINT homework_id_fk\n\tFOREIGN KEY (homework_id)\n\tREFERENCES ct_homework (homework_id)\n;\n\n-- user_id is fk to ct_login\nALTER TABLE ct_homework_ans\n\tADD CONSTRAINT user_id_fk\n\tFOREIGN KEY (user_id)\n\tREFERENCES ct_login (user_id)\n;\n\n\nCREATE OR REPLACE function ct_homework_ans_upd()\nRETURNS trigger AS $$\nBEGIN\n\tNEW.updated := current_timestamp;\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nCREATE TRIGGER ct_homework_ans_trig\nBEFORE update ON ct_homework_ans\nFOR EACH ROW\nEXECUTE PROCEDURE ct_homework_ans_upd();\n\n\n```\n\nTriggers that depend on multiple tables\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nRun the file hw26_07.sql\n\n```\nCREATE OR REPLACE function ct_homework_ins()\nRETURNS trigger AS $$\nBEGIN\n\tinsert into ct_homework_ans (\n\t\tuser_id,\n\t\thomework_id\n\t) select \n\t\tt1.user_id,\n\t\tNEW.homework_id\n\tfrom ct_login as t1\n\twhere not exists (\n\t\t\tselect 1 as \"found\"\n\t\t\tfrom ct_homework_ans t2\n\t\t\twhere t2.user_id = t1.user_id\t\t\t\n\t\t\t  and t2.homework_id = NEW.homework_id\n\t\t)\n\t;\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nDROP TRIGGER if exists ct_homework_trig_ins_upd on ct_homework;\n\nCREATE TRIGGER ct_homework_trig_ins_upd\nBEFORE insert or update ON ct_homework\nFOR EACH ROW\nEXECUTE PROCEDURE ct_homework_ins();\n\n\n\n\n\n\nCREATE OR REPLACE function ct_homework_del()\nRETURNS trigger AS $$\nBEGIN\n\tupdate ct_homework_ans t3\n\t\tset completed = ''x''\n\t\twhere t3.homework_id = NEW.homework_id\n\t\t  and t3.completed = ''n''\n\t;\n\tRETURN OLD;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nDROP TRIGGER if exists ct_homework_trig_del on ct_homework;\n\nCREATE TRIGGER ct_homework_trig_del\nBEFORE delete ON ct_homework\nFOR EACH ROW\nEXECUTE PROCEDURE ct_homework_del();\n\n\n\n\n\n\n\n\nCREATE OR REPLACE function ct_login_ins()\nRETURNS trigger AS $$\nBEGIN\n\tinsert into ct_homework_ans (\n\t\tuser_id,\n\t\thomework_id\n\t) select \n\t\tNEW.user_id,\n\t\tt1.homework_id\n\tfrom ct_homework as t1\n\twhere not exists (\n\t\t\tselect 1 as \"found\"\n\t\t\tfrom ct_homework_ans t2\n\t\t\twhere t2.user_id = NEW.user_id\t\t\t\n\t\t\t  and t2.homework_id = t1.homework_id\n\t\t)\n\t;\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\ndrop TRIGGER if exists ct_login_trig on ct_login;\n\nCREATE TRIGGER ct_login_trig\nBEFORE insert ON ct_login\nFOR EACH ROW\nEXECUTE PROCEDURE ct_login_ins();\n\n```\n\n\nHomework tags\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nRun the file hw26_09.sql and hw26_10.sql\n\n```\n\nDROP TABLE IF EXISTS ct_tag ;\n\nCREATE TABLE ct_tag ( \n\ttag_id uuid DEFAULT uuid_generate_v4() not null primary key,\n\ttag_word text not null\n);\n\nCREATE UNIQUE INDEX ct_tag_p1 on ct_tag ( tag_word );\n\n\n\nDROP TABLE IF EXISTS ct_tag_homework ;\n\nCREATE TABLE ct_tag_homework ( \n\ttag_id \t\tuuid not null,\n\thomework_id uuid not null,\n\tprimary key ( homework_id, tag_id )\n);\n\nCREATE UNIQUE INDEX ct_tag_homework_u1 on ct_tag_homework ( tag_id, homework_id );\n\n\n```\n\nSetup default data\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nRun the file hw26_11.sql to setup data for these tables.\n\n\n```\n\nselect setup_data_26();\n\n\n```\n\n\n\n#### Tags: \"setup\",\"ct_homework\",\"ct_homework_ans\",\"ct_tag\",\"ct_tag_homework\",\"t_ymux_user\",\"t_ymux_user_log\",\"t_ymux_auth_token\"\n\n\n\n\n","Lesson_no":26}' where homework_id = 'bb06327f-3ce3-482e-4a4d-5536e5932c73';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'f54d03ce-b092-43ea-43ee-17e5194f9e47', ' Interactive - 27 - 1 to 0 or 1 relationship 			(fk, unique)', '27', 'hw27.mp4', 'hw27.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'bd657629-00e2-4b1e-6531-324af95be189', '1 to 0' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bd657629-00e2-4b1e-6531-324af95be189', 'f54d03ce-b092-43ea-43ee-17e5194f9e47' );
insert into ct_tag ( tag_id, tag_word ) values ( '5f9a7f03-3e9d-49c5-5228-c7fc35e1319c', '1:0' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5f9a7f03-3e9d-49c5-5228-c7fc35e1319c', 'f54d03ce-b092-43ea-43ee-17e5194f9e47' );
insert into ct_tag ( tag_id, tag_word ) values ( 'cdac7e9e-8853-489f-53f3-2934f25d8868', '1:0 relationship' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'cdac7e9e-8853-489f-53f3-2934f25d8868', 'f54d03ce-b092-43ea-43ee-17e5194f9e47' );
insert into ct_tag ( tag_id, tag_word ) values ( '159d8364-c91e-434f-7f68-a29a0e7c8992', '1:1' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '159d8364-c91e-434f-7f68-a29a0e7c8992', 'f54d03ce-b092-43ea-43ee-17e5194f9e47' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 27 - 1 to 0 or 1 relationship \t\t\t(fk, unique)\n\nNow that we have our tables let''s look at the relationship between\n`\"t_ymx_user\"` and \"ct_login\".   This is our 1 to 0 or 1 relationship.\n\nIt is provided by the primary key on ct_login being required but not\nhaving a default value where a key is generated.   This is combined\nwith the foreign key constraint to `\"t_ymux_user\"`.\n\nTry an insert to see if you can fake it out (the insert will fail).\n\n```\ninsert into ct_login ( user_id, pg_acct ) values ( uuid_generate_v4(), ''x'' );\n\n```\n\nYou should get an error.   The error indicates that you violated a foreign key and will look similar to:\n\n```\nERROR:  insert or update on table \"ct_homework_ans\" violates foreign key constraint \"user_id_fk\"\nDETAIL:  Key (user_id)=(ce1d8fdd-aa04-4bb4-9ef7-72655ff63b95) is not present in table \"ct_login\".\nCONTEXT:  SQL statement \"insert into ct_homework_ans (\n\t\tuser_id,\n\t\thomework_id\n\t) select\n\t\tNEW.user_id,\n\t\tt1.homework_id\n\tfrom ct_homework as t1\n\twhere not exists (\n\t\t\tselect 1 as \"found\"\n\t\t\tfrom ct_homework_ans t2\n\t\t\twhere t2.user_id = NEW.user_id\n\t\t\t  and t2.homework_id = t1.homework_id\n\t\t)\"\nPL/pgSQL function ct_login_ins() line 3 at SQL statement\n```\n\n#### Tags: \"1 to 0\",\"1:0\",\"1:0 relationship\",\"1:1\"\n\n","Lesson_no":27}' where homework_id = 'f54d03ce-b092-43ea-43ee-17e5194f9e47';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2df9858f-3432-4649-6d63-01693df10257', ' Interactive - 28 - 1 to n relationship				(fk)', '28', 'hw28.mp4', 'hw28.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'dd2a69d6-5e8b-4470-545e-0ef6364e8324', '1:n' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'dd2a69d6-5e8b-4470-545e-0ef6364e8324', '2df9858f-3432-4649-6d63-01693df10257' );
insert into ct_tag ( tag_id, tag_word ) values ( '1787dc4f-d42f-44fa-5dfa-18f7ae76e2c7', '1:n relationship' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1787dc4f-d42f-44fa-5dfa-18f7ae76e2c7', '2df9858f-3432-4649-6d63-01693df10257' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 28 - 1 to n relationship\t\t\t\t(fk)\n\nThe simple to understand relationship is a 1 to 0..n relationship.\nThis is where a parent key is a primary key and a foreign key\nis in a 2nd table.  We have this relationship between\n`\"t_ymux_user\".\"id\"` and the `\"t_ymux_auth_token\"`.\n\nThe table `\"t_ymux_auth_token\"` has \"user_id\" as a column in it.\nA foreign key relationship exists between the 2 tables.  This means\nthat you can have more than 1 auth token for each user.   Basically\na user can login from more than one computer at a time.\n\n```\nselect setup_data_26();\n\nselect t1.email, t2.id as \"auth_token\"\nfrom \"t_ymux_user\" as t1\n\tjoin \"t_ymux_auth_token\" as t2 on ( t1.\"id\" = t2.\"user_id\" )\n;\n\n```\n\nYou should get back 3 rows.\n\n#### Tags: \"1:n\",\"1:n relationship\"\n\n","Lesson_no":28}' where homework_id = '2df9858f-3432-4649-6d63-01693df10257';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '39998c61-0186-472f-7386-aacbda033ea7', ' Interactive - 29 - m to n relationship				(fk to join table to fk)', '29', 'hw29.mp4', 'hw29.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '69862e2c-430a-4275-5b75-cb31cffbbd1f', 'm to n' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '69862e2c-430a-4275-5b75-cb31cffbbd1f', '39998c61-0186-472f-7386-aacbda033ea7' );
insert into ct_tag ( tag_id, tag_word ) values ( 'dc89b980-2696-42ce-4e76-b31e26169082', 'm:n' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'dc89b980-2696-42ce-4e76-b31e26169082', '39998c61-0186-472f-7386-aacbda033ea7' );
insert into ct_tag ( tag_id, tag_word ) values ( '287ba909-fbe5-4f8c-7c0a-cc6e9f206399', 'm:n relationship' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '287ba909-fbe5-4f8c-7c0a-cc6e9f206399', '39998c61-0186-472f-7386-aacbda033ea7' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 29 - m to n relationship\t\t\t\t(fk to join table to fk)\n\nOur model has a m to n (m:n) relationship in it.  This is between ct_homeowrk\nand ct_tags.\n\nThis relationship requires an intermediate table.  Each side has a relationship\nto the intermediate table.\n\n\nct_tag associates a tag_word with a tag_id  (Shown below - the table was created\nin the script in homework 26 - you don''t need to run it.)\n\n```\nCREATE TABLE ct_tag ( \n\ttag_id uuid DEFAULT uuid_generate_v4() not null primary key,\n\ttag_word text not null\n);\n\nCREATE UNIQUE INDEX ct_tag_p1 on ct_tag ( tag_word );\n```\n\nTo get  a list of the words do a select from this table.\n\n```\nselect tag_word from ct_tag order by tag_word;\n\n```\n\nNote that tag_word has a unique index on it.  This prevents any duplicate tags.\n\nThe join table has just IDs in it.   To make it efficient it has indexes that\ngo in both directions - this allows searching from ct_tags back to ct_homework\nand from ct_homework to ct_tags.    One of the unique indexes is the multi-field\nprimary key with homework_id, tag_id in it..   This is listed at the bottom\nof the create table.  The second one is a unique index.\n\n(shown below - do not run, just for reference)\n\n```\nCREATE TABLE ct_tag_homework ( \n\ttag_id \t\tuuid not null,\n\thomework_id uuid not null,\n\tprimary key ( homework_id, tag_id )\n);\n\nCREATE UNIQUE INDEX ct_tag_homework_u1 on ct_tag_homework ( tag_id, homework_id );\n```\n\nThe ct_homework table (show for reference) is:\n\n\n```\n\nCREATE TABLE ct_homework (\n\t  homework_id\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, homework_no\t\t\t\ttext not null\n\t, points_avail\t\t\t\tint not null default 10\n\t, video_url\t\t\t\t\ttext not null\n\t, video_img\t\t\t\t\ttext not null\n\t, lesson_body \t\t\t\tJSONb not null \t-- body, html, text etc.\n);\n\nCREATE INDEX ct_homework_p1 on ct_homework ( homework_no );\n```\n\n\nNow do a select from the join table.\n\n\n```\nselect * from ct_tag_homework order by 1, 2;\n\n```\n\n## Creative Homework (40pts)\n\nConstruct a select that joins all 3 tables together.  The select should have\n`homework_title` and `points_avail` from the ct_homework table in it.\nIt should also have the `tag_word`  from ct_tag and it should join from\nct_homework to ct_tag_homework to ct_tag.   The output should be an ordered\nlist of homework and all the tags that are associated with each homework.\nFor example in homework 29 you should have 3 tags, \"m to n\", \"m:n\" and\n\"m:n relationship\" as the tags.    Also have the tags sorted alphabetically.\nThis means that \"m to n\" will be the last of the 3 tags for homework 29.\n\nHints:  You need to sort by a column that you do not need to return.\nThis is the homework_no.   So you need to have a sub-select with\nthe order by on the inside select.\nThe example of a join is in homework 19 where we use a sub-select and\nthe order by on the inside select.\n\nIn homework 11 we have an example of jointing to multiple tables at\nonce.\n\nThe homework on inner joins is 18.\n\nIt''s important that the sort order by homework_no be done as an\ninteger, not as text.  You will need to use a `::int` to convert\nthe text field to an integer field.\n\nThe correct output data should look similar to:\n\n```\n                                      homework_title                                      |      tag_word      \n------------------------------------------------------------------------------------------+--------------------\n  Interactive - 01 - Create Table                                                         | create table\n  Interactive - 01 - Create Table                                                         | hw01\n  Interactive - 01 - Create Table                                                         | type int\n  Interactive - 01 - Create Table                                                         | type text\n  Interactive - 01 - Create Table                                                         | type varchar\n  Interactive - 02 - Insert data into \"name_list\"                                         | hw02\n  Interactive - 02 - Insert data into \"name_list\"                                         | insert\n...\n...\n...\n  Interactive - 08 - create unique id and a primary key                                   | UUID\n  Interactive - 09 - add a table with state codes                                         | add constraint\n  Interactive - 09 - add a table with state codes                                         | alter table\n  Interactive - 09 - add a table with state codes                                         | foreign key\n  Interactive - 10 - add a index on the name table                                        | create index\n  Interactive - 11 - add a index on the name table that is case insensitive.              | create index\n...\n...\n...\n\n```\n\n\n\n\n\n\n\n\n\n\n#### Tags: \"m to n\",\"m:n\",\"m:n relationship\"\n\n","Lesson_no":29}' where homework_id = '39998c61-0186-472f-7386-aacbda033ea7';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '41df2841-5b36-4377-55b0-2d2e2f19a71d', ' Interactive - 30 - 1 to ordered list relationship		(fk to uk with sequence)', '30', 'hw30.mp4', 'hw30.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c0bc04af-e501-466d-4127-754ff4bd01bd', '1 to list' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c0bc04af-e501-466d-4127-754ff4bd01bd', '41df2841-5b36-4377-55b0-2d2e2f19a71d' );
insert into ct_tag ( tag_id, tag_word ) values ( '2cb664d0-1558-478f-59f8-ec9e18b823ee', 'list of rows' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2cb664d0-1558-478f-59f8-ec9e18b823ee', '41df2841-5b36-4377-55b0-2d2e2f19a71d' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 30 - 1 to ordered list relationship\t\t(fk to uk with sequence)\n\n\nThe model has a 1 to a list of rows.  This is a more unusual relationship\nbecause the list can be ordered by time.  Usually relationships in a SQL\ndatabase are not inherently ordered.  In  this case we use a sequence \ngenerated number to make the set of rows in a specific order.\n\n\nTaken from hw26_3.sql that you have already run.\nYou don''t have to run it again.\nThe first step is to create a sequence.   This one is `t_log_seq`.\nEach time a value is used from the sequenced it increments.\n\n\n```\nCREATE SEQUENCE t_log_seq\n  INCREMENT 1\n  MINVALUE 1\n  MAXVALUE 9223372036854775807\n  START 1\n  CACHE 1;\n\n```\n\nFor the field \"seq'' in the table we use the sequence.  This is\nthe `nextval(''t_log_seq''::regclass)` default value.  When we insert\nwe allow the default value to fill `seq`.   Our join is a 1:n join\nbased on user_id to the user.  Each time a security event happens\nwe insert the type of event to this table.   In a complete\nsecurity system this kind of a \"log\" has a trigger on it and\nfor certain events it would generate an email to the user.  An\nexample is the creation of a device/application account or the\nchange of the account password.   Some events would just be logged\nfor later statistical usage - like a login or logout event.\n\nAlso taken from hw26_3.sql that you have already run.\nYou don''t have to run it again.\n\n```\nCREATE TABLE \"t_ymux_user_log\" (\n\t  \"id\"\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key\n\t, \"user_id\"\t\t\t\tuuid \t-- if null then a failed event\n\t, \"seq\"\t \t\t\t\tbigint DEFAULT nextval(''t_log_seq''::regclass) NOT NULL \n\t, \"activity_name\"\t\ttext\n\t, \"updated\" \t\t\ttimestamp\n\t, \"created\" \t\t\ttimestamp default current_timestamp not null\n);\n\ncreate index \"t_ymux_user_log_p1\" on \"t_ymux_user_log\" ( \"user_id\", \"seq\" );\ncreate index \"t_ymux_user_log_p2\" on \"t_ymux_user_log\" ( \"user_id\", \"created\" );\n```\n\nRun a simple select on t_ymux_user_log.  You should have at least 2 rows in\nit.\n\n```\nselect * from t_ymux_user_log;\n```\n\n\n## Assignment 03 - Create 2 tables.   \n\n50 points.\n\nCreate a table a \"issue\" table that has a text body column called \"body\".\nThe table needs to have a UUID primary key that is automatically generated.\nThen create a child table, \"issue_note\" that has a list of comments with dates associated\nwith the \"issue\" table.   This list of comments needs to be ordered using\na \"seq\" column.   Create a sequence to support this column.  Call the sequence \"t_issue_note_seq\".\nBoth tables need to have created/updated columns that are date stamps.\n\nTurn in the source code for creating the tables with some inserts that put \ndata into the tables and a select that verifies an issue and a set of\nissue notes.\n\nDon''t loose your source code for these tables.\nWe will use these tables in the assignment on key word search later in the class.\n\n\n\n#### Tags: \"1 to list\",\"list of rows\"\n\n","Lesson_no":30}' where homework_id = '41df2841-5b36-4377-55b0-2d2e2f19a71d';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '9781b82b-a9a9-4410-59b9-8a09e5d1633e', ' Interactive - 31 - only one row of data				(uk with no sequence)', '31', 'hw31.mp4', 'hw31.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'eba2733c-99ab-46ae-7c66-5d75817e7520', 'single row' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'eba2733c-99ab-46ae-7c66-5d75817e7520', '9781b82b-a9a9-4410-59b9-8a09e5d1633e' );
insert into ct_tag ( tag_id, tag_word ) values ( '3a0ed909-9b0b-4018-6b6e-f40051aaa32d', 'raise exception' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3a0ed909-9b0b-4018-6b6e-f40051aaa32d', '9781b82b-a9a9-4410-59b9-8a09e5d1633e' );
insert into ct_tag ( tag_id, tag_word ) values ( '7b79b490-63c6-4be3-4fcc-496a1e55c53e', 'trigger' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '7b79b490-63c6-4be3-4fcc-496a1e55c53e', '9781b82b-a9a9-4410-59b9-8a09e5d1633e' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd877393c-4b5b-4b73-5843-f2ddd46d4553', 'delete trigger' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd877393c-4b5b-4b73-5843-f2ddd46d4553', '9781b82b-a9a9-4410-59b9-8a09e5d1633e' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 31 - only one row of data\t\t\t\t(uk with no sequence)\n\nWith system configuration tables it is often useful to only have 1 row of data.\nEach configuration item is a distinct column in the table.\n\nThis can be done with a primary key and a constraint.     The constraint limits the values\non the primary key and results in an error if a attempt to insert a 2nd row occurs.\n\nIn this example we just have `applicaiton_name` as the single configuration item.\n\n```\ncreate table ct_config (\n\tconfig_id serial primary key check ( config_id = 1 ),\n\tapplication_name text\n);\n\n```\n\nThe first insert will work.  Then 2nd will not.\n\n```\ninsert into ct_config ( application_name ) values ( ''4280 class'' );\n\n\n```\n\nand 2nd insert\n\n```\ninsert into ct_config ( application_name ) values ( ''4010 blockchain class'' );\n\n```\n\non the 2nd insert you should get an error similar to:\n\n```\npsql:hw31_3.sql:3: ERROR:  new row for relation \"ct_config\" violates check constraint \"ct_config_config_id_check\"\nDETAIL:  Failing row contains (2, 4010 blockchain class).\n```\n\nWe can prevent delete of the row with a trigger.\n\n\n```\nCREATE OR REPLACE FUNCTION ct_config_prevent_delete() \nRETURNS trigger AS $$\nBEGIN            \n\tIF OLD.config_id = 1 THEN\n\t\tRAISE EXCEPTION ''cannot delete configuration row'';\n\tEND IF;\nEND;\n$$ \nLANGUAGE plpgsql;\n\nCREATE TRIGGER ct_config_prevent_delete \nBEFORE DELETE ON ct_config\nFOR EACH ROW EXECUTE PROCEDURE ct_config_prevent_delete();\n\n\n```\n\nWhen you try to delete:\n\n```\ndelete from ct_config;\n```\n\nYou should get an error similar to:\n\n```\nERROR:  cannot delete configuration row\nCONTEXT:  PL/pgSQL function ct_config_prevent_delete() line 4 at RAISE\n\n```\n\n\n#### Tags: \"single row\",\"raise exception\",\"trigger\",\"delete trigger\"\n\n","Lesson_no":31}' where homework_id = '9781b82b-a9a9-4410-59b9-8a09e5d1633e';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '7f5f5115-bc74-437d-6103-1da2aa2747a1', ' Interactive - 32 - only one a fixed set of rows.		(pre-papulae with key, pk, check-constraint on key)', '32', 'hw32.mp4', 'hw32.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e074e405-b3fa-43f9-6df8-2c95714ff6aa', 'fixed set rows' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e074e405-b3fa-43f9-6df8-2c95714ff6aa', '7f5f5115-bc74-437d-6103-1da2aa2747a1' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '7b79b490-63c6-4be3-4fcc-496a1e55c53e', '7f5f5115-bc74-437d-6103-1da2aa2747a1' );
insert into ct_tag ( tag_id, tag_word ) values ( '53f014aa-4a29-4690-7f87-05060e387855', 'check constraint' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '53f014aa-4a29-4690-7f87-05060e387855', '7f5f5115-bc74-437d-6103-1da2aa2747a1' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 32 - only one a fixed set of rows.\t\t(pre-papulae with key, pk, check-constraint on key)\n\nThere is a different way to implement a set of configuration items.  In this case the items\nare stored one in each row in a set of fixed rows.\n\n\n```\nDROP  TABLE if exists ct_config_row ;\n\nCREATE TABLE ct_config_row (\n\t  id\t\t\t\tserial not null primary key\n\t, name \t\t\t\ttext not null check ( name in (\n\t\t\t\t\t\t\t''security_method'',\n\t\t\t\t\t\t\t''encryption''\n\t\t\t\t\t\t) )\n\t, ty \t\t\t\ttext not null default ''str''\n\t, value \t\t\ttext \n\t, i_value \t\t\tbigint\n\t, b_value \t\t\tboolean\n);\n\nCREATE UNIQUE INDEX ct_config_row_p1 on ct_config_row ( name );\n\n```\n\nWith a table like this we can insert some values:\n\n```\ninsert into ct_config_row ( name, value ) values\t\n\t( ''security_method'', ''jwt'' ),\n\t( ''encryption'', ''es'' )\n;\n\n```\n\nThe fixed set of configuration items is checked with the check constraint\nand the unique key on name.\n\nA trigger can be used to prevent deletion of items.\n\n```\nCREATE OR REPLACE FUNCTION ct_config_row_prevent_delete() \nRETURNS trigger AS $$\nBEGIN            \n\tIF OLD.config_id = 1 THEN\n\t\tRAISE EXCEPTION ''cannot delete configuration row'';\n\tEND IF;\nEND;\n$$ \nLANGUAGE plpgsql;\n\nCREATE TRIGGER ct_config_row_prevent_delete \nBEFORE DELETE ON ct_config_row\nFOR EACH ROW EXECUTE PROCEDURE ct_config_row_prevent_delete();\n\n```\n\n#### Tags: \"fixed set rows\",\"trigger\",\"check constraint\"\n","Lesson_no":32}' where homework_id = '7f5f5115-bc74-437d-6103-1da2aa2747a1';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '3043d016-5d01-47e3-6130-27a3f75e7fa6', ' Interactive - 33 - types of indexes (hash, gin)', '33', 'hw33.mp4', 'hw33.jpg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c9ffa298-a83d-49fb-42c0-727724c94f42', '3043d016-5d01-47e3-6130-27a3f75e7fa6' );
insert into ct_tag ( tag_id, tag_word ) values ( '49b26ade-c265-44b0-5cbb-eaeb179a5f3e', 'gin index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '49b26ade-c265-44b0-5cbb-eaeb179a5f3e', '3043d016-5d01-47e3-6130-27a3f75e7fa6' );
insert into ct_tag ( tag_id, tag_word ) values ( 'be447ff3-93b3-48fe-6ec3-983f94738e07', 'hash index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'be447ff3-93b3-48fe-6ec3-983f94738e07', '3043d016-5d01-47e3-6130-27a3f75e7fa6' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 33 - types of indexes (hash, gin)\n\nThe default type of index in most SQL databases is a B-Tree.  This is a wide tree\nthat can produce sorted data based on the data type and ordering of that data.\n\nThis is not the only kind of index.  \n\nIn some cases ordering of data is meaningless.  For example UUIDs do not have\nany order.  We will still need to have an index to look up a value but\nsorting on UUID rarely makes any sense.  A faster index for data that has\nno order is a \"hash\" index.\n\nAn example of a hash index is:\n\n```\nCREATE INDEX ct_config_row_p2 on ct_config_row USING hash ( value );\n\n```\n\nHash indexes in PostreSQL do not support unique index constraints.  In versions\nbefore 13 of PosgreSQL there are other limitations on how indexes are replicated\nand restored from a backup.\n\nAnother type of index is a Generalized Inverse Index or GIN index. This is often\nused in conjunction with JSONb data types.\n\nIn interactive homework 26 part 5 we created a column lesson_body with a data\ntype of JSONb.  We can create a GIN index on this that will allow for fast \nsearches of the JSON data.\n\n```\nCREATE INDEX ct_homework_p2 on ct_homework USING gin ( lesson_body );\n```\n\n\n#### Tags: \"index\",\"gin index\",\"hash index\"\n\n\n","Lesson_no":33}' where homework_id = '3043d016-5d01-47e3-6130-27a3f75e7fa6';


update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Homework 34 - \n\n","Lesson_no":34}' where homework_id = '55494797-071f-43b2-6cde-be5ba0428c92';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'cf9c992f-96c8-44a3-4c2b-7c786c514839', ' Interactive - 35 - views', '35', 'hw35.mp4', 'hw35.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '5294e935-780e-4dd1-45b8-03294b3eb54a', 'view' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5294e935-780e-4dd1-45b8-03294b3eb54a', 'cf9c992f-96c8-44a3-4c2b-7c786c514839' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e2491e1b-4ad5-4d4a-4d9e-65b469eac28d', 'unused index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e2491e1b-4ad5-4d4a-4d9e-65b469eac28d', 'cf9c992f-96c8-44a3-4c2b-7c786c514839' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 35 - views\n\nThe database can create a pre-defined select called a view.\nA view is a query that you set up that looks like a table when selected from but\ncan be a join or other set of operations.  It is kind of like a query-macro.\n\nFor example we can create a view that let''s us list the unused indexes.\n\nThis is the file hw35_1.sql.\n\n```\nCREATE OR REPLACE VIEW unused_index as\nSELECT\n    idstat.relname AS TABLE_NAME,\n    indexrelname AS INDEX_NAME,\n    idstat.idx_scan AS index_scans_count,\n    pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,\n    tabstat.idx_scan AS table_reads_index_count,\n    tabstat.seq_scan AS table_reads_seq_count,\n    tabstat.seq_scan + tabstat.idx_scan AS table_reads_count,\n    n_tup_upd + n_tup_ins + n_tup_del AS table_writes_count,\n    pg_size_pretty(pg_relation_size(idstat.relid)) AS table_size\nFROM pg_stat_user_indexes AS idstat\n\tJOIN pg_indexes ON indexrelname = indexname\n\t\t\tAND idstat.schemaname = pg_indexes.schemaname\n\tJOIN pg_stat_user_tables AS tabstat ON idstat.relid = tabstat.relid\nWHERE indexdef !~* ''unique''\nORDER BY\n    idstat.idx_scan DESC,\n    pg_relation_size(indexrelid) DESC\n;\n\n```\n\nThen when we want the list of unused indexes we just select from the view.\n\n\n```\nselect * from unused_index;\n\n```\n\n\n#### Tags: view,\"unused index\"\n\n","Lesson_no":35}' where homework_id = 'cf9c992f-96c8-44a3-4c2b-7c786c514839';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '6e0f97cc-87cb-4284-51ea-eefbcafe2ebb', ' Interactive - 36 - stored procedures', '36', 'hw36.mp4', 'hw36.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '9524ab22-d0df-4091-699c-14502a4ce448', 'function' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9524ab22-d0df-4091-699c-14502a4ce448', '6e0f97cc-87cb-4284-51ea-eefbcafe2ebb' );
insert into ct_tag ( tag_id, tag_word ) values ( '0f8b1cd2-79c3-47f6-63e5-db1cb1b723d3', 'stored procedure' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '0f8b1cd2-79c3-47f6-63e5-db1cb1b723d3', '6e0f97cc-87cb-4284-51ea-eefbcafe2ebb' );
insert into ct_tag ( tag_id, tag_word ) values ( '6b554446-219f-4577-7cfc-0326728e4611', 'transaction' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '6b554446-219f-4577-7cfc-0326728e4611', '6e0f97cc-87cb-4284-51ea-eefbcafe2ebb' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 36 - stored procedures\n\nWe have been using store procedures for a number of examples so far.    Triggers in\nPostgreSQL call stored procedures.   In PostgreSQL all stored procedures are called \"functions\".\n\nPostgreSQL allows for stored procedures in multiple languages.   The default language is PL/pgSQL\nand this us defined using the `LANGUAGE` specifier.  I usually put this at the end but it can\nbe done at the top also.\n\nThe section from $$ to $$ is the body that is saved and run when the function is called.\n\nThere are a slew of options on how a function is run.\n\n```\nCREATE or REPLACE FUNCTION function_name ( parameter_list varchar )\nRETURNS varchar \nAS $$\nDECLARE\n\tdata text;\nBEGIN\n\n\t-- do something\n\n\tRETURN data;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\nThe easy way to call a function is with a \"select\".\nFor example:\n\n\n```\nselect function_name ( ''a'' );\n```\n\nStored procedures have some advantages.  The code is run inside or near to the database.  This makes\nthe cost of moving data back and forth very low.    Stored procedures are a well developed and optimized\ntechnology and tend to be fast.  \n\nWith PL/pgSQL as the language the data types exactly match with the database and the handling of values\nlike NULL is clear and easy.\n\nWe can check to see if a select fails to return data and for nulls in a fashion that is built into the\nlanguage.\n\n\n```\nCREATE or REPLACE FUNCTION function_name ( parameter_list varchar )\nRETURNS varchar \nAS $$\nDECLARE\n\tdata text;\nBEGIN\n\n\tSELECT ''PASS''\n\t\tINTO data\n\t\tFROM ct_config \n\t\tWHERE config_id = 1;\n\tIF not found THEN\n\t\tdata = ''FAIL'';\n\tEND IF;\n\n\tRETURN data;\nEND;\n$$ LANGUAGE plpgsql;\n\n```\n\n\nIn PostgreSQL a stored procedure creates a transaction at the \"BEGIN\" and ends it at the\n\"END\".  This means that if you \"RAISE\" an error in the middle it will result in rolling back\nthe entire transaction.\n\nStored procedures can return rows of data.  Note the fact that the loop returns a single\nrow and then restart''s for each additional row.\n\nFor example:\n\n```\n-- using table from hw13_4.sql us_state\n\nCREATE OR REPLACE FUNCTION getStateFipsCode() \nRETURNS SETOF us_state \nAS $$\nDECLARE\n    r us_state%rowtype;\nBEGIN\n    FOR r IN \t\n\t\tSELECT * FROM us_state\n\t\tWHERE gdp_growth \u003e 1.0\n    LOOP\n\n        -- can do some processing here\n\n        RETURN NEXT r; -- return current row of SELECT\n    END LOOP;\n    RETURN;\nEND\n$$\nLANGUAGE ''plpgsql'' ;\n\nSELECT * \n\tFROM getStateFipsCode()\n;\n\n```\n\n#### Tags: \"function\",\"stored procedure\",\"transaction\"\n\n","Lesson_no":36}' where homework_id = '6e0f97cc-87cb-4284-51ea-eefbcafe2ebb';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '6c9d334c-dd20-4bb4-4310-cd58e1c394a0', ' Interactive - 37 - encrypted/hashed passwords storage', '37', 'hw37.mp4', 'hw37.jpg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '662b0e3f-530c-4f5c-6ff8-7401639db587', 'password' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '662b0e3f-530c-4f5c-6ff8-7401639db587', '6c9d334c-dd20-4bb4-4310-cd58e1c394a0' );
insert into ct_tag ( tag_id, tag_word ) values ( '87a94401-d545-4877-6ac7-8d1531fc607a', 'hash password' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '87a94401-d545-4877-6ac7-8d1531fc607a', '6c9d334c-dd20-4bb4-4310-cd58e1c394a0' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fcb5d3e7-db61-481a-734b-574da6236aed', 'encrypted' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fcb5d3e7-db61-481a-734b-574da6236aed', '6c9d334c-dd20-4bb4-4310-cd58e1c394a0' );
update ct_homework set lesson_body = '{"Lesson":"\n\n\n\n\u003cstyle\u003e\n.pagebreak { page-break-before: always; }\n.half { height: 200px; }\n\u003c/style\u003e\n\n\n\n\n\n\n\n\n# Interactive - 37 - encrypted/hashed passwords storage\n\nIt is a good idea to store passwords in a way that if the entire database is lost\nyou do not loos anybody''s password.  You need to hash them or encrypt them\nin the table.\n\nThere are hash functions that are designed for this.  Of of these is  \nthe blowfish algorithm.  It is denoted to in the encryption parameters as ''bf''.\n\n\nFirst, we need to enable pgcrypto:\n\n```\nCREATE EXTENSION if not exists pgcrypto;\n\n```\n\n\nThen, we can create a table for storing user credentials:\n\n```\n\nDROP TABLE IF EXISTS example_users ;\n\nCREATE TABLE example_users (\n\tid SERIAL PRIMARY KEY,\n\temail TEXT NOT NULL UNIQUE,\n\tpassword TEXT NOT NULL\n);\n\n\nCREATE OR REPLACE function example_users_insert()\nRETURNS trigger AS $$\nDECLARE \n\tl_salt text;\n\tl_pw text;\nBEGIN\n\tselect gen_salt(''bf'')\n\t\tinto l_salt;\n\tl_pw = NEW.password;\n\tNEW.password = crypt(l_pw, l_salt);\n\tRETURN NEW;\nEND\n$$ LANGUAGE ''plpgsql'';\n\n\nCREATE TRIGGER example_users_insert_trig\nBEFORE insert or update ON example_users\nFOR EACH ROW\nEXECUTE PROCEDURE example_users_insert();\n\n\n```\n\nWhen we insert into the table we can then save the hash of the password instead of the\npassword itself.\n\n```\nINSERT INTO example_users (email, password) VALUES \n\t( ''pschlump@uwyo.edu'', ''my-very-bad-password'')\n;\n\n```\n\nWhen we want to validate that a password that has been passed in is correct\nwe compare to the hashed value with:\n\n\n```\nSELECT id \nFROM example_users as t1\nWHERE t1.email = ''pschlump@uwyo.edu''\n  AND t1.password = crypt(''my-very-bad-password'', t1.password)\n;\n\n```\n\nThis would be a good candidate to encapsulate into a stored procedure.\n\n```\nCREATE or REPLACE FUNCTION login_correct ( un varchar, pw varchar )\nRETURNS varchar \nAS $$\nDECLARE\n\tdata text;\nBEGIN\n\n\tBEGIN\n\t\tSELECT ''VALID-USER''\n\t\t\tINTO data\n\t\t\tFROM example_users as t1\n\t\t\tWHERE t1.email = un\n\t\t\t  AND t1.password = crypt(pw, t1.password)\n\t\t\t;\n\t\tIF not found THEN\n\t\t\tdata = ''Incorrect username or password.'';\n\t\tEND IF;\n\tEXCEPTION\t\n\t\tWHEN no_data_found THEN\n\t\t\tdata = ''Incorrect username or password.'';\n\t\tWHEN too_many_rows THEN\n\t\t\tdata = ''Incorrect username or password.'';\n\t\tWHEN others THEN\n\t\t\tdata = ''Incorrect username or password.'';\n\tEND;\n\n\tRETURN data;\nEND;\n$$ LANGUAGE plpgsql;\n\nselect login_correct ( ''pschlump@uwyo.edu'', ''my-very-bad-password'' );\n\nselect login_correct ( ''pschlump@uwyo.edu'', ''my-VERY-bad-password'' );\n\n\n\n```\n\n#### Tags: \"password\",\"hash password\",\"encrypted\"\n\n","Lesson_no":37}' where homework_id = '6c9d334c-dd20-4bb4-4310-cd58e1c394a0';


-- [32;40mPASS[0m
