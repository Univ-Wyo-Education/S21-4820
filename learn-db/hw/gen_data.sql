delete from ct_tag cascade;
delete from ct_homework_ans cascade;
delete from ct_homework cascade;
delete from ct_tag cascade;
delete from ct_file_list cascade;
delete from ct_val_homework cascade;



insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'ea48df8e-7bde-4121-5057-0b4e2e6832e9', 'Interactive - 01 - Create Table', '1', 'hw01.mp4', 'hw01.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ef04b332-c5a0-493b-54c8-40d11939c37c', 'create table' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ef04b332-c5a0-493b-54c8-40d11939c37c', 'ea48df8e-7bde-4121-5057-0b4e2e6832e9' );
insert into ct_tag ( tag_id, tag_word ) values ( '9094f633-e27c-4963-5888-caf84088b1b6', 'type text' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9094f633-e27c-4963-5888-caf84088b1b6', 'ea48df8e-7bde-4121-5057-0b4e2e6832e9' );
insert into ct_tag ( tag_id, tag_word ) values ( '892a222e-e30e-4c50-57d9-ed84544b5e23', 'type int' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '892a222e-e30e-4c50-57d9-ed84544b5e23', 'ea48df8e-7bde-4121-5057-0b4e2e6832e9' );
insert into ct_tag ( tag_id, tag_word ) values ( '8a2f0126-356c-41e4-4a2c-a9011cb865ed', 'type varchar' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8a2f0126-356c-41e4-4a2c-a9011cb865ed', 'ea48df8e-7bde-4121-5057-0b4e2e6832e9' );
insert into ct_tag ( tag_id, tag_word ) values ( '8f9c9d14-950c-49c3-4a44-4f7a62b65b4a', 'hw01' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8f9c9d14-950c-49c3-4a44-4f7a62b65b4a', 'ea48df8e-7bde-4121-5057-0b4e2e6832e9' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'a5a548f6-c36e-4c8d-6c08-c504a346c675', 1, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 01 - Create Table\u003c/h1\u003e\n\n\u003cp\u003eCreate a table with 3 columns.  The table name will be \u0026ldquo;name_list\u0026rdquo;.\nThe columns are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ereal_name a text column\u003c/li\u003e\n\u003cli\u003eage an integer\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003estate a 2 character field for a US state code.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecreate table \u0026lt;name\u0026gt; ( \n\t\u0026lt;column\u0026gt;,\t \n\t\u0026lt;column\u0026gt;,\t \n\t\u0026lt;column\u0026gt;,\t \n\t... \n\t\u0026lt;column\u0026gt; \n); \n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe columns are a comma \u003ccode\u003e,\u003c/code\u003e separated list.   The set of\ncolumns tars with a \u003ccode\u003e(\u003c/code\u003e and ends with a \u003ccode\u003e)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003e;\u003c/code\u003e (semicolon) is used to mark the end of the statement.\u003c/p\u003e\n\n\u003cp\u003eOfficially this is call the Data Definition Language or DDL.\u003c/p\u003e\n\n\u003cp\u003eWe have to declare what we want to store before storing it.\u003c/p\u003e\n\n\u003cp\u003eWe will get back to data-types and SQL in a future homework.\u003c/p\u003e\n\n\u003cp\u003eso with 3 columns\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE if exists name_list ; \n \nCREATE TABLE name_list ( \n\treal_name text,\t \n\tage int,\t \n\tstate varchar(2) \n); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBook: Pages 5 to 7\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;create table\u0026rdquo;,\u0026ldquo;type text\u0026rdquo;,\u0026ldquo;type int\u0026rdquo;,\u0026ldquo;type varchar\u0026rdquo;,\u0026ldquo;hw01\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":1}' where homework_id = 'ea48df8e-7bde-4121-5057-0b4e2e6832e9';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'fa488582-0903-4446-715c-476abb162cc3', 'Interactive - 02 - Insert data into name_list', '2', 'hw02.mp4', 'hw02.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '2e9793c7-cbd7-473f-7b87-efa40f05083d', 'hw02' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2e9793c7-cbd7-473f-7b87-efa40f05083d', 'fa488582-0903-4446-715c-476abb162cc3' );
insert into ct_tag ( tag_id, tag_word ) values ( '57b4c733-95dd-42d1-50a4-e951638215d0', 'insert' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '57b4c733-95dd-42d1-50a4-e951638215d0', 'fa488582-0903-4446-715c-476abb162cc3' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'ff0faaf4-33c3-4631-4322-4936b3848c67', 2, 'SQL-Select', 'select ''PASS'' as x from ( select count(1) as x from name_list ) as t1 where t1.x = 6 ' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 02 - Insert data into name_list\u003c/h1\u003e\n\n\u003cp\u003eInsert some data into the table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003einsert into \u0026lt;name\u0026gt; ( \u0026lt;column-name\u0026gt;, \u0026lt;column-name\u0026gt;, .... ) values \n\t( \u0026lt;colun-data1\u0026gt;, \u0026lt;colun-data2\u0026gt;, ... ), \n\t( \u0026lt;colun-row2\u0026gt;, \u0026lt;colun-row2\u0026gt;, ... ), \n\t( \u0026lt;colun-row2\u0026gt;, \u0026lt;colun-row2\u0026gt;, ... ) \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eso our example, we will use all the columns so we can leave the\nlist of columns out  and just put the data in the table declared\norder.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO name_list values \n\t( ''bob true'',            22, ''WY'' ), \n\t( ''Jane True'',           20, ''WY'' ), \n\t( ''Tom Ace'',             31, ''NJ'' ), \n\t( ''Steve Pen'',           33, ''NJ'' ), \n\t( ''Laura Jean Alkinoos'', 34, ''PA'' ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand a single row (note that the column order\nis chained).  It is better to list the columns\nso that if the table is changed the data can\nstill be loaded.  It is possible to add new columns to a table\nand break old code - so it is better to have:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003einsert into name_list ( real_name, age, state ) values \n\t( ''bob true'',            22, ''WY'' ), \n\t( ''Jane True'',           20, ''WY'' ), \n\t( ''Tom Ace'',             31, ''NJ'' ), \n\t( ''Steve Pen'',           33, ''NJ'' ), \n\t( ''Laura Jean Alkinoos'', 34, ''PA'' ) \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAlso note that it is intentional at this point that \u003ccode\u003ebob true\u003c/code\u003e is all lower\ncase.  We will fix that in a little bit.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nINSERT INTO name_list ( real_name, state, age ) \n\tvalues\t( ''Philip Schlump'', ''WY'', 62 ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eEach set of data that we inset is separated with a comma, \u003ccode\u003e,\u003c/code\u003e.\nWhen we insert text we use single quotes, \u003ccode\u003e''\u003c/code\u003e to mark that it is\ntext.  To insert a quote mark we put in 2 of them in a row.\nSo, To insert \u003ccode\u003ethat''s\u003c/code\u003e  we would use in our insert statement,\n\u003ccode\u003e''that''''s\u003c/code\u003e`.\u003c/p\u003e\n\n\u003cp\u003eNumbers are respresented as a set of digits.  With fractional(floating point) numbers you put in a decimal\npoint - but note that our column age is not a float - so just whole years.\u003c/p\u003e\n\n\u003cp\u003eIf all has worked correctly then you should have 6 rows in the table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect count(1) as x  \nfrom name_list \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e6 rows is good.  Click to grade the homework.\u003c/p\u003e\n\n\u003cp\u003eBook: Pages 7 to 9\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;hw02\u0026rdquo;,\u0026ldquo;insert\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":2}' where homework_id = 'fa488582-0903-4446-715c-476abb162cc3';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a5cc0b33-36ca-42db-7acf-1ff417e39d54', 'Interactive - 03 - Select data back from the table', '3', 'hw03.mp4', 'hw03.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '2f0c0836-4aa6-4a16-5635-7cdb8e964540', 'select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2f0c0836-4aa6-4a16-5635-7cdb8e964540', 'a5cc0b33-36ca-42db-7acf-1ff417e39d54' );
insert into ct_tag ( tag_id, tag_word ) values ( '423c3ee7-a259-4dd3-66f9-e61c01637c91', 'where' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '423c3ee7-a259-4dd3-66f9-e61c01637c91', 'a5cc0b33-36ca-42db-7acf-1ff417e39d54' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '4d5b0a54-c0ff-4d46-5e69-56dccce65a75', 3, 'CountRows', '{%22Nr%22%3A[3]}' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 03 - Select data back from the table\u003c/h1\u003e\n\n\u003cp\u003eData is more fun when you can put some in and get it\u003cbr /\u003e\nback later.  Enter \u0026ldquo;select\u0026rdquo;.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003egives you get back all the data.  The \u003ccode\u003e*\u003c/code\u003e is the list\nof columns you get back.  \u003ccode\u003e*\u003c/code\u003e is for all the columns.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT real_name, state from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGives you back just the name and state.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT lower(real_name) as \u0026quot;real_name_lower\u0026quot;, real_name \nfrom name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGives you back a lower case version of the name.\u003c/p\u003e\n\n\u003cp\u003eOr make it in order from z to a.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nSELECT lower(real_name) as \u0026quot;real_name_lower\u0026quot;, real_name \n\tFROM name_list \n\tORDER BY 1 desc \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMaybe we just want the names in Wyoming.  This is the\nwhere clause.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nSELECT real_name \n\tFROM name_list \n\tWHERE state = ''WY'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRemember that if you want to match a text field you\nhave to use quotes.  Also it is case sensitive.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect real_name \nfrom name_list \nwhere state = ''wy'' \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ewill not give you any rows.  Try it.\u003c/p\u003e\n\n\u003cp\u003eThe query to run before to get your grade is:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nSELECT real_name \n\tFROM name_list \n\tWHERE state = ''WY'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt should return 3 rows.  This is what is checked for by the application.\u003c/p\u003e\n\n\u003cp\u003eBook: Chapter 2 - pages 11 to 22.\u003c/p\u003e\n\n\u003ch4\u003eTags: select,where\u003c/h4\u003e\n","Lesson_no":3}' where homework_id = 'a5cc0b33-36ca-42db-7acf-1ff417e39d54';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'c487d876-b297-45c7-4624-e0addd2dfd82', 'Interactive - 04 - update the table', '4', 'hw04.mp4', 'hw04.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '84dddc32-aca1-45c8-4a1a-5184e37c0a23', 'update' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '84dddc32-aca1-45c8-4a1a-5184e37c0a23', 'c487d876-b297-45c7-4624-e0addd2dfd82' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '423c3ee7-a259-4dd3-66f9-e61c01637c91', 'c487d876-b297-45c7-4624-e0addd2dfd82' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'a689cf5a-5b1c-4ca9-711c-b695c8f06ede', 4, 'CountRows', '{%22Nr%22%3A[6]}' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 04 - update the table\u003c/h1\u003e\n\n\u003cp\u003eNote that we have an error in our data.  \u003ccode\u003eBob true\u003c/code\u003e should\nbe \u003ccode\u003eBob True\u003c/code\u003e.   Let\u0026rsquo;s change some data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eupdate \u0026lt;tabe-name\u0026gt; \n\tset \u0026lt;list of columns to modify\u0026gt; \n\twhere \u0026lt;boolean expresison\u0026gt; \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eso\u0026hellip; let\u0026rsquo;s look at the data before the update\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eUpdate it to fix it\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eUPDATE name_list \n\tSET real_name = ''Bob True'' \n\tWHERE real_name = ''bob true'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow let\u0026rsquo;s look at the data:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMuch better!  The query should return 6 rows.  The application checks that you are getting back 6 rows\nof data for grading.\u003c/p\u003e\n\n\u003cp\u003eBook: page 139 talks about update.\u003c/p\u003e\n\n\u003ch4\u003eTags: update,where\u003c/h4\u003e\n","Lesson_no":4}' where homework_id = 'c487d876-b297-45c7-4624-e0addd2dfd82';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2ca7b3bc-74e1-4ce5-5741-4224ce59279f', 'Interactive - 05 - insert more data / select unique data', '5', 'hw05.mp4', 'hw05.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '57b4c733-95dd-42d1-50a4-e951638215d0', '2ca7b3bc-74e1-4ce5-5741-4224ce59279f' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2f0c0836-4aa6-4a16-5635-7cdb8e964540', '2ca7b3bc-74e1-4ce5-5741-4224ce59279f' );
insert into ct_tag ( tag_id, tag_word ) values ( '5f54549c-d7d6-419c-5a6d-18be5944e460', 'distinct' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5f54549c-d7d6-419c-5a6d-18be5944e460', '2ca7b3bc-74e1-4ce5-5741-4224ce59279f' );
insert into ct_tag ( tag_id, tag_word ) values ( '8cb8f22c-1e39-405a-7be2-8d09a8904751', 'select distinct' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8cb8f22c-1e39-405a-7be2-8d09a8904751', '2ca7b3bc-74e1-4ce5-5741-4224ce59279f' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'cf20efb8-500e-497a-4af1-d04612297994', 5, 'CountRows', '{%22Nr%22%3A[10]}' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 05 - insert more data / select unique data\u003c/h1\u003e\n\n\u003cp\u003eLet\u0026rsquo;s put in some more data - that has some mistakes in it.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO name_list values \n\t( ''Liz Trubune'',         30, ''WY'' ), \n\t( ''Jane True'',           20, ''WY'' ), \n\t( ''Lary Smith'',          58, ''NJ'' ), \n\t( ''Dave Dave'',           21, ''NJ'' ), \n\t( ''Laura Ann Alkinoos'',  34, ''PA'' ) \n; \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe problem is that \u0026ldquo;Jane True\u0026rdquo; is now a duplicate!\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s see it.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe will get how to prevent this later.\nRight now let\u0026rsquo;s get unique data back when the\nactual data has duplicates.   For lots of reasons you\u003cbr /\u003e\ncan get duplicates in a set of selected data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT distinct * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe select should return 10 rows of data.\u003c/p\u003e\n\n\u003cp\u003eBook: pages 12 to 14.\u003c/p\u003e\n\n\u003ch4\u003eTags: insert,select,distinct,select distinct\u003c/h4\u003e\n","Lesson_no":5}' where homework_id = '2ca7b3bc-74e1-4ce5-5741-4224ce59279f';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'baa77b47-324f-4f6e-7355-8c5c7bfcdee2', 'Interactive - 06 - count rows of data', '6', 'hw06.mp4', 'hw06.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '81476921-bcb2-4fb6-6770-9de16e4eb23b', 'count' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '81476921-bcb2-4fb6-6770-9de16e4eb23b', 'baa77b47-324f-4f6e-7355-8c5c7bfcdee2' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5f54549c-d7d6-419c-5a6d-18be5944e460', 'baa77b47-324f-4f6e-7355-8c5c7bfcdee2' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd5bb5165-452e-4bcc-5486-77808da5b9da', 'count distinct' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd5bb5165-452e-4bcc-5486-77808da5b9da', 'baa77b47-324f-4f6e-7355-8c5c7bfcdee2' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '26f0087b-46e8-4445-568b-3371229757d7', 6, 'CountRows', '{%22Nr%22%3A[1]}' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 06 - count rows of data\u003c/h1\u003e\n\n\u003cp\u003euse count to get how many rows.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT count(*) from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get 11 rows.\u003c/p\u003e\n\n\u003cp\u003eor with a where clause\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT count(*) from name_list \n\tWHERE state = ''NJ'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get 4 rows.\u003c/p\u003e\n\n\u003cp\u003ewith a name for the returned data column\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT count(*) as \u0026quot;count_of_names\u0026quot; \n\tFROM name_list \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get 11 rows.\u003c/p\u003e\n\n\u003cp\u003eBook: page 117 to 118\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT count(distinct real_name)  \n\tFROM name_list \n\tWHERE state = ''NJ'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 1 row with a count of 10.\u003c/p\u003e\n\n\u003ch4\u003eTags: count,distinct,\u0026ldquo;count distinct\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":6}' where homework_id = 'baa77b47-324f-4f6e-7355-8c5c7bfcdee2';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'e480d4ca-246a-4234-743a-31e9ce9e1d54', 'Interactive - 07 - add a check constraint on age', '7', 'hw07.mp4', 'hw07.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '55c60862-775a-44ec-6145-e865887677dd', 'alter table rename' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '55c60862-775a-44ec-6145-e865887677dd', 'e480d4ca-246a-4234-743a-31e9ce9e1d54' );
insert into ct_tag ( tag_id, tag_word ) values ( '386a5032-1351-4c93-70a7-2bd3b507ae5f', 'rename' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '386a5032-1351-4c93-70a7-2bd3b507ae5f', 'e480d4ca-246a-4234-743a-31e9ce9e1d54' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '57b4c733-95dd-42d1-50a4-e951638215d0', 'e480d4ca-246a-4234-743a-31e9ce9e1d54' );
insert into ct_tag ( tag_id, tag_word ) values ( '066aa8c2-98e3-4481-7875-a4320da8af4c', 'drop table' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '066aa8c2-98e3-4481-7875-a4320da8af4c', 'e480d4ca-246a-4234-743a-31e9ce9e1d54' );
insert into ct_tag ( tag_id, tag_word ) values ( '29b5bd22-d5fb-4a48-67f0-dc8182359568', 'insert select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '29b5bd22-d5fb-4a48-67f0-dc8182359568', 'e480d4ca-246a-4234-743a-31e9ce9e1d54' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '1c8be693-a6fb-446d-4714-d439ffb1bff5', 7, 'CountRows', '{%22Nr%22%3A[11]}' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 07 - add a check constraint on age\u003c/h1\u003e\n\n\u003cp\u003eWe can use the Data Definition Language (DDL) - create table to check\nthat values are in a correct range or value.\u003c/p\u003e\n\n\u003cp\u003eThese are check constrains.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s save our data for later, then recreate the table.\u003c/p\u003e\n\n\u003cp\u003eFirst we are going to rename the table - so we can save\u003cbr /\u003e\nit for later.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eALTER TABLE name_list \n\tRENAME TO old_name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we will re-create the table with the check constraint.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecreate table name_list ( \n\treal_name text, \n\tage int check ( age \u0026gt; 0 and age \u0026lt; 154 ),\t \n\tstate char varying (2) \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow copy the data back.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003einsert into name_list ( real_name, age, state )  \n\tselect real_name, age, state  \n\tfrom old_name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eVerify data amount.  Check how many rows.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect count(1) from name_list; \nselect count(1) from old_name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eProvided that the counts are the same let\u0026rsquo;s clean up the temporary table with the old data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop table old_name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd let\u0026rsquo;s look at the data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should see 10 rows.  The duplicate should be removed.\u003c/p\u003e\n\n\u003cp\u003eBook: page 132\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;alter table rename\u0026rdquo;,\u0026ldquo;rename\u0026rdquo;,\u0026ldquo;insert\u0026rdquo;,\u0026ldquo;drop table\u0026rdquo;,\u0026ldquo;insert select\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":7}' where homework_id = 'e480d4ca-246a-4234-743a-31e9ce9e1d54';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '7439fc7c-3194-4b07-69bc-f2b658599392', 'Interactive - 08 - create unique id and a primary key', '8', 'hw08.mp4', 'hw08.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '6cebfb27-2909-4ed3-4563-963bd0f0b9fd', 'primary key' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '6cebfb27-2909-4ed3-4563-963bd0f0b9fd', '7439fc7c-3194-4b07-69bc-f2b658599392' );
insert into ct_tag ( tag_id, tag_word ) values ( '90f5a314-4942-4ce5-4b3a-b0aaacf4229a', 'uuid' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '90f5a314-4942-4ce5-4b3a-b0aaacf4229a', '7439fc7c-3194-4b07-69bc-f2b658599392' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd67889b3-4ea5-4e01-7d92-783bf9fb9e1e', 'unique id' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd67889b3-4ea5-4e01-7d92-783bf9fb9e1e', '7439fc7c-3194-4b07-69bc-f2b658599392' );
insert into ct_tag ( tag_id, tag_word ) values ( 'b423daea-ec7b-40b2-676e-7ec5880c7b11', 'UUID' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'b423daea-ec7b-40b2-676e-7ec5880c7b11', '7439fc7c-3194-4b07-69bc-f2b658599392' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'fcc75cf1-487b-4ab0-55c9-d96c5930d9ab', 8, 'SQL-Select', 'select ''PASS'' as x from ( select count(1) as x from name_list ) as t1 where t1.x = 11 ' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 08 - create unique id and a primary key\u003c/h1\u003e\n\n\u003cp\u003eIt is really hard to update data when you don\u0026rsquo;t have a unique way of identifying a row.\nPeople will often imagine that there is something unique in the data.  Some combination\nof name/date/place-of-birth, generally it is not true.\u003c/p\u003e\n\n\u003cp\u003eThe easy way to deal with this is to create unique keys.  PostgreSQL offers two ways\u003cbr /\u003e\nof doing this.  The first is a key that counts up.   This makes short keys, that\u0026rsquo;s good\nbut also creates a bottle neck with a single source of \u0026ldquo;count-up\u0026rdquo; values.  The second\nway is use a university unique identifier or UUID.  UUIDs are can be created in parallel\nand will not collide.  This has lot\u0026rsquo;s of advantages, but they are long, hard to type\nand take up lots of space in your database.\u003c/p\u003e\n\n\u003cp\u003eWe will get back to sequential values later, for a different purpose.  Let\u0026rsquo;s do the\nmore general approach and use UUIDs.\u003c/p\u003e\n\n\u003cp\u003eWe are going to change our table to have a unique ID column, then create an index\u003cbr /\u003e\non that column.\u003c/p\u003e\n\n\u003cp\u003eThis relies on having a way to generate UUIDs, it is an extension package to the\ndefault PostgreSQL database. (double quotes, \u003ccode\u003e\u0026quot;\u003c/code\u003e are correct for this command).\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE EXTENSION IF NOT EXISTS \u0026quot;uuid-ossp\u0026quot;; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere are ways to add a column to the table without re-creating the table.\nThey will not work for this.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s save our data for later, then recreate the table.\u003c/p\u003e\n\n\u003cp\u003eFirst we are going to rename the table, so we can save\u003cbr /\u003e\nit for later. (Familiar, we did this last time)\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop table if exists old_name_list; \nALTER TABLE name_list \n\tRENAME TO old_name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we will re-create the table with the check constraint.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecreate table name_list ( \n\tname_list_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\treal_name text, \n\tage int check ( age \u0026gt; 0 and age \u0026lt; 154 ),\t \n\tstate char varying (2) \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow copy the data back.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO name_list ( real_name, age, state )  \n\tSELECT real_name, age, state  \n\tFROM old_name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eVerify data amount.  Check how many rows.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect count(1) from name_list; \nselect count(1) from old_name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eProvided that the counts are the same let\u0026rsquo;s clean up the temporary table with the old data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop table old_name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere are 2 parts that we added.  Both a ID column that is unique and\na thing called a \u003ccode\u003ePRIMARY KEY\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYour result should be similar to this list (the name_list_id\u0026rsquo;s will\nbe unique to you and will not match the UUIDs below).\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e             name_list_id             |      real_name      | age | state  \n--------------------------------------+---------------------+-----+------- \n 1fb069ca-a4a2-412a-8401-c835b6c45cb7 | Jane True           |  20 | WY \n 39fff492-f369-4552-bf49-b8d7ae57bf9a | Tom Ace             |  31 | NJ \n 8e91d65f-ee0a-4642-8d62-1cc1e1058238 | Steve Pen           |  33 | NJ \n e245b3ec-9e5f-4112-ac7e-1d9732d9a4f1 | Laura Jean Alkinoos |  34 | PA \n b8c2468e-694d-46de-acc3-e8da239aa1a3 | Philip Schlump      |  62 | WY \n 983b17d2-39f7-45bc-96b2-66ffdbb96c0e | Bob True            |  22 | WY \n 2db6af28-47c7-4107-9b67-bdec3321f14c | Liz Trubune         |  30 | WY \n ea51c6b2-37f0-47ed-9211-d1064d3eacfd | Jane True           |  44 | WY \n 4c827537-1755-4242-8241-a77ff4173554 | Lary Smith          |  58 | NJ \n 3674b39d-4a61-45e0-99e6-65fb7edbbf82 | Dave Dave           |  21 | NJ \n e543c622-24be-4cc2-8241-e8a2dfd1f15c | Laura Ann Alkinoos  |  34 | PA \n(11 rows) \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe grading code will look at the table name_list and verify that you have 11 rows of data in it.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;primary key\u0026rdquo;,\u0026ldquo;uuid\u0026rdquo;,\u0026ldquo;unique id\u0026rdquo;,\u0026ldquo;UUID\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":8}' where homework_id = '7439fc7c-3194-4b07-69bc-f2b658599392';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '04be7d97-c93f-4fd5-7542-c0efeabc851b', 'Interactive - 09 - add a table with state codes', '9', 'hw09.mp4', 'hw09.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '46a7f573-5c8f-4920-6ce3-45ea40d09a1e', 'foreign key' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '46a7f573-5c8f-4920-6ce3-45ea40d09a1e', '04be7d97-c93f-4fd5-7542-c0efeabc851b' );
insert into ct_tag ( tag_id, tag_word ) values ( '5a5204ac-a445-4b9e-6243-3090a46f9ac2', 'alter table' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5a5204ac-a445-4b9e-6243-3090a46f9ac2', '04be7d97-c93f-4fd5-7542-c0efeabc851b' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd980c4cc-4c7c-41f6-66b4-0b15b92dfb78', 'add constraint' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd980c4cc-4c7c-41f6-66b4-0b15b92dfb78', '04be7d97-c93f-4fd5-7542-c0efeabc851b' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '8946ac22-ef26-45c7-7b81-5c581668e5a1', 9, 'SQL-Select', 'select ''PASS'' as x' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '03f9941f-2c76-456a-71ff-f0adc5d0ea81', 9, 'hw09_1.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'd155b5fa-2351-4096-7363-805485fc44be', 9, 'hw09_2.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'fcd193e7-5906-45c7-5ce0-144cbe6cfa2a', 9, 'hw09_3.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '50326df1-3707-4653-6e4f-85b0d1236746', 9, 'hw09_4.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 09 - add a table with state codes\u003c/h1\u003e\n\n\u003cp\u003eA check constraint on all the state codes would be very long.   There are also\ntimes when that is just not the best way to check that a value is correct.\u003c/p\u003e\n\n\u003cp\u003eThere is a different way to check that a value is in a range of values.\nThat is to add a new table that contains all the values and have the\ndatabase verify that new values are in this list.\u003c/p\u003e\n\n\u003cp\u003eFirst let\u0026rsquo;s create the table with the values.  We can also have the\ndatabase verify that nobody puts in an empty state name.  This is\nthe \u0026ldquo;NOT NULL\u0026rdquo; on each of the types.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE us_state ( \n\tstate_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\tstate_name text NOT NULL, \n\tstate char varying (2) NOT NULL, \n\tFIPS_code char varying (2) NOT NULL \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe will also need an index on the state code so that we can\nreference it.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE UNIQUE INDEX us_state_uidx1 on us_state ( state ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf this is not the first time this is run you may need to delete existing data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDELETE FROM us_state ; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen we need to populate the state table with states.  Please cut-and-paste\nthis or use the supplied file to insert the states.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO us_state ( state_name, state, FIPS_code ) values \n\t(''Alabama'',''AL'',''01''), \n\t(''Alaska'',''AK'',''02''), \n\t(''Arizona'',''AZ'',''04''), \n\t(''Arkansas'',''AR'',''05''), \n\t(''California'',''CA'',''06''), \n\t(''Colorado'',''CO'',''08''), \n\t(''Connecticut'',''CT'',''09''), \n\t(''Delaware'',''DE'',''10''), \n\t(''District of Columbia'',''DC'',''11''), \n\t(''Florida'',''FL'',''12''), \n\t(''Georgia'',''GA'',''13''), \n\t(''Hawaii'',''HI'',''15''), \n\t(''Idaho'',''ID'',''16''), \n\t(''Illinois'',''IL'',''17''), \n\t(''Indiana'',''IN'',''18''), \n\t(''Iowa'',''IA'',''19''), \n\t(''Kansas'',''KS'',''20''), \n\t(''Kentucky'',''KY'',''21''), \n\t(''Louisiana'',''LA'',''22''), \n\t(''Maine'',''ME'',''23''), \n\t(''Maryland'',''MD'',''24''), \n\t(''Massachusetts'',''MA'',''25''), \n\t(''Michigan'',''MI'',''26''), \n\t(''Minnesota'',''MN'',''27''), \n\t(''Mississippi'',''MS'',''28''), \n\t(''Missouri'',''MO'',''29''), \n\t(''Montana'',''MT'',''30''), \n\t(''Nebraska'',''NE'',''31''), \n\t(''Nevada'',''NV'',''32''), \n\t(''New Hampshire'',''NH'',''33''), \n\t(''New Jersey'',''NJ'',''34''), \n\t(''New Mexico'',''NM'',''35''), \n\t(''New York'',''NY'',''36''), \n\t(''North Carolina'',''NC'',''37''), \n\t(''North Dakota'',''ND'',''38''), \n\t(''Ohio'',''OH'',''39''), \n\t(''Oklahoma'',''OK'',''40''), \n\t(''Oregon'',''OR'',''41''), \n\t(''Pennsylvania'',''PA'',''42''), \n\t(''Puerto Rico'',''PR'',''72''), \n\t(''Rhode Island'',''RI'',''44''), \n\t(''South Carolina'',''SC'',''45''), \n\t(''South Dakota'',''SD'',''46''), \n\t(''Tennessee'',''TN'',''47''), \n\t(''Texas'',''TX'',''48''), \n\t(''Utah'',''UT'',''49''), \n\t(''Vermont'',''VT'',''50''), \n\t(''Virginia'',''VA'',''51''), \n\t(''Virgin Islands'',''VI'',''78''), \n\t(''Washington'',''WA'',''53''), \n\t(''West Virginia'',''WV'',''54''), \n\t(''Wisconsin'',''WI'',''55''), \n\t(''Wyoming'',''WY'',''56'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow let\u0026rsquo;s make the relationship between them know to the database.\nThis is called a foreign key constraint.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eALTER TABLE name_list  \n\tADD CONSTRAINT name_list_state_fk \n\tFOREIGN KEY (state)  \n\tREFERENCES us_state (state) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow when we try to insert data that is has an invalid state code\ninto our list of names it will get rejected.\u003c/p\u003e\n\n\u003cp\u003eThe following SQL will \u003cem\u003enot\u003c/em\u003e run successfully\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003einsert into name_list ( real_name, state ) values \n\t( ''nobody'', ''XX'' ) \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get an error that looks similar to:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eERROR:  insert or update on table \u0026quot;name_list\u0026quot; violates foreign key constraint \u0026quot;name_list_state_fk\u0026quot; \nDETAIL:  Key (state)=(XX) is not present in table \u0026quot;us_state\u0026quot;. \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBook: page 107, 136\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;foreign key\u0026rdquo;,\u0026ldquo;alter table\u0026rdquo;,\u0026ldquo;add constraint\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":9}' where homework_id = '04be7d97-c93f-4fd5-7542-c0efeabc851b';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '08c34e8e-7344-4936-4673-6e2963136acf', 'Interactive - 10 - add a index on the name table', '10', 'hw10.mp4', 'hw10.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '341a1442-9c05-4d0e-6dd9-84d2e3687adc', 'create index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '341a1442-9c05-4d0e-6dd9-84d2e3687adc', '08c34e8e-7344-4936-4673-6e2963136acf' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '797d8a0a-cca7-4bbe-4b50-1ff92a9fdec4', 10, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 10 - add a index on the name table\u003c/h1\u003e\n\n\u003cp\u003eWe have already added indexes but we need to make this process explicit.\u003c/p\u003e\n\n\u003cp\u003eThe most common indexes are based on special kind of tree called a b-tree.\u003c/p\u003e\n\n\u003cp\u003eIt is a very wide tree that allows us to get to the data stored on disk\nquickly.  This is not the only kind of index.\u003c/p\u003e\n\n\u003cp\u003eThere are indexes for other things that are built into PostgreSQL.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s create an index on the real_name field.\u003c/p\u003e\n\n\u003cp\u003eThe general form for the create index looks like:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecreate [unique] index \u0026lt;index-name\u0026gt; on \u0026lt;table-name\u0026gt; ( \n\t\u0026lt;colunm-name-1\u0026gt;, \n\t\u0026lt;col-2\u0026gt;, \n\t... \n); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSo\u0026hellip;\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE INDEX name_list_idx1 on name_list ( real_name ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow when we search for a name it will use the index to help to find the\nnames in the table.  If we have a million names in many blocks of data\nit will only take a few blocks of index search to get to the row with\nthe name we are interested in.\u003c/p\u003e\n\n\u003cp\u003eThe disadvantage is that we have to have the exact name to search on.\nDo you remember our lower-case name, \u003ccode\u003ebob true\u003c/code\u003e from the 2nd homework.\nIf we look for that we will not find it at all because we fixed the\nname to be \u003ccode\u003eBob True\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from name_list where real_name = ''bob true''; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIndexes are important because this is the primary way that we can\ninfluence the performance of a database.   If we add the word \u0026ldquo;unique\u0026rdquo;\nthen it also grantees that a column of data is unique.\u003c/p\u003e\n\n\u003cp\u003eNote that we can build indexes on more than one column.  If that is\nthe case then a for a select to use the multi-column index will\nrequire that all of the columns in the index are in the where\u003cbr /\u003e\nclause.\u003c/p\u003e\n\n\u003cp\u003eIndexes are also used when we sort data to get it back in order.\u003c/p\u003e\n\n\u003cp\u003eBook: Page 108 to 111\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;create index\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":10}' where homework_id = '08c34e8e-7344-4936-4673-6e2963136acf';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'ee440177-cb00-4c3f-6b61-55f146498990', 'Interactive - 11 - add a index on the name table that is case insensitive.', '11', 'hw11.mp4', 'hw11.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a2fb76fa-f575-4c6b-531a-48d9611fd76a', 'index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a2fb76fa-f575-4c6b-531a-48d9611fd76a', 'ee440177-cb00-4c3f-6b61-55f146498990' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '341a1442-9c05-4d0e-6dd9-84d2e3687adc', 'ee440177-cb00-4c3f-6b61-55f146498990' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fefbb7c2-41db-4269-70ac-4197db60bba4', 'lower' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fefbb7c2-41db-4269-70ac-4197db60bba4', 'ee440177-cb00-4c3f-6b61-55f146498990' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '30ac063a-b569-4054-6eaf-306b96feb344', 11, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 11 - add a index on the name table that is case insensitive.\u003c/h1\u003e\n\n\u003cp\u003eLet\u0026rsquo;s address the case sensitive problem first.\u003c/p\u003e\n\n\u003cp\u003eWe can create indexes on functions of data.  This allows us to have\nan index where we convert the upper/lower case to all lower case\nand then index this result.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE INDEX user_real_name_ci_idx1 ON name_list ((lower(real_name))); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow when we search the table using the WHERE clause we can use the \u003ccode\u003elower()\u003c/code\u003e function on\nboth sides of the equal and use the index to find the data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT *  \n\tFROM name_list  \n\tWHERE lower(real_name) = lower(''Bob True'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIndexes are also a disadvantage.  Every insert of a row now requires an insert\nto each of the indexes.  They take up storage space.   This means that we are\nusing space and time at data insert or update to save time when we select the\ndata back.  Most interactive databases have 10 to 20 times as many selects\nas they do insert/update operations.   So this is usually a good tried off.\u003c/p\u003e\n\n\u003cp\u003eWe can also get the database to tell us the set of indexes that are not\nused.  We may want to get rid of unused indexes.  We can do that with\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop index \u0026lt;index_name\u0026gt;; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCare should be taken.  If the index is a \u0026ldquo;UNIQUE\u0026rdquo; index and you remove it\nyou are also removing the unique constraint on the column of data.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s get rid of the index that is upper-lower case on the table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop index name_list_idx1; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis is the query that I used to find unused indexes (it\u0026rsquo;s a bit complicated):\nWe will use this in a homework on database performance later in the class.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT \n    idstat.relname AS TABLE_NAME, \n    indexrelname AS INDEX_NAME, \n    idstat.idx_scan AS index_scans_count, \n    pg_size_pretty(pg_relation_size(indexrelid)) AS index_size, \n    tabstat.idx_scan AS table_reads_index_count, \n    tabstat.seq_scan AS table_reads_seq_count, \n    tabstat.seq_scan + tabstat.idx_scan AS table_reads_count, \n    n_tup_upd + n_tup_ins + n_tup_del AS table_writes_count, \n    pg_size_pretty(pg_relation_size(idstat.relid)) AS table_size \nFROM pg_stat_user_indexes AS idstat \n\tJOIN pg_indexes ON indexrelname = indexname \n\t\t\tAND idstat.schemaname = pg_indexes.schemaname \n\tJOIN pg_stat_user_tables AS tabstat ON idstat.relid = tabstat.relid \nWHERE indexdef !~* ''unique'' \nORDER BY \n    idstat.idx_scan DESC, \n    pg_relation_size(indexrelid) DESC \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePlease cut/past the above query and run it once.\u003c/p\u003e\n\n\u003cp\u003eThings to note:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe index name has to be unique.\u003c/li\u003e\n\u003cli\u003eYou can have more than one index on a table.\u003c/li\u003e\n\u003cli\u003eFunction based indexes require that the function be run on every insert.  That takes time.\u003c/li\u003e\n\u003cli\u003eWe can create our own functions and index on them as well.   We will return to this subject later with \u003ccode\u003esoundex()\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eTags: index,\u0026ldquo;create index\u0026rdquo;,\u0026ldquo;lower\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":11}' where homework_id = 'ee440177-cb00-4c3f-6b61-55f146498990';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '64d51818-9fbb-4dbb-5bd3-18fc61021b0b', 'Interactive - 12 - fix our duplicate data', '12', 'hw12.mp4', 'hw12.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '7917c4ae-2baa-4595-7b36-ed8b098cb6e9', 'duplicate data' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '7917c4ae-2baa-4595-7b36-ed8b098cb6e9', '64d51818-9fbb-4dbb-5bd3-18fc61021b0b' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e6fb490f-8b96-449e-6bae-9ae1660227c6', 'delete' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e6fb490f-8b96-449e-6bae-9ae1660227c6', '64d51818-9fbb-4dbb-5bd3-18fc61021b0b' );
insert into ct_tag ( tag_id, tag_word ) values ( '887577a6-49a3-4215-7b11-b0140f2d9d87', 'type cast' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '887577a6-49a3-4215-7b11-b0140f2d9d87', '64d51818-9fbb-4dbb-5bd3-18fc61021b0b' );
insert into ct_tag ( tag_id, tag_word ) values ( '54b805ff-fc00-4a30-6597-42ba202303ef', 'min' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '54b805ff-fc00-4a30-6597-42ba202303ef', '64d51818-9fbb-4dbb-5bd3-18fc61021b0b' );
insert into ct_tag ( tag_id, tag_word ) values ( '71e298fc-dd6c-4426-7aa8-33a2fa47e998', 'not in' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '71e298fc-dd6c-4426-7aa8-33a2fa47e998', '64d51818-9fbb-4dbb-5bd3-18fc61021b0b' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '914c8ccb-75b2-4c72-6779-e836a7e79e13', 12, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 12 - fix our duplicate data\u003c/h1\u003e\n\n\u003cp\u003eNow that we have a unique primary key we can fix the duplicate name and its row.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis shows us 2 rows and we would like to delete just one of them.  Without the unique\nprimary key this is really hard to do.  With the key we can delete one of the two rows.\u003c/p\u003e\n\n\u003cp\u003eThis makes for a complex query.   First let\u0026rsquo;s select the UUID column, name_list_id\nwhere the duplicate is.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT name_list_id \n\tFROM name_list  \n\tWHERE real_name = ''Jane True'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow let\u0026rsquo;s just select 1 of the IDs. To do this we have to convert the UUID to text,\nthat is the \u003ccode\u003e::text\u003c/code\u003e so that we can use a function \u003ccode\u003emin()\u003c/code\u003e on it.  This is kind of\na random pick - but it will give us just 1 UUID.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT min(name_list_id::text) \n\tFROM name_list  \n\tWHERE real_name = ''Jane True'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we can delete and skip over the 1 UUID that we picked from above.  This is\nthe \u003ccode\u003enot in\u003c/code\u003e portion - where we put a select inside the delete.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDELETE FROM name_list \n\tWHERE real_name = ''Jane True'' \n\t  AND name_list_id::text not in ( \n\t\tSELECT min(name_list_id::text) \n\t\tFROM name_list  \n\t\tWHERE real_name = ''Jane True'' \n\t) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow select again and we have removed the duplicate.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;duplicate data\u0026rdquo;,\u0026ldquo;delete\u0026rdquo;,\u0026ldquo;type cast\u0026rdquo;,\u0026ldquo;min\u0026rdquo;,\u0026ldquo;not in\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":12}' where homework_id = '64d51818-9fbb-4dbb-5bd3-18fc61021b0b';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'eb8720ed-335c-4ec3-5765-9043252dd582', 'Interactive - 13 - drop both tables', '13', 'hw13.mp4', 'hw13.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '2ab498ad-7bb6-456f-5b3b-c9e1832b81e9', 'reload data' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2ab498ad-7bb6-456f-5b3b-c9e1832b81e9', 'eb8720ed-335c-4ec3-5765-9043252dd582' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c9324179-6b95-4ef6-4ef3-81402132fab9', 'drop cascade' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c9324179-6b95-4ef6-4ef3-81402132fab9', 'eb8720ed-335c-4ec3-5765-9043252dd582' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '3001c634-81c8-4c84-66a4-14a25e0e9edf', 13, 'SQL-Select', 'select ''PASS'' from ( select count(1) as cnt from us_state ) as foo where foo.cnt = 53' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'c2806d2c-1b05-4c66-75da-89cf045080d5', 13, 'hw13_4.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 13 - drop both tables\u003c/h1\u003e\n\n\u003cp\u003eLet\u0026rsquo;s try getting rid of our 2 tables.   Our first attempt to do this will fail.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop table us_state; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe have a dependency via foreign constraint on us_state.  That is name_list.\u003c/p\u003e\n\n\u003cp\u003eWe can do this in order - or we can use an option to \u0026ldquo;cascade\u0026rdquo; the drops.\n\u0026ldquo;cascade\u0026rdquo; is powerful but dangerous.  In PosgreSQL it will drop the table\nand associated constraints.  In Oracle it cascades to the tables referenced!\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP table name_list; \nDROP table us_state; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow use the supplied script to re-create the tables.  There will be some additional\ncolumns when you do this that we will use in future homework exercises.\u003c/p\u003e\n\n\u003cp\u003eThe file is hw13_4.sql - run the entire file.  The file is show below.   After you\nhave run the file do the select to see a table of the states.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE if exists name_list cascade ; \nDROP TABLE if exists us_state cascade ; \n \nCREATE TABLE us_state ( \n\tstate_id       UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\tstate_name     text NOT NULL, \n\tstate          char varying (2) NOT NULL, \n\tFIPS_code      char varying (2) NOT NULL, \n\tarea_rank      int not null default 9999, \n\tarea_sq_mi     numeric not null default 0, \n\tpopulation     int not null default 0, \n\tfed_area       int   not null default 0, \n\tgdp_growth     float null default 0.0, \n\tgdp            float null default 0.0 \n); \n \nCREATE UNIQUE INDEX us_state_uidx1 on us_state ( state ); \n \n \nINSERT INTO us_state \n    ( state_name,             state,  FIPS_code,  population, area_rank, area_sq_mi, fed_area, gdp_growth, gdp ) values \n\t( ''Alabama'',               ''AL'',     ''01'' ,      4903185,        25,      50750,     6,         2.0,   196.9  ), \n\t( ''Alaska'',                ''AK'',     ''02'' ,       731545,         1,     570641,    12,        -0.3,    52.3  ), \n\t( ''Arizona'',               ''AZ'',     ''04'' ,      7278717,         6,     113642,    12,         4.0,   309.1  ), \n\t( ''Arkansas'',              ''AR'',     ''05'' ,      3017825,        27,      52075,     8,         0.9,   115.9  ), \n\t( ''California'',            ''CA'',     ''06'' ,     39512223,         3,     155973,    12,         3.5,  2700.0  ), \n\t( ''Colorado'',              ''CO'',     ''08'' ,      5758736,         8,     103730,    10,         3.5,   336.4  ), \n\t( ''Connecticut'',           ''CT'',     ''09'' ,      3565387,        48,       4845,     1,         1.0,   242.2  ), \n\t( ''Delaware'',              ''DE'',     ''10'' ,       973764,        50,       1955,     3,         0.3,    63.9  ), \n\t( ''District of Columbia'',  ''DC'',     ''11'' ,       705749,        52,        137,     5,         3.2,  125.94  ), \n\t( ''Florida'',               ''FL'',     ''12'' ,     21477737,        26,      53997,     6,         3.5,   917.0  ), \n\t( ''Georgia'',               ''GA'',     ''13'' ,     10617423,        21,      57919,     6,         2.6,   522.4  ), \n\t( ''Hawaii'',                ''HI'',     ''15'' ,      1415872,        47,       6423,    12,         1.0,    80.8  ), \n\t( ''Idaho'',                 ''ID'',     ''16'' ,      1787065,        11,      82751,    12,         4.1,    69.9  ), \n\t( ''Illinois'',              ''IL'',     ''17'' ,     12671821,        24,      55593,     7,         2.1,   764.2  ), \n\t( ''Indiana'',               ''IN'',     ''18'' ,      6732219,        38,      35870,     7,         1.9,   326.1  ), \n\t( ''Iowa'',                  ''IA'',     ''19'' ,      3155070,        23,      55875,     7,         1.4,   170.7  ), \n\t( ''Kansas'',                ''KS'',     ''20'' ,      2913314,        13,      81823,    10,         1.9,   152.3  ), \n\t( ''Kentucky'',              ''KY'',     ''21'' ,      4467673,        36,      39732,     8,         1.4,   186.1  ), \n\t( ''Louisiana'',             ''LA'',     ''22'' ,      4648794,        33,      43566,    11,         1.1,   231.2  ), \n\t( ''Maine'',                 ''ME'',     ''23'' ,      1344212,        39,      30865,     1,         1.9,    56.7  ), \n\t( ''Maryland'',              ''MD'',     ''24'' ,      6045680,        42,       9775,     5,         1.6,   367.9  ), \n\t( ''Massachusetts'',         ''MA'',     ''25'' ,      6949503,        45,       7838,     1,         2.7,   501.3  ), \n\t( ''Michigan'',              ''MI'',     ''26'' ,      9986857,        22,      56539,     7,         2.7,   468.4  ), \n\t( ''Minnesota'',             ''MN'',     ''27'' ,      5639632,        14,      79617,     9,         2.2,   331.4  ), \n\t( ''Mississippi'',           ''MS'',     ''28'' ,      2976149,        31,      46914,     6,         1.0,   101.6  ), \n\t( ''Missouri'',              ''MO'',     ''29'' ,      6137428,        18,      68898,     8,         2.3,   282.2  ), \n\t( ''Montana'',               ''MT'',     ''30'' ,      1068778,         4,     145556,     9,         0.9,    44.8  ), \n\t( ''Nebraska'',              ''NE'',     ''31'' ,      1934408,        15,      76878,    10,         1.5,   112.2  ), \n\t( ''Nevada'',                ''NV'',     ''32'' ,      3080156,         7,     109806,    12,         3.2,   146.2  ), \n\t( ''New Hampshire'',         ''NH'',     ''33'' ,      1359711,        44,       8969,     1,         2.2,    75.6  ), \n\t( ''New Jersey'',            ''NJ'',     ''34'' ,      8882190,        46,       7419,     5,         2.0,   554.7  ), \n\t( ''New Mexico'',            ''NM'',     ''35'' ,      2096829,         5,     121365,    11,         1.8,    92.6  ), \n\t( ''New York'',              ''NY'',     ''36'' ,     19453561,        30,      47224,     2,         2.1,  1400.0  ), \n\t( ''North Carolina'',        ''NC'',     ''37'' ,     10488084,        29,      48718,     5,         2.9,   496.1  ), \n\t( ''North Dakota'',          ''ND'',     ''38'' ,       762062,        17,      68994,     9,         2.5,    51.2  ), \n\t( ''Ohio'',                  ''OH'',     ''39'' ,     11689100,        35,      40953,     4,         1.8,   601.5  ), \n\t( ''Oklahoma'',              ''OK'',     ''40'' ,      3956971,        19,      68679,    10,         1.8,   193.0  ), \n\t( ''Oregon'',                ''OR'',     ''41'' ,      4217737,        10,      96003,    12,         3.4,   213.7  ), \n\t( ''Pennsylvania'',          ''PA'',     ''42'' ,     12801989,        32,      44820,     4,         2.1,   712.1  ), \n\t( ''Puerto Rico'',           ''PR'',     ''72'' ,      3194000,        49,       3515,     2,         0.4,   101.0  ), \n\t( ''Rhode Island'',          ''RI'',     ''44'' ,      1059361,        51,       1034,     1,         0.6,    53.7  ), \n\t( ''South Carolina'',        ''SC'',     ''45'' ,      5148714,        40,      30111,     5,         1.6,   202.8  ), \n\t( ''South Dakota'',          ''SD'',     ''46'' ,       884659,        16,      75898,     9,         1.3,    45.9  ), \n\t( ''Tennessee'',             ''TN'',     ''47'' ,      6833174,        34,      41220,     6,         3.0,   322.9  ), \n\t( ''Texas'',                 ''TX'',     ''48'' ,     28995881,         2,     261914,    11,         3.2,  1700.0  ), \n\t( ''Utah'',                  ''UT'',     ''49'' ,      3205958,        12,      82168,    12,         4.3,   157.2  ), \n\t( ''Vermont'',               ''VT'',     ''50'' ,       623989,        43,       9249,     1,         1.2,    30.0  ), \n\t( ''Virginia'',              ''VA'',     ''51'' ,      8535519,        37,      39598,     5,         2.4,    71.3  ), \n\t( ''Virgin Islands'',        ''VI'',     ''78'' ,       106977,        53,         68,    12,         0.24,     3.85), \n\t( ''Washington'',            ''WA'',     ''53'' ,      7614893,        20,      66582,    12,         5.7,   506.7  ), \n\t( ''West Virginia'',         ''WV'',     ''54'' ,      1792147,        41,      24087,     5,         2.4,    71.3  ), \n\t( ''Wisconsin'',             ''WI'',     ''55'' ,      5822434,        25,      54314,     7,         2.5,   299.8  ), \n\t( ''Wyoming'',               ''WY'',     ''56'' ,       578759,         9,      97105,    10,         0.3,    38.4  ); \n \n \nCREATE TABLE name_list ( \n\tname_list_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\treal_name text check ( length(real_name) \u0026gt;= 1 ) not null, \n\tage int check ( age \u0026gt; 0 and age \u0026lt; 154 ) not  null,\t \n\tstate char varying (2) not null, \n\tpay numeric(10,2)  \n); \n \nCREATE INDEX name_list_idx1 on name_list ( real_name ); \nCREATE INDEX user_real_name_ci_idx1 ON name_list ((lower(real_name))); \n \nALTER TABLE name_list \n\tADD CONSTRAINT name_list_state_fk \n\tFOREIGN KEY (state) \n\tREFERENCES us_state (state) \n; \n \nINSERT INTO name_list ( real_name, age, state, pay ) values \n\t( ''Bob True'',            22, ''WY'', 31000 ), \n\t( ''Jane True'',           20, ''WY'', 28000 ), \n\t( ''Tom Ace'',             31, ''NJ'', 82500 ), \n\t( ''Steve Pen'',           33, ''NJ'', 89400 ), \n\t( ''Laura Jean Alkinoos'', 34, ''PA'', 120000 ), \n\t( ''Philip Schlump'',      62, ''WY'', 101200 ), \n\t( ''Liz Trubune'',         30, ''WY'', 48000 ), \n\t( ''Lary Smith'',          58, ''NJ'', 48000 ), \n\t( ''Dave Dave'',           21, ''NJ'', 48000 ), \n\t( ''Laura Ann Alkinoos'',  34, ''PA'', 48000 ) \n; \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should have both states and territories with square miles.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from us_state; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;reload data\u0026rdquo;,\u0026ldquo;drop cascade\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":13}' where homework_id = 'eb8720ed-335c-4ec3-5765-9043252dd582';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '00d77293-74f3-44fb-62c6-61dfd39eb544', 'Interactive - 14 - data types', '14', 'hw14.mp4', 'hw14.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'aef547eb-dda6-471c-4a1b-afb9b75fda11', 'data types' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'aef547eb-dda6-471c-4a1b-afb9b75fda11', '00d77293-74f3-44fb-62c6-61dfd39eb544' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'dcf649f1-9c24-4958-6d6e-7946416a011e', 14, 'SQL-Select', 'select ''PASS'' as x' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '32c704ce-4960-47bb-51d6-f9fa45303ce0', 14, 'hw14_2.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 14 - data types\u003c/h1\u003e\n\n\u003cp\u003eThis is really the stuff from chapter 3 in the book.\u003c/p\u003e\n\n\u003cp\u003eWhen we create a table,  ( Already created in the last homework when you ran the file )\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE us_state ( \n\tstate_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\tstate_name text NOT NULL, \n\tstate char varying (2) NOT NULL, \n\tFIPS_code char varying (2) NOT NULL, \n\tarea_rank int not null default 9999, \n\tarea_sq_mi numeric not null default 0 \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ewe specify that the columns have a \u0026ldquo;type\u0026rdquo; and constraints on the data.\u003c/p\u003e\n\n\u003cp\u003eThe most common set of types are (ordered from my own code on how frequently I use each type):\u003c/p\u003e\n\n\u003cp\u003e| Type               | Description                                                           |\n|--------------------|-----------------------------------------------------------------------|\n| text               | a string of 0 or more characters.                                     |\n| varchar(n)         | a string of 0 to \u003ccode\u003en\u003c/code\u003e characters.                                      |\n| uuid               | a UUID.                                                               |\n| date               | a date - not a time.                                                  |\n| time               | a time value.                                                         |\n| bigint, int8       | 8 byte integer                                                        |\n| timestamp          | a date and a time - usually with a time zone.                         |\n| numeric            | a large number with (think 130k digits, before/after decimal point)   |\n| decimal            | a large number with (think 130k digits, before/after decimal point)   |\n| float              | 4 byte - a floating point number with an exponent                     |\n| real               | 4 byte - a floating point number with an exponent                     |\n| json, jsonb        | JSON data                                                             |\n| double precision   | 8 byte - a floating point number with an exponent                     |\n| bit, varbit        | variable length bit string values                                     |\n| serial             | a 4 byte auto-generated integer that counts up                        |\n| interval           | a time interval can be +/- 178million years                           |\n| bytea              | byte array - binary data                                              |\n| boolean            | true/false                                                            |\n| point, line        | geometric data                                                        |\n| box, path          | geometric data                                                        |\n| polygon, cirlce    | geometric data                                                        |\n| tvector, tsquery   | full text search type                                                 |\n| inet, cidr         | interget address tyeps, IPv4 122.4.3.22 or IPV6                       |\n| user defined tyeps | The type system is extensible!                                        |\u003c/p\u003e\n\n\u003cp\u003eAlso there is a Geographic Information Package for PostgreSQL that is very good.\nIt is built on top of the geometric data types and GIN indexes.\u003c/p\u003e\n\n\u003cp\u003eWe are not going to use all of these types.  Just a few of the most common ones like timestamp.\u003c/p\u003e\n\n\u003cp\u003eOften we want a column to show when a new row is inserted or updated in a table.\nLet\u0026rsquo;s add these to our name_list table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eALTER TABLE name_list add updated timestamp ; \nALTER TABLE name_list add created timestamp  \n\tdefault current_timestamp not null  ; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTo make the \u0026lsquo;updated\u0026rsquo; column work we need have PostgreSQL run some\ncode when an update happens.  This kind of a thing is called a \u0026ldquo;trigger\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s add a trigger to the table.\u003cbr /\u003e\nRun the file \u003ccode\u003ehw14_2.sql\u003c/code\u003e.  The contents of the file is shown below.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nCREATE OR REPLACE function name_list_upd() \nRETURNS trigger AS  \n$$  \nBEGIN  \n  NEW.updated := current_timestamp;  \n  RETURN NEW;  \nEND  \n$$ \nLANGUAGE ''plpgsql''; \n \n \nCREATE TRIGGER name_list_trig \n\tBEFORE update ON name_list \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE name_list_upd(); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow when we do an update on this table it will set the updated field\nto the current time.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;data types\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":14}' where homework_id = '00d77293-74f3-44fb-62c6-61dfd39eb544';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '7fc63507-6c8c-4720-5403-d3c384862ebe', 'Interactive - 15 - select with group data of data', '15', 'hw15.mp4', 'hw15.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '54b805ff-fc00-4a30-6597-42ba202303ef', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_tag ( tag_id, tag_word ) values ( '797d195a-34e3-4246-64fb-e6e8ef721ef7', 'max' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '797d195a-34e3-4246-64fb-e6e8ef721ef7', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_tag ( tag_id, tag_word ) values ( '0f5f14e1-98e7-4d70-7a91-8cd62962762f', 'avg' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '0f5f14e1-98e7-4d70-7a91-8cd62962762f', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_tag ( tag_id, tag_word ) values ( '58fe99e3-6256-42f2-595f-af6ddfe630d3', 'group by' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '58fe99e3-6256-42f2-595f-af6ddfe630d3', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_tag ( tag_id, tag_word ) values ( 'f907d867-0484-4e92-7cb5-a5f504f1162c', 'order by' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f907d867-0484-4e92-7cb5-a5f504f1162c', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fc7b907a-a811-4f8e-7cca-75717e68b17b', 'nested query' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fc7b907a-a811-4f8e-7cca-75717e68b17b', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_tag ( tag_id, tag_word ) values ( '49c733dd-dedf-44f9-68af-f32746342cbc', 'sub query' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '49c733dd-dedf-44f9-68af-f32746342cbc', '7fc63507-6c8c-4720-5403-d3c384862ebe' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'd99d2486-bf20-4472-6fd5-461786bed8ca', 15, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 15 - select with group data of data\u003c/h1\u003e\n\n\u003cp\u003eSQL has the ability to group data.  When we use the count() function\nwe are grouping by data.  You can only group by data that you\nselect - you can not group by hidden columns.   However you can\nuse a nested select to pick just some of the columns after you\nhave grouped.  The last part of this homework will show this.\nFirst we have to group the data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT  \n\t\tfed_area, \n\t\tmin(gdp_growth) as max_growth, \n\t\tavg(gdp_growth) as avg_growth, \n\t\tmax(gdp_growth) as min_growth, \n\t\tstring_agg(state, '','' ORDER BY state) as  state_list \n\tFROM us_state \n\tGROUP BY fed_area \n\tORDER BY fed_area \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou can group by more than one column.  All the non-grouped columns\nhave to be in some form aggregated.   In this example we have min, max, avg\nand string_agg.\u003c/p\u003e\n\n\u003cp\u003eTo group columns the database has to sort them.  So an order by is usually\nfree.  If you group by a column that there is a b-tree index on the group\nby is much faster.   The database will use the index instead of re-sorting\nthe data.  Other index types do not provide sorted data (gin, gist, hash etc).\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s say we just want the avg_growth and the list of states.  We\nhave to have fed_area to do the grouping - but we can nest\nour select.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT t1.avg_growth, t1.state_list \n\tFROM ( \n\t\tSELECT  \n\t\t\t\tt2.fed_area, \n\t\t\t\tavg(t2.gdp_growth) as avg_growth, \n\t\t\t\tstring_agg(t2.state, '','' ORDER BY state) as  state_list \n\t\t\tFROM us_state as t2 \n\t\t\tGROUP BY t2.fed_area \n\t) as t1 \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eTake Away\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003egroup by\u003c/li\u003e\n\u003cli\u003eorder by\u003c/li\u003e\n\u003cli\u003emin/avg/max\u003c/li\u003e\n\u003cli\u003enested selects in FROM\u003c/li\u003e\n\u003cli\u003eAliasing tables int the \u0026ldquo;FROM\u0026rdquo; with \u0026ldquo;as\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBook\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003egroup by - page 120 to 121\u003c/li\u003e\n\u003cli\u003emin, max - page 119\u003c/li\u003e\n\u003cli\u003eavg - 64, 195\u003c/li\u003e\n\u003cli\u003eorder by - page 15, 16\u003c/li\u003e\n\u003cli\u003ealias table name - page 86\u003c/li\u003e\n\u003cli\u003enested query in From - page 195 (avg used also)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;min\u0026rdquo;,\u0026ldquo;max\u0026rdquo;,\u0026ldquo;avg\u0026rdquo;,\u0026ldquo;group by\u0026rdquo;,\u0026ldquo;order by\u0026rdquo;,\u0026ldquo;nested query\u0026rdquo;,\u0026ldquo;sub query\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":15}' where homework_id = '7fc63507-6c8c-4720-5403-d3c384862ebe';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2a090e0a-f9bc-453c-43a7-bc3b10316e87', 'Interactive - 16 - count matching rows in a select', '16', 'hw16.mp4', 'hw16.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '58fe99e3-6256-42f2-595f-af6ddfe630d3', '2a090e0a-f9bc-453c-43a7-bc3b10316e87' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '0f5f14e1-98e7-4d70-7a91-8cd62962762f', '2a090e0a-f9bc-453c-43a7-bc3b10316e87' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f907d867-0484-4e92-7cb5-a5f504f1162c', '2a090e0a-f9bc-453c-43a7-bc3b10316e87' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '8953a0bd-aa09-4933-41e3-650e81af7a54', 16, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 16 - count matching rows in a select\u003c/h1\u003e\n\n\u003cp\u003eYou can count stuff that is grouped.   This turns out to be very useful.\u003c/p\u003e\n\n\u003cp\u003eSuppose that we want to know how many states are in a group and the\nsum of the population in the group.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT  \n\t\tfed_area, \n\t\tround(avg(gdp_growth)::numeric,2)::text||''%'' as avg_growth, \n\t\tsum(population) as sum_population, \n\t\tcount(state) as no_of_states, \n\t\tstring_agg(state, '','' ORDER BY state) as  state_list \n\tFROM us_state \n\tGROUP BY fed_area \n\tORDER BY 2 desc \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get 12 rows order by decreasing average growth.\u003c/p\u003e\n\n\u003ch2\u003eTake Away\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eYou can count the number of rows in the group with count.\u003c/li\u003e\n\u003cli\u003eYou can order by a column position this is the \u0026ldquo;2 desc\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eThe function round() takes a numeric argument - but the output of avg() is a double precision float.  A type cast is used.\u003c/li\u003e\n\u003cli\u003eYou can convert from the numeric result of round to text with a \u0026ldquo;::text\u0026rdquo; type cast - then add the \u0026lsquo;%\u0026rsquo; to show it is a percentage.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBook\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003egroup by - page 120 to 121\u003c/li\u003e\n\u003cli\u003eavg - 64\u003c/li\u003e\n\u003cli\u003eorder by - page 15, 16\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;group by\u0026rdquo;,\u0026ldquo;avg\u0026rdquo;,\u0026ldquo;order by\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":16}' where homework_id = '2a090e0a-f9bc-453c-43a7-bc3b10316e87';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '7c141fce-a910-4c67-5cf8-ad8e78583b95', 'Interactive - 17 - select with join ( inner join, left outer join )', '17', 'hw17.mp4', 'hw17.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a27a0baa-dc35-45cb-41d7-8b7e656835d0', 'inner join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a27a0baa-dc35-45cb-41d7-8b7e656835d0', '7c141fce-a910-4c67-5cf8-ad8e78583b95' );
insert into ct_tag ( tag_id, tag_word ) values ( 'f167fd30-6290-4ffe-56d1-dc54a27dd466', 'outer join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f167fd30-6290-4ffe-56d1-dc54a27dd466', '7c141fce-a910-4c67-5cf8-ad8e78583b95' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a8dc2fb2-4813-42b4-4f2a-4a6ce0866e68', 'left outer join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a8dc2fb2-4813-42b4-4f2a-4a6ce0866e68', '7c141fce-a910-4c67-5cf8-ad8e78583b95' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '16fdc982-cc84-486f-443d-214250107641', 17, 'SQL-Select', 'select ''PASS'' as x' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'be70ce95-59bc-4d3a-4a99-f164c7cf4f32', 17, 'hw17_1.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 17 - select with join ( inner join, left outer join )\u003c/h1\u003e\n\n\u003cp\u003eSQL starts to get fun, and become a programming task as soon\nas we have more than one table.\u003c/p\u003e\n\n\u003cp\u003eWe have already seen a join between name_list and us_state based\non state code.  Let\u0026rsquo;s get specific on how joins work and how\nto use them.\u003c/p\u003e\n\n\u003cp\u003eThe most common join is the \u0026ldquo;inner\u0026rdquo; join.   This is when two\ntables have a common field and we match that field.\u003c/p\u003e\n\n\u003cp\u003eThe SQL system takes the first table and creates a loop that\nwill iterate across the 2nd table and where the field matches\nit connects (joins) the data together.\u003c/p\u003e\n\n\u003cp\u003eThis is all based on sets of data.\u003c/p\u003e\n\n\u003cp\u003eSuppose that we have 2 tables, employees and departments.\u003c/p\u003e\n\n\u003ch4\u003eEmployee Table\u003c/h4\u003e\n\n\u003cp\u003e| Name               | Dept Code |  Pay        |\n|--------------------|-----------|-------------|\n| Bob                |   1       | $36,000.00  |\n| Jane               |   1       | $140,000.00 |\n| Sally              |   2       | $121,000.00 |\n| Liz                |   2       | $101,000.00 |\n| Dave               |   1       | $51,000,00  |\n| CEO Kelly          |   3       | $1.00       |\n| Uncle Bob          |   NULL    | $96,000.00  |\n| Brother Charley    |   NULL    | $48,000.00  |\u003c/p\u003e\n\n\u003ch4\u003eDepartment\u003c/h4\u003e\n\n\u003cp\u003e| Department         | Dept Code |\n|--------------------|-----------|\n| Sales              |   1       |\n| Development        |   2       |\n| Executive          |   3       |\n| Maintenance        |   4       |\u003c/p\u003e\n\n\u003cp\u003eBoth tables have \u003ccode\u003eDept_Code\u003c/code\u003e and by matching them\nup we can find that Sally and Liz and the\u003cbr /\u003e\nDevelopment Department.\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003ehw17_1.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE if exists employee; \nDROP TABLE if exists department; \n \nCREATE TABLE employee ( \n\temployee_id serial not null primary key, \n\tname text not null, \n\tdepartment_id  int, \n\tpay numeric(12,2) not null default 0 \n); \n \nCREATE TABLE department ( \n\tdepartment_id  serial not null primary key, \n\tdept_name text not null \n); \n \nINSERT INTO department ( department_id, dept_name ) values \n\t( 1, ''Sales'' ), \n\t( 2, ''Development'' ), \n\t( 3, ''Execuatie'' ), \n\t( 4, ''Maintenance'' ) \n; \n \nINSERT INTO employee (  name, department_id, pay ) values\t \n\t( ''Bob'', 1, 36000 ), \n\t( ''Jane'', 1, 140000 ), \n\t( ''Sally'', 2, 121000 ), \n\t( ''Liz'', 2, 101000 ), \n\t( ''Dave'', 1, 51000 ), \n\t( ''CEO Kelly'', 3, 1 ), \n\t( ''Uncle Bob'', NULL, 96000 ), \n\t( ''Brother Charley'', NULL, 48000 ) \n; \n \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe have created the table department with a set of used IDs, 1..4.  We need\nto update the number generator for the \u003ccode\u003eserial\u003c/code\u003e data to reflect this.\nIf we don\u0026rsquo;t it will start with 1 and we have already used 1.  We will not\nbe able to insert data into it.\u003c/p\u003e\n\n\u003cp\u003eThe command to do this is:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eALTER SEQUENCE department_department_id_seq RESTART WITH 5; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eHowever you will want to be able to generate this kind of an alter.\nThe name for the sequence is,  the table name, concatenated with\nan underscore, then the column name, then \u003ccode\u003e_seq\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInner Join\u003c/h2\u003e\n\n\u003cp\u003eThis is the set that both tables have in common.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"PostgreSQL-Inner-Join.png\" alt=\"PostgreSQL Inner Join\" /\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT t1.name as \u0026quot;Employee Name\u0026quot;, t2.dept_name as \u0026quot;Department Name\u0026quot;, t1.pay \u0026quot;Year pay\u0026quot; \n\tFROM employee as t1 \n\t\tJOIN department as t2 on ( t1.department_id = t2.department_id ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 6 rows.  Note that \u0026ldquo;Uncle Bob\u0026rdquo; fails to show up.\nThis is an inner join - where the common field is not null.\u003c/p\u003e\n\n\u003cp\u003eNote the double quotes \u003ccode\u003e\u0026quot;\u003c/code\u003e around the column names to allow for upper-lower\ncase aliases on column names.\u003c/p\u003e\n\n\u003cp\u003eWe can get the database to fill in NULLs for all the values for\n\u003ccode\u003eUncle Bob\u003c/code\u003e.  This is a left outer join.  This is the 2nd most common\njoin.\u003c/p\u003e\n\n\u003ch2\u003eLeft Outer Join\u003c/h2\u003e\n\n\u003cp\u003eThis is all the rows in the FROM table joined to the right table\nor NULLs where they don\u0026rsquo;t join.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"PostgreSQL-Left-Outer-Join.png\" alt=\"Left Outer Join\" /\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT t1.name as \u0026quot;Employee Name\u0026quot;, t2.dept_name as \u0026quot;Department Name\u0026quot;, t1.pay \u0026quot;Year Pay\u0026quot; \n\tFROM employee as t1 \n\t\tLEFT OUTER JOIN department as t2 on ( t1.department_id = t2.department_id ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow you should get back 8 rows including \u0026ldquo;Uncle Bob\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eNow we can answer the question how many people are not in departments and\nhow much do they get payed.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECt t1.name as \u0026quot;Employee Name\u0026quot;, t2.dept_name as \u0026quot;Department Name\u0026quot;, t1.pay \u0026quot;Year Pay\u0026quot; \n\tFROM employee as t1 \n\t\tLEFT OUTER JOIN department as t2 on ( t1.department_id = t2.department_id ) \n\tWHERE t1.department_id is null \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eor how much pay is spent on employees not in departments.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT sum(t0.pay) as \u0026quot;Total Pay\u0026quot; \nFROM ( \n\tSELECT t1.name, t2.dept_name, t1.pay  \n\tFROM employee as t1 \n\t\tleft outer join department as t2 on ( t1.department_id = t2.department_id ) \n\tWHERE t1.department_id is null \n) t0 \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eInteresting \u0026hellip;. That is $144,000.00 payed out to employees that aren\u0026rsquo;t in\ndepartments.\u003c/p\u003e\n\n\u003cp\u003eThere are \u0026ldquo;right\u0026rdquo; joins but usually I just swap the order of the tables and use the left joins.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;inner join\u0026rdquo;,\u0026ldquo;outer join\u0026rdquo;,\u0026ldquo;left outer join\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":17}' where homework_id = '7c141fce-a910-4c67-5cf8-ad8e78583b95';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '38772f84-a326-4b1f-705a-1d62c23fa559', 'Interactive - 18 - More joins (full joins)', '18', 'hw18.mp4', 'hw18.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '39e222fa-d46f-417a-51ec-45f70af4ab2c', 'full join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '39e222fa-d46f-417a-51ec-45f70af4ab2c', '38772f84-a326-4b1f-705a-1d62c23fa559' );
insert into ct_tag ( tag_id, tag_word ) values ( '709320ad-f07c-4150-7310-f66df2058558', 'full outer join' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '709320ad-f07c-4150-7310-f66df2058558', '38772f84-a326-4b1f-705a-1d62c23fa559' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '61a4a6bd-fd96-4d77-5a1c-4324263a955c', 18, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 18 - More joins (full joins)\u003c/h1\u003e\n\n\u003cp\u003eWe will use the same data (hw17_1.sql)\u003c/p\u003e\n\n\u003ch4\u003eEmployee Table\u003c/h4\u003e\n\n\u003cp\u003e| Name               | Dept Code |  Pay        |\n|--------------------|-----------|-------------|\n| Bob                |   1       | $36,000.00  |\n| Jane               |   1       | $140,000.00 |\n| Sally              |   2       | $121,000.00 |\n| Liz                |   2       | $101,000.00 |\n| Dave               |   1       | $51,000,00  |\n| CEO Kelly          |   3       | $1.00       |\n| Uncle Bob          |   NULL    | $96,000.00  |\n| Brother Charley    |   NULL    | $48,000.00  |\u003c/p\u003e\n\n\u003ch4\u003eDepartment\u003c/h4\u003e\n\n\u003cp\u003e| Department         | Dept Code |\n|--------------------|-----------|\n| Sales              |   1       |\n| Development        |   2       |\n| Executive          |   3       |\n| Maintenance        |   4       |\u003c/p\u003e\n\n\u003ch2\u003eFull Join\u003c/h2\u003e\n\n\u003cp\u003eThis is more of a concatenation of rows of data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"PostgreSQL-Full-Outer-Join.png\" alt=\"Full Outer Join\" /\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT t1.name as \u0026quot;Employee Name\u0026quot;, t2.dept_name as \u0026quot;Department Name\u0026quot;, t1.pay \u0026quot;Year pay\u0026quot; \n\tFROM employee as t1 \n\t\tFULL JOIN  department as t2 on ( t1.department_id = t2.department_id ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou shoudl get back 9 rows - note where the NULL values are.\u003c/p\u003e\n\n\u003ch2\u003eFull Outer Join - Unique to Both tables Rows\u003c/h2\u003e\n\n\u003cp\u003eYou can also use the join to find the rows that are unique in each table.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"PostgreSQL-Full-Outer-Unique-Join.png\" alt=\"PostgreSQL Inner Join\" /\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT t1.name as \u0026quot;Employee Name\u0026quot;, t2.dept_name as \u0026quot;Department Name\u0026quot;, t1.pay \u0026quot;Year pay\u0026quot; \n\tFROM employee as t1 \n\t\tFULL JOIN department as t2 on ( t1.department_id = t2.department_id ) \n\tWHERE t1.name is null  \n\t   OR t2.dept_name is null \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 3 rows.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;full join\u0026rdquo;,\u0026ldquo;full outer join\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":18}' where homework_id = '38772f84-a326-4b1f-705a-1d62c23fa559';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '06e1e193-2e05-4fe7-7a0e-14337af78a39', 'Interactive - 19 - select using sub-query and exists', '19', 'hw19.mp4', 'hw19.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'bbbaeb5c-bd5a-4a07-5518-2a05c45d218a', 'select exists' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bbbaeb5c-bd5a-4a07-5518-2a05c45d218a', '06e1e193-2e05-4fe7-7a0e-14337af78a39' );
insert into ct_tag ( tag_id, tag_word ) values ( 'bc61d099-2ff5-4e98-5262-7742a5144a46', 'sub-query' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bc61d099-2ff5-4e98-5262-7742a5144a46', '06e1e193-2e05-4fe7-7a0e-14337af78a39' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '05f71849-d098-4de0-6460-b25cac529c92', 19, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 19 - select using sub-query and exists\u003c/h1\u003e\n\n\u003cp\u003eLet\u0026rsquo;s use some of our joins to delete some data.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s get rid of the people that are not in a department.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT t0.name as \u0026quot;Employee Name\u0026quot;, t0.dept_name as \u0026quot;Department Name\u0026quot;, t0.pay \u0026quot;Year Pay\u0026quot; \n\tFROM  ( \n\t\t\tSELECT t1.name, t2.dept_name, t1.pay, t1.employee_id \n\t\t\tFROM employee as t1 \n\t\t\t\tLEFT OUTER join department as t2 on ( t1.department_id = t2.department_id ) \n\t\t\tWHERE t1.department_id is null \n\t\t\tORDER BY 1, 3 desc, 4 \n\t\t) as t0 \n\tWHERE  \n\t\texists ( \n\t\t\tSELECT ''found'' \n\t\t\tFROM employee as t5 \n\t\t\tWHERE t5.pay \u0026gt; 65000 \n\t\t\t  and t5.employee_id = t0.employee_id \n\t\t) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 2 rows.\u003c/p\u003e\n\n\u003cp\u003eThese rows should be the offending rows with the department-less employees.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;select exists\u0026rdquo;,\u0026ldquo;sub-query\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":19}' where homework_id = '06e1e193-2e05-4fe7-7a0e-14337af78a39';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '3a303679-223c-4469-4345-a7a892d6be58', 'Interactive - 20 - delete with in based sub-query', '20', 'hw20.mp4', 'hw20.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '8a131122-58bf-449c-4ffd-a975aa269656', 'delete exists' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8a131122-58bf-449c-4ffd-a975aa269656', '3a303679-223c-4469-4345-a7a892d6be58' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bc61d099-2ff5-4e98-5262-7742a5144a46', '3a303679-223c-4469-4345-a7a892d6be58' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'db54debd-169c-428a-791c-20ab3f083a03', 20, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 20 - delete with in based sub-query\u003c/h1\u003e\n\n\u003cp\u003eLet\u0026rsquo;s use some of our joins to delete some data.\u003c/p\u003e\n\n\u003cp\u003eWe will recreate the data from homework 17 again.  The file is hw17_1.sql\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE if exists employee; \nDROP TABLE if exists department; \n \nCREATE TABLE employee ( \n\temployee_id serial not null primary key, \n\tname text not null, \n\tdepartment_id  int, \n\tpay numeric(12,2) not null default 0 \n); \n \nCREATE TABLE department ( \n\tdepartment_id  serial not null primary key, \n\tdept_name text not null \n); \n \nINSERT INTO department ( department_id, dept_name ) values \n\t( 1, ''Sales'' ), \n\t( 2, ''Development'' ), \n\t( 3, ''Execuatie'' ), \n\t( 4, ''Maintenance'' ) \n; \n \nINSERT INTO employee (  name, department_id, pay ) values\t \n\t( ''Bob'', 1, 36000 ), \n\t( ''Jane'', 1, 140000 ), \n\t( ''Sally'', 2, 121000 ), \n\t( ''Liz'', 2, 101000 ), \n\t( ''Dave'', 1, 51000 ), \n\t( ''CEO Kelly'', 3, 1 ), \n\t( ''Uncle Bob'', NULL, 96000 ), \n\t( ''Brother Charley'', NULL, 48000 ) \n; \n \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eLet\u0026rsquo;s get rid of the people that are not in a department.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDELETE FROM employee as t0 \n\tWHERE t0.employee_id in ( \n\t\tSELECT t1.employee_id \n\t\tFROM employee as t1 \n\t\t\tLEFT OUTER join department as t2 on ( t1.department_id = t2.department_id ) \n\t\tWHERE t1.department_id is null \n\t) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt should delete 2 rows.\u003c/p\u003e\n\n\u003cp\u003eThere are performance reasons to use either exists or in.  Exists combines the queries and is better when the tables are similar in size.\nIn is usually better when the left table is much smaller than the parent table.  In results in the inside query running to completion\nbefore the outside query.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;delete exists\u0026rdquo;,\u0026ldquo;sub-query\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":20}' where homework_id = '3a303679-223c-4469-4345-a7a892d6be58';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a9b3e6d6-dbbb-4ae8-7f52-e24e1554a68d', 'Interactive - 21 - select with union / minus', '21', 'hw21.mp4', 'hw21.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '7559221a-10a2-4567-726b-451aa72ac4a9', 'union' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '7559221a-10a2-4567-726b-451aa72ac4a9', 'a9b3e6d6-dbbb-4ae8-7f52-e24e1554a68d' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'e62952a5-5845-4208-6740-a2bbba5e70b9', 21, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 21 - select with union / minus\u003c/h1\u003e\n\n\u003cp\u003eYou can concatenate results with a \u0026ldquo;UNION\u0026rdquo; between two selects.  This can be kind of like a full join\nbut instead of getting back nulls you can fill in values that you like.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\tSELECT t1.name as \u0026quot;Employee Name\u0026quot;, ''No Departmnt'' \u0026quot;Department Name\u0026quot;, t1.pay \u0026quot;Year Pay\u0026quot; \n\tFROM employee as t1 \n\tWHERE t1.department_id is null \nUNION \n\tSELECT ''No Name'' as \u0026quot;Employee Name\u0026quot;, t2.dept_name as \u0026quot;Department Name\u0026quot;, 0.0 \u0026quot;Year Pay\u0026quot; \n\tFROM department as t2  \nORDER BY 1 \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 4 rows.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;union\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":21}' where homework_id = 'a9b3e6d6-dbbb-4ae8-7f52-e24e1554a68d';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a9a18c97-8b3a-4f3e-5c11-8264a04421f2', 'Interactive - 22 - recursive select - populating existing tables', '22', 'hw22.mp4', 'hw22.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fba20a6c-3ba2-4bee-5f96-9c50e019d59f', 'recursive select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fba20a6c-3ba2-4bee-5f96-9c50e019d59f', 'a9a18c97-8b3a-4f3e-5c11-8264a04421f2' );
insert into ct_tag ( tag_id, tag_word ) values ( '3ccc50a2-73fb-44f1-5035-5347fecc053d', 'recursive' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3ccc50a2-73fb-44f1-5035-5347fecc053d', 'a9a18c97-8b3a-4f3e-5c11-8264a04421f2' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '7f1b1274-8d83-4a84-6ba3-5a38f38c80b7', 22, 'SQL-Select', 'select ''PASS'' as x' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '40617ad4-0e6d-4a73-6a8a-b318d77a7772', 22, 'hw22_1.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 22 - recursive select - populating existing tables\u003c/h1\u003e\n\n\u003cp\u003eIt is also possible to store and query recursive data.   You need a table\nwith and \u0026ldquo;id\u0026rdquo; and a \u0026ldquo;parent_id\u0026rdquo; that referees back to the same table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists tree_example ; \n \nCREATE TABLE tree_example ( \n\tid  \t\t\tint not null primary key, \n\tmanager_id  \tint, \n\tname \t\t\ttext \n); \n \nINSERT INTO tree_example ( id, name, manager_id ) values \n\t(1, ''Michael North'', NULL), \n\t(2, ''Megan Berry'', 1), \n\t(3, ''Sarah Berry'', 1), \n\t(4, ''Zoe Black'', 1), \n\t(5, ''Tim James'', 1), \n\t(6, ''Bella Tucker'', 2), \n\t(7, ''Ryan Metcalfe'', 2), \n\t(8, ''Max Mills'', 2), \n\t(9, ''Benjamin Glover'', 2), \n\t(10, ''Carolyn Henderson'', 3), \n\t(11, ''Nicola Kelly'', 3), \n\t(12, ''Alexandra Climo'', 3), \n\t(13, ''Dominic King'', 3), \n\t(14, ''Leonard Gray'', 4), \n\t(15, ''Eric Rampling'', 4), \n\t(16, ''Piers Paige'', 7), \n\t(17, ''Ryan Henderson'', 7), \n\t(18, ''Frank Tucker'', 8), \n\t(19, ''Nathan Ferguson'', 8), \n\t(20, ''Kevin Rampling'', 8) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we can to a recursive query.   In PostgreSQL they are composed of a base query\nunironed with all the children.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eWITH RECURSIVE subordinates AS ( \n\t\tSELECT \n\t\t\tid, \n\t\t\tmanager_id, \n\t\t\tname \n\t\tFROM tree_example \n\t\tWHERE id = 2 \n\tUNION \n\t\tSELECT \n\t\t\te.id, \n\t\t\te.manager_id, \n\t\t\te.name \n\t\tFROM tree_example e \n\t\tINNER JOIN subordinates s ON s.id = e.manager_id \n) SELECT * FROM subordinates \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;recursive select\u0026rdquo;,recursive\u003c/h4\u003e\n","Lesson_no":22}' where homework_id = 'a9a18c97-8b3a-4f3e-5c11-8264a04421f2';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'aeec9b15-6acb-409f-6992-56a1387761e6', 'Interactive - 23 - with - pre-selects to do stuff.', '23', 'hw23.mp4', 'hw23.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a962c404-2bab-473d-7488-c67162e041c2', 'with' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a962c404-2bab-473d-7488-c67162e041c2', 'aeec9b15-6acb-409f-6992-56a1387761e6' );
insert into ct_tag ( tag_id, tag_word ) values ( 'e26277db-839b-493c-6b29-a9b4c8b0fcf0', 'with select' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'e26277db-839b-493c-6b29-a9b4c8b0fcf0', 'aeec9b15-6acb-409f-6992-56a1387761e6' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'd93970fb-2643-44cb-7fc5-078553d45f79', 23, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 23 - with - pre-selects to do stuff.\u003c/h1\u003e\n\n\u003cp\u003eYou can run queries before your main query and give the results names.\nThese are run in order and that can have substantial advantages.\u003c/p\u003e\n\n\u003cp\u003eThe general syntax is\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewith \n\ttemp_name as ( select ... ) \n \nselect stufff. \n \n\tfrom  temp_name \n \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode\u003eWITH \n\tmystery_employess as ( select sum(pay) total_pay  from name_list where state = ''WY'' ), \n\tnormal_employees as ( select sum(pay) total_pay from name_list where state in ( ''NJ'', ''NY'' ) ) \nSELECT round( ( tWY.total_pay / ( tWY.total_pay + tEast.total_pay ) ) * 100.0, 2)  as relative_pay \nFROM  \n\tmystery_employess  as tWY \n\t, normal_employees  as tEast \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back a single row of data that tells you that in Wyoming you get 43% as much pay\nas a job in NY or NJ (Note that the data in this example is not totally accurate.  Also you have\na much lower cost of living in Wyoming than you do in NY NY.)\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;with\u0026rdquo;,\u0026ldquo;with select\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":23}' where homework_id = 'aeec9b15-6acb-409f-6992-56a1387761e6';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a3aa8178-c19d-462f-7985-7fd3666e0ad1', 'Interactive - 24 - truncate table', '24', 'hw24.mp4', 'hw24.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '734f46f1-c5b7-4eae-61f8-9cb6712aaf91', 'truncate' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '734f46f1-c5b7-4eae-61f8-9cb6712aaf91', 'a3aa8178-c19d-462f-7985-7fd3666e0ad1' );
insert into ct_tag ( tag_id, tag_word ) values ( '9d4aeb5d-5177-4d71-7576-4ebc360fc61f', 'fast delete' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9d4aeb5d-5177-4d71-7576-4ebc360fc61f', 'a3aa8178-c19d-462f-7985-7fd3666e0ad1' );
insert into ct_tag ( tag_id, tag_word ) values ( '97e1856e-35f5-40cf-43a9-70b78149bd47', 'delete all rows' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '97e1856e-35f5-40cf-43a9-70b78149bd47', 'a3aa8178-c19d-462f-7985-7fd3666e0ad1' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'a8430a98-347a-46da-4478-9a850c11385e', 24, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 24 - truncate table\u003c/h1\u003e\n\n\u003cp\u003ePostgreSQL (and most other SQL databases, Oracle, DB/2, DB/2 Universal etc)\nprovide the ability to discard ALL the data in a table.     This is implemented\nas a re-write of the table header info and putting all the data in the table\non the re-claim block list.  So it is linear time(fast).\u003c/p\u003e\n\n\u003cp\u003eAlso it is a part of the Data Definition Language (not Data Manipulation)\nso it often can not be used in a transaction.  It can not be rolled back\nif the transaction fails.\u003c/p\u003e\n\n\u003cp\u003eAlso when you use truncate stuff like triggers for delete will not fire.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eTRUNCATE TABLE name_list; \nSELECT count(1) from name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 0 rows.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;truncate\u0026rdquo;,\u0026ldquo;fast delete\u0026rdquo;,\u0026ldquo;delete all rows\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":24}' where homework_id = 'a3aa8178-c19d-462f-7985-7fd3666e0ad1';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'dfd6d7f6-1382-40fb-7685-f964ae2a9493', 'Interactive - 25 - drop cascade', '25', 'hw25.mp4', 'hw25.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'bbd47a5b-4f9d-4aa8-452b-3305e88fabce', 'drop' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'bbd47a5b-4f9d-4aa8-452b-3305e88fabce', 'dfd6d7f6-1382-40fb-7685-f964ae2a9493' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c9324179-6b95-4ef6-4ef3-81402132fab9', 'dfd6d7f6-1382-40fb-7685-f964ae2a9493' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '156a21da-2aca-4781-4c1a-5226e6a17dec', 25, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 25 - drop cascade\u003c/h1\u003e\n\n\u003cp\u003eYou can drop a table or other database object.  This destroys it.\nPostgreSQL provides the ability to do the \u0026ldquo;drop\u0026rdquo; but only if\nthe object exists.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop table name_list; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWill error if the object is not there.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists name_list cascade; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDrop can also detach a table from the set of constraints that it\nmay have.  This is the \u0026ldquo;cascade\u0026rdquo; option to remove foreign\nkey constraints.  Do note that in Oracle this will drop\nadditional tables - not just constraints.  Take care with\n\u0026ldquo;cascade\u0026rdquo;.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists us_state cascade; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eLet\u0026rsquo;s re-create our tables at this point so we have fresh\ndata for future homework problems.\u003c/p\u003e\n\n\u003cp\u003eRun the file to re-create : hw13_4.sql\u003c/p\u003e\n\n\u003cp\u003edrop table if exists us_state cascade;\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;drop\u0026rdquo;,\u0026ldquo;drop cascade\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":25}' where homework_id = 'dfd6d7f6-1382-40fb-7685-f964ae2a9493';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '64d73627-1fb5-42b4-62ec-c37a6d02b15d', 'Interactive - 26 - 1 to 1 relationship  				(pk to pk)', '26', 'hw26.mp4', 'hw26.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '031f708c-402c-499d-4cae-ece205ad2893', 'setup' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '031f708c-402c-499d-4cae-ece205ad2893', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd8e6fd58-a0f7-4b50-7a90-cbd2a4741ca5', 'ct_homework' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd8e6fd58-a0f7-4b50-7a90-cbd2a4741ca5', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( 'b3292301-132d-41a5-765d-225468f1e353', 'ct_homework_ans' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'b3292301-132d-41a5-765d-225468f1e353', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( 'fc64d9f8-4da5-4864-7acf-5eb8363b88ee', 'ct_tag' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'fc64d9f8-4da5-4864-7acf-5eb8363b88ee', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( '61c1c6a0-bc67-4954-49ae-d57b47fc9e0c', 'ct_tag_homework' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '61c1c6a0-bc67-4954-49ae-d57b47fc9e0c', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( '42851d7b-cf8f-463c-58fe-8dd725b97656', 't_ymux_user' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '42851d7b-cf8f-463c-58fe-8dd725b97656', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( '1c737798-e392-4c6d-4f52-64e93954d979', 't_ymux_user_log' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1c737798-e392-4c6d-4f52-64e93954d979', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_tag ( tag_id, tag_word ) values ( '29e9f931-3d0d-4427-4d1e-b37392ae699c', 't_ymux_auth_token' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '29e9f931-3d0d-4427-4d1e-b37392ae699c', '64d73627-1fb5-42b4-62ec-c37a6d02b15d' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'e9e46898-db98-4700-591b-6f474299513b', 26, 'SQL-Select', 'select setup_data_26()' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'edacdba8-2179-420e-5a05-9cbd4a934e86', 26, 'hw26_01.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'a8843cd5-270f-4929-60ce-f929663fbac4', 26, 'hw26_02.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '7d47efb4-a081-4ddc-44e9-356d95bb9a66', 26, 'hw26_03.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '8de3512e-02c4-421c-559e-49c472c9a16e', 26, 'hw26_04.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '9099872f-e52e-48eb-7fc2-02f7f702c74d', 26, 'hw26_05.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '4d594f37-98c6-424d-602e-ccdfffaacb62', 26, 'hw26_06.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '8ba97edf-4b4e-4b9d-53da-8c6ee2403452', 26, 'hw26_07.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'f8603d51-f2b0-4277-6936-200b4327eb79', 26, 'hw26_08.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '08674bb0-106a-443d-7fea-5dec83cbfde4', 26, 'hw26_09.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '1615f6e6-01a7-41b3-4b2d-ae8868793ae2', 26, 'hw26_10.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '541b1f11-8f08-4f9b-7f25-86dba89307be', 26, 'hw26_11.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '47825ab0-e4c1-40e6-7009-0e4e57f9350c', 26, 'hw26_14.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 26 - 1 to 1 relationship                (pk to pk)\u003c/h1\u003e\n\n\u003cp\u003eThis exercise creates a bunch of tables, triggers indexes.  Run each of the files.\u003c/p\u003e\n\n\u003cp\u003eThe application uses a small set of user authorization tables from a wrapper application.\nWe have to create the tables and the tables that match with in the application.\u003c/p\u003e\n\n\u003cp\u003eOur 1 to 1 relationship is between \u003ccode\u003e\u0026quot;t_ymux_user\u0026quot;\u003c/code\u003e and our application table\n\u003ccode\u003ect_login\u003c/code\u003e.    ct_login privies extra application specific columns that every user has\nto have.\u003c/p\u003e\n\n\u003cp\u003eWe are just going to create all 6 tables - then explore the relationships.\u003c/p\u003e\n\n\u003ch2\u003e3 Tables From The Security Application\u003c/h2\u003e\n\n\u003cp\u003eThe Tables are \u0026ldquo;t_ymux_user\u0026rdquo; , \u0026ldquo;ct_homework_ans\u0026rdquo;  and  \u0026ldquo;t_ymux_user_log\u0026rdquo; .\u003c/p\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_01.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists \u0026quot;t_ymux_user\u0026quot; cascade ; \n \nCREATE TABLE \u0026quot;t_ymux_user\u0026quot; ( \n\t  \u0026quot;id\u0026quot;\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, \u0026quot;username\u0026quot; \t\t\ttext \n\t, \u0026quot;password\u0026quot; \t\t\ttext \n\t, \u0026quot;realm\u0026quot; \t\t\t\ttext \n\t, \u0026quot;real_name\u0026quot; \t\t\ttext \n\t, \u0026quot;salt\u0026quot; \t\t\t\ttext \n\t, \u0026quot;email\u0026quot; \t\t\t\ttext \n\t, \u0026quot;email_confirmed\u0026quot; \tchar varying (1) default ''n'' not null \n\t, \u0026quot;setup_2fa_complete\u0026quot; \tchar varying (1) default ''n'' not null \n\t, \u0026quot;rfc_6238_secret\u0026quot;\t\ttext  \n\t, \u0026quot;recovery_token\u0026quot; \t\ttext \n\t, \u0026quot;recovery_expire\u0026quot; \ttimestamp \n\t, \u0026quot;parent_user_id\u0026quot;\t\tuuid \n\t, \u0026quot;org_user_id\u0026quot;\t\t\tuuid \n\t, \u0026quot;auth_token\u0026quot;\t\t\ttext  \n\t, \u0026quot;acct_expire\u0026quot; \t\ttimestamp \n\t, \u0026quot;updated\u0026quot; \t\t\ttimestamp \n\t, \u0026quot;created\u0026quot; \t\t\ttimestamp default current_timestamp not null \n); \n \n \ncreate unique index \u0026quot;t_ymux_user_u1\u0026quot; on \u0026quot;t_ymux_user\u0026quot; ( \u0026quot;username\u0026quot; ); \ncreate index \u0026quot;t_ymux_user_p1\u0026quot; on \u0026quot;t_ymux_user\u0026quot; ( \u0026quot;email\u0026quot; ); \ncreate unique index \u0026quot;t_ymux_user_u3\u0026quot; on \u0026quot;t_ymux_user\u0026quot; ( \u0026quot;recovery_token\u0026quot; ); \ncreate index \u0026quot;t_ymux_user_p2\u0026quot; on \u0026quot;t_ymux_user\u0026quot; ( \u0026quot;created\u0026quot;, \u0026quot;setup_2fa_complete\u0026quot; ); \ncreate index \u0026quot;t_ymux_user_p3\u0026quot; on \u0026quot;t_ymux_user\u0026quot; ( \u0026quot;created\u0026quot;, \u0026quot;email_confirmed\u0026quot; ); \n \n \n \n \nCREATE OR REPLACE function t_ymux_user_upd() \nRETURNS trigger AS $$ \nBEGIN  \n\tNEW.updated := current_timestamp;  \n\tRETURN NEW;  \nEND  \n$$ LANGUAGE ''plpgsql''; \n \n \nCREATE TRIGGER t_ymux_user_trig \n\tBEFORE update ON \u0026quot;t_ymux_user\u0026quot; \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE t_ymux_user_upd(); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_02.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \n-- -------------------------------------------------------- -- -------------------------------------------------------- \n-- Note the \u0026quot;auth_token\u0026quot; is the \u0026quot;ID\u0026quot; for this row. (Primnary Key) \n-- -------------------------------------------------------- -- -------------------------------------------------------- \n \ndrop TABLE if exists \u0026quot;t_ymux_auth_token\u0026quot; ; \nCREATE TABLE \u0026quot;t_ymux_auth_token\u0026quot; ( \n\t  \u0026quot;id\u0026quot;\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, \u0026quot;user_id\u0026quot;\t\t\t\tuuid not null \n\t, \u0026quot;updated\u0026quot; \t\t\ttimestamp \n\t, \u0026quot;created\u0026quot; \t\t\ttimestamp default current_timestamp not null \n); \n \ncreate index \u0026quot;t_ymux_auth_token_p1\u0026quot; on \u0026quot;t_ymux_auth_token\u0026quot; ( \u0026quot;user_id\u0026quot; ); \ncreate index \u0026quot;t_ymux_auth_token_p2\u0026quot; on \u0026quot;t_ymux_auth_token\u0026quot; ( \u0026quot;created\u0026quot; ); \n \n \nALTER TABLE \u0026quot;t_ymux_auth_token\u0026quot; \n\tADD CONSTRAINT \u0026quot;t_ymux_auth_token_user_id_fk1\u0026quot; \n\tFOREIGN KEY (\u0026quot;user_id\u0026quot;) \n\tREFERENCES \u0026quot;t_ymux_user\u0026quot; (\u0026quot;id\u0026quot;) \n; \n \nCREATE OR REPLACE function t_ymux_auth_token_upd() \nRETURNS trigger AS $$ \nBEGIN  \n\tNEW.updated := current_timestamp;  \n\tRETURN NEW;  \nEND  \n$$ LANGUAGE ''plpgsql''; \n \n \nCREATE TRIGGER t_ymux_auth_token_trig \n\tBEFORE update ON \u0026quot;t_ymux_auth_token\u0026quot; \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE t_ymux_auth_token_upd(); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_03.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE SEQUENCE t_log_seq \n  INCREMENT 1 \n  MINVALUE 1 \n  MAXVALUE 9223372036854775807 \n  START 1 \n  CACHE 1; \n \nDROP TABLE if exists \u0026quot;t_ymux_user_log\u0026quot; ; \n \nCREATE TABLE \u0026quot;t_ymux_user_log\u0026quot; ( \n\t  \u0026quot;id\u0026quot;\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, \u0026quot;user_id\u0026quot;\t\t\t\tuuid \t \n\t, \u0026quot;seq\u0026quot;\t \t\t\t\tbigint DEFAULT nextval(''t_log_seq''::regclass) NOT NULL  \n\t, \u0026quot;activity_name\u0026quot;\t\ttext \n\t, \u0026quot;updated\u0026quot; \t\t\ttimestamp \n\t, \u0026quot;created\u0026quot; \t\t\ttimestamp default current_timestamp not null \n); \n \ncreate index \u0026quot;t_ymux_user_log_p1\u0026quot; on \u0026quot;t_ymux_user_log\u0026quot; ( \u0026quot;user_id\u0026quot;, \u0026quot;seq\u0026quot; ); \ncreate index \u0026quot;t_ymux_user_log_p2\u0026quot; on \u0026quot;t_ymux_user_log\u0026quot; ( \u0026quot;user_id\u0026quot;, \u0026quot;created\u0026quot; ); \n \nALTER TABLE \u0026quot;t_ymux_user_log\u0026quot; \n\tADD CONSTRAINT \u0026quot;t_ymux_user_log_user_id_fk1\u0026quot; \n\tFOREIGN KEY (\u0026quot;user_id\u0026quot;) \n\tREFERENCES \u0026quot;t_ymux_user\u0026quot; (\u0026quot;id\u0026quot;) \n; \n \nCREATE OR REPLACE function t_ymux_user_log_upd() \nRETURNS trigger AS $$ \nBEGIN  \n\tNEW.updated := current_timestamp; \n\tRETURN NEW; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \nCREATE TRIGGER t_ymux_user_log_trig \n\tBEFORE update ON \u0026quot;t_ymux_user_log\u0026quot; \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE t_ymux_user_log_upd(); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eApplications Tables\u003c/h2\u003e\n\n\u003cp\u003e\u0026ldquo;t_ymux_user\u0026rdquo; joins to ct_login on a 1 to 1 basis.  Each time a user is inserted\ntinto ct_login a set of rows is populated for all the homework that exits into\nct_homework_ans.\u003c/p\u003e\n\n\u003ch2\u003ect_login\u003c/h2\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_04.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists ct_login ; \n \nCREATE TABLE ct_login ( \n\t  user_id\t\t\t\t\tuuid not null primary key -- 1 to 1 to \u0026quot;t_ymux_user\u0026quot;.\u0026quot;id\u0026quot; \n\t, pg_acct\t\t\t\t\tchar varying (20) not null \n\t, class_no\t\t\t\t\ttext default ''4010-BC'' not null\t-- 4820 or 4010-BC - one of 2 classes \n\t, lang_to_use\t\t\t\ttext default ''Go'' not null\t\t-- Go or PostgreSQL \n\t, misc\t\t\t\t\t\tJSONb default ''{}'' not null\t\t-- Whatever I forgot \n); \n \ncreate unique index ct_login_u1 on ct_login ( pg_acct ); \ncreate index ct_login_p1 on ct_login using gin ( misc ); \n \nALTER TABLE ct_login \n\tADD CONSTRAINT ct_login_user_id_fk \n\tFOREIGN KEY (user_id) \n\tREFERENCES \u0026quot;t_ymux_user\u0026quot; (\u0026quot;id\u0026quot;) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003ect_homeowrk\u003c/h2\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_05.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists ct_homework cascade; \n \nCREATE TABLE ct_homework ( \n\t  homework_id\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, homework_title\t\t\ttext not null \n\t, lesson_no\t\t\t\t\ttext not null \n\t, points_avail\t\t\t\tint not null default 10 \n\t, video_url\t\t\t\t\ttext not null \n\t, video_img\t\t\t\t\ttext not null \n\t, lesson_body \t\t\t\tJSONb not null \t-- body, html, text etc. \n); \n \nCREATE INDEX ct_homework_p1 on ct_homework ( homework_no ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003ect_homeowrk_ans\u003c/h2\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_06.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists ct_homework_ans ; \nCREATE TABLE ct_homework_ans ( \n\t  homework_ans_id\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, homework_id\t\t\t\tuuid not null \n\t, user_id\t\t\t\t\tuuid not null \n\t, points\t\t\t\t\tint not null default 0 \n\t, completed\t\t\t\t\tchar(1) default ''n'' not null \n\t, updated\t\t \t\t\ttimestamp \n\t, created \t\t\t\t\ttimestamp default current_timestamp not null \n); \n \n \ncreate unique index ct_homework_ans_u1 on ct_homework_ans ( homework_id, user_id ); \ncreate unique index ct_homework_ans_u2 on ct_homework_ans ( user_id, homework_id ); \n \n \n-- homework_id is fk to ct_homework \nALTER TABLE ct_homework_ans \n\tADD CONSTRAINT homework_id_fk \n\tFOREIGN KEY (homework_id) \n\tREFERENCES ct_homework (homework_id) \n; \n \n-- user_id is fk to ct_login \nALTER TABLE ct_homework_ans \n\tADD CONSTRAINT user_id_fk \n\tFOREIGN KEY (user_id) \n\tREFERENCES ct_login (user_id) \n; \n \n \nCREATE OR REPLACE function ct_homework_ans_upd() \nRETURNS trigger AS $$ \nBEGIN \n\tNEW.updated := current_timestamp; \n\tRETURN NEW; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \nCREATE TRIGGER ct_homework_ans_trig \n\tBEFORE update ON ct_homework_ans \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE ct_homework_ans_upd(); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eTriggers that depend on multiple tables\u003c/h2\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_07.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE function ct_homework_ins() \nRETURNS trigger AS $$ \nBEGIN \n\tinsert into ct_homework_ans ( \n\t\tuser_id, \n\t\thomework_id \n\t) select  \n\t\tt1.user_id, \n\t\tNEW.homework_id \n\tfrom ct_login as t1 \n\twhere not exists ( \n\t\t\tselect 1 as \u0026quot;found\u0026quot; \n\t\t\tfrom ct_homework_ans t2 \n\t\t\twhere t2.user_id = t1.user_id\t\t\t \n\t\t\t  and t2.homework_id = NEW.homework_id \n\t\t) \n\t; \n\tRETURN NEW; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \nDROP TRIGGER if exists ct_homework_trig_ins_upd on ct_homework; \n \nCREATE TRIGGER ct_homework_trig_ins_upd \n\tAFTER insert or update ON ct_homework \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE ct_homework_ins(); \n \n \n \n \n \n \nCREATE OR REPLACE function ct_homework_del() \nRETURNS trigger AS $$ \nBEGIN \n\tupdate ct_homework_ans t3 \n\t\tset completed = ''x'' \n\t\twhere t3.homework_id = NEW.homework_id \n\t\t  and t3.completed = ''n'' \n\t; \n\tRETURN OLD; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \nDROP TRIGGER if exists ct_homework_trig_del on ct_homework; \n \nCREATE TRIGGER ct_homework_trig_del \n\tBEFORE delete ON ct_homework \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE ct_homework_del(); \n \n \n \n \n \n \n \n \nCREATE OR REPLACE function ct_login_ins() \nRETURNS trigger AS $$ \nBEGIN \n\tinsert into ct_homework_ans ( \n\t\tuser_id, \n\t\thomework_id \n\t) select  \n\t\tNEW.user_id, \n\t\tt1.homework_id \n\tfrom ct_homework as t1 \n\twhere not exists ( \n\t\t\tselect 1 as \u0026quot;found\u0026quot; \n\t\t\tfrom ct_homework_ans t2 \n\t\t\twhere t2.user_id = NEW.user_id\t\t\t \n\t\t\t  and t2.homework_id = t1.homework_id \n\t\t) \n\t; \n\tRETURN NEW; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \ndrop TRIGGER if exists ct_login_trig on ct_login; \n \nCREATE TRIGGER ct_login_trig \n\tAFTER insert ON ct_login \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE ct_login_ins(); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eHomework tags\u003c/h2\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_09.sql\u003c/code\u003e and \u003ccode\u003ehw26_10.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE IF EXISTS ct_tag ; \n \nCREATE TABLE ct_tag (  \n\ttag_id uuid DEFAULT uuid_generate_v4() not null primary key, \n\ttag_word text not null \n); \n \nCREATE UNIQUE INDEX ct_tag_p1 on ct_tag ( tag_word ); \n \n \n \nDROP TABLE IF EXISTS ct_tag_homework ; \n \nCREATE TABLE ct_tag_homework (  \n\ttag_id \t\tuuid not null, \n\thomework_id uuid not null, \n\tprimary key ( homework_id, tag_id ) \n); \n \nCREATE UNIQUE INDEX ct_tag_homework_u1 on ct_tag_homework ( tag_id, homework_id ); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eSetup default data\u003c/h2\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw26_11.sql\u003c/code\u003e to setup data for these tables.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect setup_data_26(); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;setup\u0026rdquo;,\u0026ldquo;ct_homework\u0026rdquo;,\u0026ldquo;ct_homework_ans\u0026rdquo;,\u0026ldquo;ct_tag\u0026rdquo;,\u0026ldquo;ct_tag_homework\u0026rdquo;,\u0026ldquo;t_ymux_user\u0026rdquo;,\u0026ldquo;t_ymux_user_log\u0026rdquo;,\u0026ldquo;t_ymux_auth_token\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":26}' where homework_id = '64d73627-1fb5-42b4-62ec-c37a6d02b15d';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2c861f9f-d2ac-4600-6173-7969f439d3cd', 'Interactive - 27 - 1 to 0 or 1 relationship 			(fk, unique)', '27', 'hw27.mp4', 'hw27.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '510d893c-cb6b-4748-7867-6213841a88b2', '1' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '510d893c-cb6b-4748-7867-6213841a88b2', '2c861f9f-d2ac-4600-6173-7969f439d3cd' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '307e6304-0cd9-40ba-79e8-d365381c65ff', 27, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 27 - 1 to 0 or 1 relationship           (fk, unique)\u003c/h1\u003e\n\n\u003cp\u003eNow that we have our tables let\u0026rsquo;s look at the relationship between\n\u003ccode\u003e\u0026quot;t_ymux_user\u0026quot;\u003c/code\u003e and \u003ccode\u003ect_login\u003c/code\u003e.   This is our 1 to 0 or 1 relationship.\u003c/p\u003e\n\n\u003cp\u003eIt is provided by the primary key on ct_login being required but not\nhaving a default value where a key is generated.   This is combined\nwith the foreign key constraint to \u003ccode\u003e\u0026quot;t_ymux_user\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTry an insert to see if you can fake it out (the insert will fail).\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003einsert into ct_login ( user_id, pg_acct ) values ( uuid_generate_v4(), ''x'' ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get an error.   The error indicates that you violated a foreign key and will look similar to:\u003c/p\u003e\n\n\u003cp\u003eIf you ran it in psql or pgAmdmin your error would look like:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eERROR:  insert or update on table \u0026quot;ct_homework_ans\u0026quot; violates foreign key constraint \u0026quot;user_id_fk\u0026quot; \nDETAIL:  Key (user_id)=(ce1d8fdd-aa04-4bb4-9ef7-72655ff63b95) is not present in table \u0026quot;ct_login\u0026quot;. \nCONTEXT:  SQL statement \u0026quot;insert into ct_homework_ans ( \n\t\tuser_id, \n\t\thomework_id \n\t) select \n\t\tNEW.user_id, \n\t\tt1.homework_id \n\tfrom ct_homework as t1 \n\twhere not exists ( \n\t\t\tselect 1 as \u0026quot;found\u0026quot; \n\t\t\tfrom ct_homework_ans t2 \n\t\t\twhere t2.user_id = NEW.user_id \n\t\t\t  and t2.homework_id = t1.homework_id \n\t\t)\u0026quot; \nPL/pgSQL function ct_login_ins() line 3 at SQL statement \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this tool you get back:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e{ \n    \u0026quot;Status\u0026quot;: \u0026quot;error\u0026quot;, \n    \u0026quot;MsgSet\u0026quot;: [ \n        { \n            \u0026quot;Msg\u0026quot;: \u0026quot;pq: insert or update on table \\\u0026quot;ct_homework_ans\\\u0026quot; violates foreign key constraint \\\u0026quot;user_id_fk\\\u0026quot;\u0026quot;, \n            \u0026quot;Stmt\u0026quot;: \u0026quot;insert into ct_login ( user_id, pg_acct ) values ( uuid_generate_v4(), ''x'' )\u0026quot; \n        } \n    ] \n} \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: 1:0,\u0026ldquo;1 to 0\u0026rdquo;,\u0026ldquo;1:0 relationship\u0026rdquo;,\u0026ldquo;1:1\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":27}' where homework_id = '2c861f9f-d2ac-4600-6173-7969f439d3cd';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '789aeb6e-63e4-4d4f-63fe-a1a0b9995a0e', 'Interactive - 28 - 1 to n relationship				(fk)', '28', 'hw28.mp4', 'hw28.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '510d893c-cb6b-4748-7867-6213841a88b2', '789aeb6e-63e4-4d4f-63fe-a1a0b9995a0e' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '4a88818e-f9b5-4d98-54cf-0244681c70f7', 28, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 28 - 1 to n relationship                (fk)\u003c/h1\u003e\n\n\u003cp\u003eThe simple to understand relationship is a 1 to 0..n relationship.\nThis is where a parent key is a primary key and a foreign key\nis in a 2nd table.  We have this relationship between\n\u003ccode\u003e\u0026quot;t_ymux_user\u0026quot;.\u0026quot;id\u0026quot;\u003c/code\u003e and the \u003ccode\u003e\u0026quot;t_ymux_auth_token\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe table \u003ccode\u003e\u0026quot;t_ymux_auth_token\u0026quot;\u003c/code\u003e has \u0026ldquo;user_id\u0026rdquo; as a column in it.\nA foreign key relationship exists between the 2 tables.  This means\nthat you can have more than 1 auth token for each user.   Basically\na user can login from more than one computer at a time.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT setup_data_26(); \n \nSELECT t1.email, t2.id as \u0026quot;auth_token\u0026quot; \n\tFROM \u0026quot;t_ymux_user\u0026quot; as t1 \n\t\tjoin \u0026quot;t_ymux_auth_token\u0026quot; as t2 on ( t1.\u0026quot;id\u0026quot; = t2.\u0026quot;user_id\u0026quot; ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 3 rows.\u003c/p\u003e\n\n\u003ch4\u003eTags:  1:n,\u0026ldquo;1:n relationship\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":28}' where homework_id = '789aeb6e-63e4-4d4f-63fe-a1a0b9995a0e';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'cb2d958f-1a9c-4d1b-5b9b-9f5b6a45e829', 'Interactive - 29 - m to n relationship				(fk to join table to fk)', '29', 'hw29.mp4', 'hw29.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '4550da16-93bb-4509-4f69-64c5a1c35bac', 'm' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4550da16-93bb-4509-4f69-64c5a1c35bac', 'cb2d958f-1a9c-4d1b-5b9b-9f5b6a45e829' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '8d459e14-62b1-4571-5084-58697a2fae01', 29, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 29 - m to n relationship                (fk to join table to fk)\u003c/h1\u003e\n\n\u003cp\u003eOur model has a m to n (m:n) relationship in it.  This is between ct_homeowrk\nand ct_tags.\u003c/p\u003e\n\n\u003cp\u003eThis relationship requires an intermediate table.  Each side has a relationship\nto the intermediate table.\u003c/p\u003e\n\n\u003cp\u003ect_tag associates a tag_word with a tag_id  (Shown below - the table was created\nin the script in homework 26 - you don\u0026rsquo;t need to run it.)\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE ct_tag (  \n\ttag_id uuid DEFAULT uuid_generate_v4() not null primary key, \n\ttag_word text not null \n); \n \nCREATE UNIQUE INDEX ct_tag_p1 on ct_tag ( tag_word ); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTo get  a list of the words do a select from this table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT tag_word from ct_tag order by tag_word; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNote that tag_word has a unique index on it.  This prevents any duplicate tags.\u003c/p\u003e\n\n\u003cp\u003eThe join table has just IDs in it.   To make it efficient it has indexes that\ngo in both directions - this allows searching from ct_tags back to ct_homework\nand from ct_homework to ct_tags.    One of the unique indexes is the multi-field\nprimary key with homework_id, tag_id in it..   This is listed at the bottom\nof the create table.  The second one is a unique index.\u003c/p\u003e\n\n\u003cp\u003e(shown below - do not run, just for reference)\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE ct_tag_homework (  \n\ttag_id \t\tuuid not null, \n\thomework_id uuid not null, \n\tprimary key ( homework_id, tag_id ) \n); \n \nCREATE UNIQUE INDEX ct_tag_homework_u1 on ct_tag_homework ( tag_id, homework_id ); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe ct_homework table (show for reference) is:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nCREATE TABLE ct_homework ( \n\t  homework_id\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, homework_no\t\t\t\ttext not null \n\t, points_avail\t\t\t\tint not null default 10 \n\t, video_url\t\t\t\t\ttext not null \n\t, video_img\t\t\t\t\ttext not null \n\t, lesson_body \t\t\t\tJSONb not null \t-- body, html, text etc. \n); \n \nCREATE INDEX ct_homework_p1 on ct_homework ( homework_no ); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow do a select from the join table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from ct_tag_homework order by 1, 2; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCreative Homework - Assignment 02 - program on your computer.\u003c/h2\u003e\n\n\u003cp\u003eThis Interactive assignment has the tables in it for your Assignment 02.\nThe assignments to be written in Python and generate SQL as output.\u003c/p\u003e\n\n\u003cp\u003eFor this Interactive you get to write the query that will join the\ntables together.  Some data has already been loaded to the tables.\u003c/p\u003e\n\n\u003cp\u003eConstruct a select that joins all 3 tables together.  The select should have\n\u003ccode\u003ehomework_title\u003c/code\u003e and \u003ccode\u003epoints_avail\u003c/code\u003e from the ct_homework table in it.\nIt should also have the \u003ccode\u003etag_word\u003c/code\u003e  from ct_tag and it should join from\nct_homework to ct_tag_homework to ct_tag.   The output should be an ordered\nlist of homework and all the tags that are associated with each homework.\nFor example in homework 29 you should have 3 tags, \u0026ldquo;m to n\u0026rdquo;, \u0026ldquo;m:n\u0026rdquo; and\n\u0026ldquo;m:n relationship\u0026rdquo; as the tags.    Also have the tags sorted alphabetically.\nThis means that \u0026ldquo;m to n\u0026rdquo; will be the last of the 3 tags for homework 29.\u003c/p\u003e\n\n\u003cp\u003eHints:  You need to sort by a column that you do not need to return.\nThis is the homework_no.   So you need to have a sub-select with\nthe order by on the inside select.\nThe example of a join is in homework 19 where we use a sub-select and\nthe order by on the inside select.\u003c/p\u003e\n\n\u003cp\u003eIn homework 11 we have an example of jointing to multiple tables at\nonce.\u003c/p\u003e\n\n\u003cp\u003eThe homework on inner joins is 18.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026rsquo;s important that the sort order by homework_no be done as an\ninteger, not as text.  You will need to use a \u003ccode\u003e::int\u003c/code\u003e to convert\nthe text field to an integer field.\u003c/p\u003e\n\n\u003cp\u003eThe correct output data should look similar to:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e                                      homework_title                                      |      tag_word       \n------------------------------------------------------------------------------------------+-------------------- \n  Interactive - 01 - Create Table                                                         | create table \n  Interactive - 01 - Create Table                                                         | hw01 \n  Interactive - 01 - Create Table                                                         | type int \n  Interactive - 01 - Create Table                                                         | type text \n  Interactive - 01 - Create Table                                                         | type varchar \n  Interactive - 02 - Insert data into \u0026quot;name_list\u0026quot;                                         | hw02 \n  Interactive - 02 - Insert data into \u0026quot;name_list\u0026quot;                                         | insert \n... \n... \n... \n  Interactive - 08 - create unique id and a primary key                                   | UUID \n  Interactive - 09 - add a table with state codes                                         | add constraint \n  Interactive - 09 - add a table with state codes                                         | alter table \n  Interactive - 09 - add a table with state codes                                         | foreign key \n  Interactive - 10 - add a index on the name table                                        | create index \n  Interactive - 11 - add a index on the name table that is case insensitive.              | create index \n... \n... \n... \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: m:n,\u0026ldquo;m to n\u0026rdquo;,\u0026ldquo;m:n\u0026rdquo;,\u0026ldquo;m:n relationship\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":29}' where homework_id = 'cb2d958f-1a9c-4d1b-5b9b-9f5b6a45e829';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2f982841-d4f0-4397-5c15-5e997edea64c', 'Interactive - 30 - 1 to ordered list relationship		(fk to uk with sequence)', '30', 'hw30.mp4', 'hw30.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '7bb4d5cd-3abd-4df9-61c3-fb11bf74c882', '1 to list' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '7bb4d5cd-3abd-4df9-61c3-fb11bf74c882', '2f982841-d4f0-4397-5c15-5e997edea64c' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c449a447-301b-4fbb-4e5c-93e7f7ecdf39', 'list of rows' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c449a447-301b-4fbb-4e5c-93e7f7ecdf39', '2f982841-d4f0-4397-5c15-5e997edea64c' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'a9da72ab-660f-4b01-4efd-c1c7f05e645a', 30, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 30 - 1 to ordered list relationship     (fk to uk with sequence)\u003c/h1\u003e\n\n\u003cp\u003eThe model has a 1 to a list of rows.  This is a more unusual relationship\nbecause the list can be ordered by time.  Usually relationships in a SQL\ndatabase are not inherently ordered.  In  this case we use a sequence\u003cbr /\u003e\ngenerated number to make the set of rows in a specific order.\u003c/p\u003e\n\n\u003cp\u003eTaken from hw26_3.sql that you have already run.\nYou don\u0026rsquo;t have to run it again.\nThe first step is to create a sequence.   This one is \u003ccode\u003et_log_seq\u003c/code\u003e.\nEach time a value is used from the sequenced it increments.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE SEQUENCE t_log_seq \n  INCREMENT 1 \n  MINVALUE 1 \n  MAXVALUE 9223372036854775807 \n  START 1 \n  CACHE 1; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFor the field \u0026ldquo;seq\u0026rsquo; in the table we use the sequence.  This is\nthe \u003ccode\u003enextval(''t_log_seq''::regclass)\u003c/code\u003e default value.  When we insert\nwe allow the default value to fill \u003ccode\u003eseq\u003c/code\u003e.   Our join is a 1:n join\nbased on user_id to the user.  Each time a security event happens\nwe insert the type of event to this table.   In a complete\nsecurity system this kind of a \u0026ldquo;log\u0026rdquo; has a trigger on it and\nfor certain events it would generate an email to the user.  An\nexample is the creation of a device/application account or the\nchange of the account password.   Some events would just be logged\nfor later statistical usage - like a login or logout event.\u003c/p\u003e\n\n\u003cp\u003eAlso taken from hw26_3.sql that you have already run.\nYou don\u0026rsquo;t have to run it again.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE \u0026quot;t_ymux_user_log\u0026quot; ( \n\t  \u0026quot;id\u0026quot;\t\t\t\t\tuuid DEFAULT uuid_generate_v4() not null primary key \n\t, \u0026quot;user_id\u0026quot;\t\t\t\tuuid \t-- if null then a failed event \n\t, \u0026quot;seq\u0026quot;\t \t\t\t\tbigint DEFAULT nextval(''t_log_seq''::regclass) NOT NULL  \n\t, \u0026quot;activity_name\u0026quot;\t\ttext \n\t, \u0026quot;updated\u0026quot; \t\t\ttimestamp \n\t, \u0026quot;created\u0026quot; \t\t\ttimestamp default current_timestamp not null \n); \n \ncreate index \u0026quot;t_ymux_user_log_p1\u0026quot; on \u0026quot;t_ymux_user_log\u0026quot; ( \u0026quot;user_id\u0026quot;, \u0026quot;seq\u0026quot; ); \ncreate index \u0026quot;t_ymux_user_log_p2\u0026quot; on \u0026quot;t_ymux_user_log\u0026quot; ( \u0026quot;user_id\u0026quot;, \u0026quot;created\u0026quot; ); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRun a simple select on t_ymux_user_log.  You should have at least 2 rows in\nit.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from t_ymux_user_log; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eAssignment 03 - Create 2 tables.\u003c/h2\u003e\n\n\u003cp\u003e50 points.\u003c/p\u003e\n\n\u003cp\u003eCreate a table a \u0026ldquo;issue\u0026rdquo; table that has a text body column called \u0026ldquo;body\u0026rdquo;.\nThe table needs to have a UUID primary key that is automatically generated.\nThen create a child table, \u0026ldquo;issue_note\u0026rdquo; that has a list of comments with dates associated\nwith the \u0026ldquo;issue\u0026rdquo; table.   This list of comments needs to be ordered using\na \u0026ldquo;seq\u0026rdquo; column.   Create a sequence to support this column.  Call the sequence \u0026ldquo;t_issue_note_seq\u0026rdquo;.\nBoth tables need to have created/updated columns that are date stamps.\u003c/p\u003e\n\n\u003cp\u003eTurn in the source code for creating the tables with some inserts that put\u003cbr /\u003e\ndata into the tables and a select that verifies an issue and a set of\nissue notes.\u003c/p\u003e\n\n\u003cp\u003eDon\u0026rsquo;t loose your source code for these tables.\nWe will use these tables in the assignment on key word search later in the class.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;1 to list\u0026rdquo;,\u0026ldquo;list of rows\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":30}' where homework_id = '2f982841-d4f0-4397-5c15-5e997edea64c';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '1c4a0322-ebd2-4d46-523a-b0142e6012fd', 'Interactive - 31 - only one row of data				(uk with no sequence)', '31', 'hw31.mp4', 'hw31.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a38bd68f-717b-44df-6309-da614c9eafdf', 'single row' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a38bd68f-717b-44df-6309-da614c9eafdf', '1c4a0322-ebd2-4d46-523a-b0142e6012fd' );
insert into ct_tag ( tag_id, tag_word ) values ( '6dfb12c8-eef1-4c4d-4670-611166438983', 'raise exception' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '6dfb12c8-eef1-4c4d-4670-611166438983', '1c4a0322-ebd2-4d46-523a-b0142e6012fd' );
insert into ct_tag ( tag_id, tag_word ) values ( '9ae7e025-5a8e-4c4e-7913-5b67fe0fdd27', 'trigger' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9ae7e025-5a8e-4c4e-7913-5b67fe0fdd27', '1c4a0322-ebd2-4d46-523a-b0142e6012fd' );
insert into ct_tag ( tag_id, tag_word ) values ( '1dfc4b0e-2fba-4303-40a6-58472623ff0c', 'delete trigger' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1dfc4b0e-2fba-4303-40a6-58472623ff0c', '1c4a0322-ebd2-4d46-523a-b0142e6012fd' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '712770f1-6c18-49e5-5eb0-139c2c4dbdad', 31, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 31 - only one row of data               (uk with no sequence)\u003c/h1\u003e\n\n\u003cp\u003eWith system configuration tables it is often useful to only have 1 row of data.\nEach configuration item is a distinct column in the table.\u003c/p\u003e\n\n\u003cp\u003eThis can be done with a primary key and a constraint.     The constraint limits the values\non the primary key and results in an error if a attempt to insert a 2nd row occurs.\u003c/p\u003e\n\n\u003cp\u003eIn this example we just have \u003ccode\u003eapplicaiton_name\u003c/code\u003e as the single configuration item.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists ct_config ; \n \nCREATE TABLE ct_config ( \n\tconfig_id serial primary key check ( config_id = 1 ), \n\tapplication_name text \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe first insert will work.  Then 2nd will not.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO ct_config ( application_name ) values ( ''4820 class'' ); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand 2nd insert\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003einsert into ct_config ( application_name ) values ( ''4010 blockchain class'' ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eon the 2nd insert you should get an error similar to:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003epsql:hw31_3.sql:3: ERROR:  new row for relation \u0026quot;ct_config\u0026quot; violates check constraint \u0026quot;ct_config_config_id_check\u0026quot; \nDETAIL:  Failing row contains (2, 4010 blockchain class). \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe can prevent delete of the row with a trigger.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE FUNCTION ct_config_prevent_delete()  \nRETURNS trigger AS $$ \nBEGIN             \n\tIF OLD.config_id = 1 THEN \n\t\tRAISE EXCEPTION ''cannot delete configuration row''; \n\tEND IF; \nEND; \n$$  \nLANGUAGE plpgsql; \n \nCREATE TRIGGER ct_config_prevent_delete  \n\tBEFORE DELETE ON ct_config \n\tFOR EACH ROW EXECUTE PROCEDURE ct_config_prevent_delete(); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen you try to delete:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edelete from ct_config; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get an error similar to:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eERROR:  cannot delete configuration row \nCONTEXT:  PL/pgSQL function ct_config_prevent_delete() line 4 at RAISE \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;single row\u0026rdquo;,\u0026ldquo;raise exception\u0026rdquo;,\u0026ldquo;trigger\u0026rdquo;,\u0026ldquo;delete trigger\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":31}' where homework_id = '1c4a0322-ebd2-4d46-523a-b0142e6012fd';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '51631a09-e556-485e-492a-d719b1cc3def', 'Interactive - 32 - only one a fixed set of rows.		(pre-populate with key, pk, check-constraint on key)', '32', 'hw32.mp4', 'hw32.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '3acacbff-171f-49c6-6a52-26bb44854975', 'fixed set rows' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3acacbff-171f-49c6-6a52-26bb44854975', '51631a09-e556-485e-492a-d719b1cc3def' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9ae7e025-5a8e-4c4e-7913-5b67fe0fdd27', '51631a09-e556-485e-492a-d719b1cc3def' );
insert into ct_tag ( tag_id, tag_word ) values ( '5073ca81-3de4-404c-4966-1dde81eb466e', 'check constraint' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '5073ca81-3de4-404c-4966-1dde81eb466e', '51631a09-e556-485e-492a-d719b1cc3def' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'f3bea26c-5719-4338-4ac5-379e2d7c774a', 32, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 32 - only one a fixed set of rows.      (pre-populate with key, pk, check-constraint on key)\u003c/h1\u003e\n\n\u003cp\u003eThere is a different way to implement a set of configuration items.  In this case the items\nare stored one in each row in a set of fixed rows.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP  TABLE if exists ct_config_row ; \n \nCREATE TABLE ct_config_row ( \n\t  id\t\t\t\tserial not null primary key \n\t, name \t\t\t\ttext not null check ( name in ( \n\t\t\t\t\t\t\t''security_method'', \n\t\t\t\t\t\t\t''encryption'' \n\t\t\t\t\t\t) ) \n\t, ty \t\t\t\ttext not null default ''str'' \n\t, value \t\t\ttext  \n\t, i_value \t\t\tbigint \n\t, b_value \t\t\tboolean \n); \n \nCREATE UNIQUE INDEX ct_config_row_p1 on ct_config_row ( name ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith a table like this we can insert some values:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO ct_config_row ( name, value ) values\t \n\t( ''security_method'', ''jwt'' ), \n\t( ''encryption'', ''es'' ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe fixed set of configuration items is checked with the check constraint\nand the unique key on name.\u003c/p\u003e\n\n\u003cp\u003eA trigger can be used to prevent deletion of items.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE FUNCTION ct_config_row_prevent_delete()  \nRETURNS trigger AS $$ \nBEGIN             \n\tIF OLD.config_id = 1 THEN \n\t\tRAISE EXCEPTION ''cannot delete configuration row''; \n\tEND IF; \nEND; \n$$  \nLANGUAGE plpgsql; \n \nCREATE TRIGGER ct_config_row_prevent_delete  \n\tBEFORE DELETE ON ct_config_row \n\tFOR EACH ROW EXECUTE PROCEDURE ct_config_row_prevent_delete(); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;fixed set rows\u0026rdquo;,\u0026ldquo;trigger\u0026rdquo;,\u0026ldquo;check constraint\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":32}' where homework_id = '51631a09-e556-485e-492a-d719b1cc3def';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '46311437-6311-437c-6da0-1091d85069bf', 'Interactive - 33 - types of indexes (hash, gin)', '33', 'hw33.mp4', 'hw33.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a2fb76fa-f575-4c6b-531a-48d9611fd76a', '46311437-6311-437c-6da0-1091d85069bf' );
insert into ct_tag ( tag_id, tag_word ) values ( 'f6035896-2f0e-430e-66da-648624d42938', 'gin index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f6035896-2f0e-430e-66da-648624d42938', '46311437-6311-437c-6da0-1091d85069bf' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a641b729-5686-4df8-7871-46109f2b8c02', 'hash index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a641b729-5686-4df8-7871-46109f2b8c02', '46311437-6311-437c-6da0-1091d85069bf' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '96f89a02-aa58-4070-440b-055a9488486f', 33, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 33 - types of indexes (hash, gin)\u003c/h1\u003e\n\n\u003cp\u003eThe default type of index in most SQL databases is a B-Tree.  This is a wide tree\nthat can produce sorted data based on the data type and ordering of that data.\u003c/p\u003e\n\n\u003cp\u003eThis is not the only kind of index.\u003c/p\u003e\n\n\u003cp\u003eIn some cases ordering of data is meaningless.  For example UUIDs do not have\nany order.  We will still need to have an index to look up a value but\nsorting on UUID rarely makes any sense.  A faster index for data that has\nno order is a \u0026ldquo;hash\u0026rdquo; index.\u003c/p\u003e\n\n\u003cp\u003eAn example of a hash index is:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE INDEX ct_config_row_p2 on ct_config_row USING hash ( value ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eHash indexes in PostreSQL do not support unique index constraints.  In versions\nbefore 13 of PosgreSQL there are other limitations on how indexes are replicated\nand restored from a backup.\u003c/p\u003e\n\n\u003cp\u003eAnother type of index is a Generalized Inverse Index or GIN index. This is often\nused in conjunction with JSONb data types.\u003c/p\u003e\n\n\u003cp\u003eIn interactive homework 26 part 5 we created a column lesson_body with a data\ntype of JSONb.  We can create a GIN index on this that will allow for fast\u003cbr /\u003e\nsearches of the JSON data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE INDEX ct_homework_p2 on ct_homework USING gin ( lesson_body ); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;index\u0026rdquo;,\u0026ldquo;gin index\u0026rdquo;,\u0026ldquo;hash index\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":33}' where homework_id = '46311437-6311-437c-6da0-1091d85069bf';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '7025f1b4-5ec2-4ca4-735d-acce1dfd3b84', 'Interactive - 34 - explain', '34', 'hw34.mp4', 'hw34.svg', '{}' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '0bd8ea04-66c5-42dd-6906-046843826478', 34, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 34 - explain\u003c/h1\u003e\n\n\u003cp\u003eFirst you have to understand that different queries will work and perform in different\u003cbr /\u003e\nways.  The biggest thing is the query hitting an index.  That is not the only thing.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect \n          t1.homework_id \n        , t1.homework_no \n        , case \n            when t3.pts = 0 then ''n'' \n            when t3.pts is null then ''n'' \n            else ''y'' \n          end as \u0026quot;has_been_seen\u0026quot; \n        , t1.homework_no::int as i_homework_no \n        , coalesce(t3.tries,NULL,0,t3.tries) as tries \n    from ct_homework as t1 \n        left outer join ct_homework_seen as t2 on ( t1.homework_id = t2.homework_id ) \n        left outer join ct_homework_grade as t3 on ( t1.homework_id = t3.homework_id ) \n    where exists ( \n            select 1 as \u0026quot;found\u0026quot; \n            from ct_login as t3 \n            where t3.user_id = ''7a955820-050a-405c-7e30-310da8152b6d'' \n        ) \n     and ( t3.user_id = ''7a955820-050a-405c-7e30-310da8152b6d'' \n        or t3.user_id is null ) \n    order by 12 asc \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ev.s.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect \n          t1.homework_id \n        , t1.homework_no \n        , case \n            when t3.pts = 0 then ''n'' \n            when t3.pts is null then ''n'' \n            else ''y'' \n          end as \u0026quot;has_been_seen\u0026quot; \n        , t1.homework_no::int as i_homework_no \n        , coalesce(t3.tries,NULL,0,t3.tries) as tries \n    from ct_homework as t1 \n        left outer join ct_homework_seen as t2 on ( t1.homework_id = t2.homework_id ) \n        left outer join ct_homework_grade as t3 on ( t1.homework_id = t3.homework_id  \n            and t3.user_id = ''7a955820-050a-405c-7e30-310da8152b6d'' ) \n    where exists ( \n            select 1 as \u0026quot;found\u0026quot; \n            from ct_login as t3 \n            where t3.user_id = ''7a955820-050a-405c-7e30-310da8152b6d'' \n        ) \n     order by 4 asc \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eboth produce the same results.  The first one will construct the set of data from the\njoin and then filter it for the user.  An index will not be used because of the \u003ccode\u003eor\u003c/code\u003e and\u003cbr /\u003e\nthe \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe 2nd one pre-filters the table \u003ccode\u003ect_homework_graded\u003c/code\u003e for just the single user.  Since this is\nan equal condition an index will be used and this smaller set of data then is then\nused in the join.\u003c/p\u003e\n\n\u003cp\u003eA better implementation of the 2nd form is:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewith per_user_ct_homework_grade as ( \n\t\tselect *  \n\t\tfrom ct_homework_grade as t4 \n\t\twhere t4.user_id =''7a955820-050a-405c-7e30-310da8152b6d''  \n\t) \nselect \n          t1.homework_id \n        , t1.homework_no \n        , case \n            when t3.pts = 0 then ''n'' \n            when t3.pts is null then ''n'' \n            else ''y'' \n          end as \u0026quot;has_been_seen\u0026quot; \n        , t1.homework_no::int as i_homework_no \n        , coalesce(t3.tries,NULL,0,t3.tries) as tries \n    from ct_homework as t1 \n        left outer join ct_homework_seen as t2 on ( t1.homework_id = t2.homework_id ) \n        left outer join per_user_ct_homework_grade as t3 on ( t1.homework_id = t3.homework_id ) \n     order by 4 asc \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis removes the now unnecessary query to check that it is a valid user id (on ct_login)\nand uses a \u003ccode\u003ewith\u003c/code\u003e to set up the per-user set of data.\u003c/p\u003e\n\n\u003cp\u003eThe question is now how to figure out what the query planner is doing and what queries\nneed to be optimized.\u003c/p\u003e\n","Lesson_no":34}' where homework_id = '7025f1b4-5ec2-4ca4-735d-acce1dfd3b84';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '540d307c-c653-4576-6fb8-a2451280918f', 'Interactive - 35 - views', '35', 'hw35.mp4', 'hw35.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '6fe602d7-8dc2-4625-5050-3f108624a11e', 'view' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '6fe602d7-8dc2-4625-5050-3f108624a11e', '540d307c-c653-4576-6fb8-a2451280918f' );
insert into ct_tag ( tag_id, tag_word ) values ( '1979df26-2d7c-490b-4a25-9ccb5859627e', 'unused index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '1979df26-2d7c-490b-4a25-9ccb5859627e', '540d307c-c653-4576-6fb8-a2451280918f' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '045b766b-f4c6-43cb-4d08-145defab75aa', 35, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 35 - views\u003c/h1\u003e\n\n\u003cp\u003eThe database can create a pre-defined select called a view.\nA view is a query that you set up that looks like a table when selected from but\ncan be a join or other set of operations.  It is kind of like a query-macro.\u003c/p\u003e\n\n\u003cp\u003eFor example we can create a view that let\u0026rsquo;s us list the unused indexes.\u003c/p\u003e\n\n\u003cp\u003eThis is the file hw35_1.sql.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE VIEW unused_index as \nSELECT \n    idstat.relname AS TABLE_NAME, \n    indexrelname AS INDEX_NAME, \n    idstat.idx_scan AS index_scans_count, \n    pg_size_pretty(pg_relation_size(indexrelid)) AS index_size, \n    tabstat.idx_scan AS table_reads_index_count, \n    tabstat.seq_scan AS table_reads_seq_count, \n    tabstat.seq_scan + tabstat.idx_scan AS table_reads_count, \n    n_tup_upd + n_tup_ins + n_tup_del AS table_writes_count, \n    pg_size_pretty(pg_relation_size(idstat.relid)) AS table_size \nFROM pg_stat_user_indexes AS idstat \n\tJOIN pg_indexes ON indexrelname = indexname \n\t\t\tAND idstat.schemaname = pg_indexes.schemaname \n\tJOIN pg_stat_user_tables AS tabstat ON idstat.relid = tabstat.relid \nWHERE indexdef !~* ''unique'' \nORDER BY \n    idstat.idx_scan DESC, \n    pg_relation_size(indexrelid) DESC \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen when we want the list of unused indexes we just select from the view.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT * from unused_index; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: view,\u0026ldquo;unused index\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":35}' where homework_id = '540d307c-c653-4576-6fb8-a2451280918f';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '3ddd578f-198b-482f-6ca3-67e903f493fc', 'Interactive - 36 - stored procedures', '36', 'hw36.mp4', 'hw36.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a55fa764-1744-4482-4a6d-36e07b3ae903', 'function' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a55fa764-1744-4482-4a6d-36e07b3ae903', '3ddd578f-198b-482f-6ca3-67e903f493fc' );
insert into ct_tag ( tag_id, tag_word ) values ( '9cfee47b-7d57-40f9-6d0b-b9e716b216b9', 'stored procedure' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '9cfee47b-7d57-40f9-6d0b-b9e716b216b9', '3ddd578f-198b-482f-6ca3-67e903f493fc' );
insert into ct_tag ( tag_id, tag_word ) values ( 'f1d641a7-3c53-498d-7418-324312bc451b', 'transaction' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'f1d641a7-3c53-498d-7418-324312bc451b', '3ddd578f-198b-482f-6ca3-67e903f493fc' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '6f73514b-a0c8-4e11-4251-aa3fb4ef2360', 36, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 36 - stored procedures\u003c/h1\u003e\n\n\u003cp\u003eWe have been using store procedures for a number of examples so far.    Triggers in\nPostgreSQL call stored procedures.   In PostgreSQL all stored procedures are called \u0026ldquo;functions\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003ePostgreSQL allows for stored procedures in multiple languages.   The default language is PL/pgSQL\nand this us defined using the \u003ccode\u003eLANGUAGE\u003c/code\u003e specifier.  I usually put this at the end but it can\nbe done at the top also.\u003c/p\u003e\n\n\u003cp\u003eThe section from $$ to $$ is the body that is saved and run when the function is called.\u003c/p\u003e\n\n\u003cp\u003eThere are a slew of options on how a function is run.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE or REPLACE FUNCTION function_name ( parameter_list varchar ) \nRETURNS varchar  \nAS $$ \nDECLARE \n\tdata text; \nBEGIN \n \n\t-- do something \n \n\tRETURN data; \nEND; \n$$ LANGUAGE plpgsql; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe easy way to call a function is with a \u0026ldquo;select\u0026rdquo;.\nFor example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect function_name ( ''a'' ); \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eStored procedures have some advantages.  The code is run inside or near to the database.  This makes\nthe cost of moving data back and forth very low.    Stored procedures are a well developed and optimized\ntechnology and tend to be fast.\u003c/p\u003e\n\n\u003cp\u003eWith PL/pgSQL as the language the data types exactly match with the database and the handling of values\nlike NULL is clear and easy.\u003c/p\u003e\n\n\u003cp\u003eWe can check to see if a select fails to return data and for nulls in a fashion that is built into the\nlanguage.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE or REPLACE FUNCTION function_name ( parameter_list varchar ) \nRETURNS varchar  \nAS $$ \nDECLARE \n\tdata text; \nBEGIN \n \n\tSELECT ''PASS'' \n\t\tINTO data \n\t\tFROM ct_config  \n\t\tWHERE config_id = 1; \n\tIF not found THEN \n\t\tdata = ''FAIL''; \n\tEND IF; \n \n\tRETURN data; \nEND; \n$$ LANGUAGE plpgsql; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn PostgreSQL a stored procedure creates a transaction at the \u0026ldquo;BEGIN\u0026rdquo; and ends it at the\n\u0026ldquo;END\u0026rdquo;.  This means that if you \u0026ldquo;RAISE\u0026rdquo; an error in the middle it will result in rolling back\nthe entire transaction.\u003c/p\u003e\n\n\u003cp\u003eStored procedures can return rows of data.  Note the fact that the loop returns a single\nrow and then restart\u0026rsquo;s for each additional row.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e-- using table from hw13_4.sql us_state \n \nCREATE OR REPLACE FUNCTION getStateFipsCode()  \nRETURNS SETOF us_state  \nAS $$ \nDECLARE \n    r us_state%rowtype; \nBEGIN \n    FOR r IN \t \n\t\tSELECT * FROM us_state \n\t\tWHERE gdp_growth \u0026gt; 1.0 \n    LOOP \n \n        -- can do some processing here \n \n        RETURN NEXT r; -- return current row of SELECT \n    END LOOP; \n    RETURN; \nEND \n$$ \nLANGUAGE ''plpgsql'' ; \n \nSELECT *  \n\tFROM getStateFipsCode() \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;function\u0026rdquo;,\u0026ldquo;stored procedure\u0026rdquo;,\u0026ldquo;transaction\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":36}' where homework_id = '3ddd578f-198b-482f-6ca3-67e903f493fc';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '131eaf44-f860-46d7-4602-2f1668fa37e5', 'Interactive - 37 - encrypted/hashed passwords storage', '37', 'hw37.mp4', 'hw37.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd77915b2-07f2-4860-5f29-9cab91be7dba', 'password' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd77915b2-07f2-4860-5f29-9cab91be7dba', '131eaf44-f860-46d7-4602-2f1668fa37e5' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ccc9bbef-63ac-440e-6081-53abdc3bd652', 'hash password' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ccc9bbef-63ac-440e-6081-53abdc3bd652', '131eaf44-f860-46d7-4602-2f1668fa37e5' );
insert into ct_tag ( tag_id, tag_word ) values ( '91937010-5876-46d9-55b2-d3f846200d39', 'encrypted' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '91937010-5876-46d9-55b2-d3f846200d39', '131eaf44-f860-46d7-4602-2f1668fa37e5' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '4a7d04f0-f8aa-4e5f-74ed-88690c1e17bf', 37, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 37 - encrypted/hashed passwords storage\u003c/h1\u003e\n\n\u003cp\u003eIt is a good idea to store passwords in a way that if the entire database is lost\nyou do not loos anybody\u0026rsquo;s password.  You need to hash them or encrypt them\nin the table.\u003c/p\u003e\n\n\u003cp\u003eThere are hash functions that are designed for this.  Of of these is\u003cbr /\u003e\nthe blowfish algorithm.  It is denoted to in the encryption parameters as \u0026lsquo;bf\u0026rsquo;.\u003c/p\u003e\n\n\u003cp\u003eFirst, we need to enable pgcrypto:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE EXTENSION if not exists pgcrypto; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen, we can create a table for storing user credentials:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE IF EXISTS example_users ; \n \nCREATE TABLE example_users ( \n\tid SERIAL PRIMARY KEY, \n\temail TEXT NOT NULL UNIQUE, \n\tpassword TEXT NOT NULL \n); \n \n \nCREATE OR REPLACE function example_users_insert() \nRETURNS trigger AS $$ \nDECLARE  \n\tl_salt text; \n\tl_pw text; \nBEGIN \n\tselect gen_salt(''bf'') \n\t\tinto l_salt; \n\tl_pw = NEW.password; \n\tNEW.password = crypt(l_pw, l_salt); \n\tRETURN NEW; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \nCREATE TRIGGER example_users_insert_trig \nBEFORE insert or update ON example_users \nFOR EACH ROW \nEXECUTE PROCEDURE example_users_insert(); \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen we insert into the table we can then save the hash of the password instead of the\npassword itself.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO example_users (email, password) VALUES  \n\t( ''pschlump@uwyo.edu'', ''my-very-bad-password'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen we want to validate that a password that has been passed in is correct\nwe compare to the hashed value with:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT id  \n\tFROM example_users as t1 \n\tWHERE t1.email = ''pschlump@uwyo.edu'' \n\t  AND t1.password = crypt(''my-very-bad-password'', t1.password) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis would be a good candidate to encapsulate into a stored procedure.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE or REPLACE FUNCTION login_correct ( un varchar, pw varchar ) \nRETURNS varchar  \nAS $$ \nDECLARE \n\tdata text; \nBEGIN \n \n\tBEGIN \n\t\tSELECT ''VALID-USER'' \n\t\t\tINTO data \n\t\t\tFROM example_users as t1 \n\t\t\tWHERE t1.email = un \n\t\t\t  AND t1.password = crypt(pw, t1.password) \n\t\t\t; \n\t\tIF not found THEN \n\t\t\tdata = ''Incorrect username or password.''; \n\t\tEND IF; \n\tEXCEPTION\t \n\t\tWHEN no_data_found THEN \n\t\t\tdata = ''Incorrect username or password.''; \n\t\tWHEN too_many_rows THEN \n\t\t\tdata = ''Incorrect username or password.''; \n\t\tWHEN others THEN \n\t\t\tdata = ''Incorrect username or password.''; \n\tEND; \n \n\tRETURN data; \nEND; \n$$ LANGUAGE plpgsql; \n \nselect login_correct ( ''pschlump@uwyo.edu'', ''my-very-bad-password'' ); \n \nselect login_correct ( ''pschlump@uwyo.edu'', ''my-VERY-bad-password'' ); \n \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;password\u0026rdquo;,\u0026ldquo;hash password\u0026rdquo;,\u0026ldquo;encrypted\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":37}' where homework_id = '131eaf44-f860-46d7-4602-2f1668fa37e5';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'b28660b9-4d92-43c1-54bb-7c511829ec5d', 'Interactive - 38 - key word lookup', '38', 'hw38.mp4', 'hw38.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'b995f344-c109-4c53-65ce-c2314e206f0e', 'reverse key index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'b995f344-c109-4c53-65ce-c2314e206f0e', 'b28660b9-4d92-43c1-54bb-7c511829ec5d' );
insert into ct_tag ( tag_id, tag_word ) values ( '2a35937d-020b-4330-5a32-f7c1e9f55130', 'like' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2a35937d-020b-4330-5a32-f7c1e9f55130', 'b28660b9-4d92-43c1-54bb-7c511829ec5d' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ce8660ec-7456-4636-69eb-f34f1e11840b', 'keyword' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ce8660ec-7456-4636-69eb-f34f1e11840b', 'b28660b9-4d92-43c1-54bb-7c511829ec5d' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '3dbcda2d-1ada-4eb5-7b65-67c724f988c7', 38, 'SQL-Select', 'select ''PASS'' as x from ( select count(1) as x from indexed_documents where document_token is not null ) as t1 where t1.x = 4 ' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'd943a63b-cb17-4a95-5140-1ced0bfdd9d7', 38, 'hw38_07.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '655f8203-8d99-4e09-7fad-44bd1fc0b157', 38, 'hw38_10.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'b1c3e67a-1aa7-47e4-46a1-6850f812578d', 38, 'hw38_11.sql' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '26c887e0-903f-4da1-4b39-2c22b36f05aa', 38, 'hw38_12.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 38 - key word lookup\u003c/h1\u003e\n\n\u003cp\u003e(Note this set of information is the basis for Assignment 03 on keywords)\u003c/p\u003e\n\n\u003cp\u003ePostgreSQL includes an extensive set of tools for key word lookup.   The word lookup is efficient and takes account of items like language and root words.\u003c/p\u003e\n\n\u003cp\u003eWith regular SQL you have a pattern matching operator, \u003ccode\u003eLIKE\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT real_name  \n\tFROM name_list  \n\tWHERE real_name  LIKE ''%ilip%'' \n;  \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003e%\u003c/code\u003e is wild card.  Because of the use of a wild car this kind of a query will usually result in a full table scan.  In some cases it is possible to use\na GIST index on the field and that will make the search faster.\u003c/p\u003e\n\n\u003cp\u003ePostgreSQL has an extended set of patterns that allows matching a wider set of values.  This is with the \u003ccode\u003eSIMILAR TO\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT real_name  \n\tFROM name_list  \n\tWHERE real_name SIMILAR TO ''(p|P)hilip%'' \n;  \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePostgreSQL also includes the ability to use regular expressions on text fields.  This uses POSIX regular expressions.  The Operator is the tilde \u003ccode\u003e~\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT real_name  \n\tFROM name_list  \n\tWHERE real_name ~ ''[pP]hilip.*'' \n;  \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNone of these takes account of things like \u0026ldquo;San Francisco\u0026rdquo;  is a single \u0026ldquo;term\u0026rdquo; in the English language.   Also things like \u0026ldquo;the\u0026rdquo; are not words that need to\nbe indexed.  Other languages like French have similar constructs.  PostgreSQL has an extensive set of capabilities for efficiently searching and indexing\ntext data.\u003c/p\u003e\n\n\u003cp\u003eComparable tools are Lucine and Elastisearch.  Google also provides dedicated hardware for this kind of search.  All of these alternatives are very\nexpensive.  Many tolls can benefit from a search like this and at a cost of close to 0 (PostgreSQL is open source) this makes for a very interning\nalternative.\u003c/p\u003e\n\n\u003ch2\u003etsvector\u003c/h2\u003e\n\n\u003cp\u003eThe database uses a pair of values and an index.  The first of these is a \u003ccode\u003etsvector\u003c/code\u003e.  This converts text into a set of words and locations.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT to_tsvector(''The quick brown fox jumped over the lazy dog.'');   \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWill result in\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e                      to_tsvector                       \n------------------------------------------------------- \n ''brown'':3 ''dog'':9 ''fox'':4 ''jump'':5 ''lazi'':8 ''quick'':2 \n(1 row) \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis set of data has \u0026ldquo;The\u0026rdquo; eliminated the \u0026ldquo;word\u0026rdquo; location for each word.  The words are converted into the root words.  \u0026ldquo;lazy\u0026rdquo; is\u003cbr /\u003e\nconfuted to \u0026ldquo;lazi\u0026rdquo; the root word.\u003c/p\u003e\n\n\u003ch2\u003etsquery\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003etsquery\u003c/code\u003e is the query side of this along with the \u003ccode\u003e@@\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT to_tsvector(''The quick brown fox jumped over the lazy dog'')   \n    @@ to_tsquery(''fox'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWill return \u0026rsquo;t\u0026rsquo; for true.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT to_tsvector(''The quick brown fox jumped over the lazy dog'')   \n    @@ to_tsquery(''bob'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWill return \u0026lsquo;f\u0026rsquo; for false.\u003c/p\u003e\n\n\u003cp\u003eThe query processing also allows for operators in a query.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT to_tsvector(''The quick brown fox jumped over the lazy dog'')   \n    @@ to_tsquery(''fox | duck'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWill return \u0026rsquo;t\u0026rsquo; for true.\u003c/p\u003e\n\n\u003cp\u003eThere are and, \u003ccode\u003e\u0026amp;\u003c/code\u003e, or, \u003ccode\u003e|\u003c/code\u003e and  not, \u003ccode\u003e!\u003c/code\u003e operators.\u003c/p\u003e\n\n\u003ch2\u003eAs a table\u003c/h2\u003e\n\n\u003cp\u003eLet\u0026rsquo;s put the tsvector data type into a table and add some data.\u003c/p\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw38_07.sql\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists indexed_docs ; \n \nCREATE TABLE indexed_docs ( \n\tdoc_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n    document_title TEXT NOT NULL, \n    document_body TEXT NOT NULL, \n    document_tokens TSVECTOR  \n); \n \nINSERT INTO indexed_docs ( document_title, document_body ) values \n\t( ''On Tyrany'', ''A book about how to stop tyrants and how to deal with the devaluation of democracy.'' ), \n\t( ''How Democracies Die'', ''A look at how other democracies around the world have failed.'' ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNote the use of the \u003ccode\u003eTSVECTOR\u003c/code\u003e data type.\u003c/p\u003e\n\n\u003cp\u003eThe insert will leave the \u003ccode\u003edocument_tokens\u003c/code\u003e as a null field.  We will have to update the table to set\nthe tokens.  Also note that this ignores the \u0026ldquo;document_body\u0026rdquo; field.  We will get to that in a little bit.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eUPDATE indexed_docs d1   \n\tSET document_tokens = to_tsvector(d1.document_title)   \n\tFROM indexed_docs d2 \n;   \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eLet\u0026rsquo;s query for a pair of words.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT doc_id, document_title  \n\tFROM indexed_docs   \n\tWHERE document_tokens @@ to_tsquery(''die \u0026amp; democracy'') \n;   \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eHaving to update the table after it is changed is far from ideal.   Let\u0026rsquo;s replace this with\na trigger so that the tokens are always updated.    Also we will add a ranking and  the \u003ccode\u003edocument_body\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw38_10.sql\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE function indexed_docs_ins_upd() \nRETURNS trigger AS $$ \nDECLARE \n\tl_lang text; \nBEGIN \n\tl_lang = ''english''; \n\tNEW.document_tokens =  \n\t\tsetweight ( to_tsvector ( l_lang::regconfig, coalesce(NEW.document_title,'''')), ''A'' ) || \n\t\tsetweight ( to_tsvector ( l_lang::regconfig, coalesce(NEW.document_body,'''')), ''B'' ) \n\t; \n\tRETURN NEW; \nEND \n$$ LANGUAGE ''plpgsql''; \n \n \nDROP TRIGGER if exists  indexd_docs_trig_1 on indexed_docs; \n \nCREATE TRIGGER indexd_docs_trig_1 \n\tBEFORE insert or update ON indexed_docs \n\tFOR EACH ROW \n\tEXECUTE PROCEDURE indexed_docs_ins_upd() \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand we will add some data to verify that the trigger works.\u003c/p\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw38_11.sql\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eINSERT INTO indexed_docs ( document_title, document_body ) values \n\t( ''Kleptopia: How Dirty Money Is Conquering the World'', ''How the flow of dirty money is chaing world politics''), \n\t( ''The End of Democracies'', ''How democracies aroudn the world are failing.'' ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eA select on the indexed_documents will show that all 4 rows have the \u003ccode\u003edocument_tokens\u003c/code\u003e field\u003cbr /\u003e\nfilled in.\u003c/p\u003e\n\n\u003cp\u003eNow add an index to the field so that searches will be fast.\u003c/p\u003e\n\n\u003cp\u003eRun the file \u003ccode\u003ehw38_12.sql\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE INDEX if not exists indexed_docs_tsv_1 ON indexed_docs USING GIN (document_tokens);   \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;reverse key index\u0026rdquo;,\u0026ldquo;like\u0026rdquo;,\u0026ldquo;keyword\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":38}' where homework_id = 'b28660b9-4d92-43c1-54bb-7c511829ec5d';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a9d4c79c-5b34-4f5c-6a4c-3c91d202bc2f', 'Interactive - 39 - materialized views', '39', 'hw39.mp4', 'hw39.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'c5f5580b-dba5-46f2-4f04-9b22b4548e83', 'materialized view' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c5f5580b-dba5-46f2-4f04-9b22b4548e83', 'a9d4c79c-5b34-4f5c-6a4c-3c91d202bc2f' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '8d385acd-236e-49fa-7fca-023b60e722f3', 39, 'CountRows', '{%22Nr%22%3A[3]}' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( 'e49fa4d3-9317-4aa3-5bf2-e4bd7b0a252c', 39, 'hw39_2.sql' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 39 - materialized views\u003c/h1\u003e\n\n\u003cp\u003eOne of the ways that you can improve performance in PostgreSQL and other SQL databases is a materialized view.\nA regular view is a kind of \u0026ldquo;macro\u0026rdquo; that replaces the query\u0026rsquo;s from with the body of the view.\u003c/p\u003e\n\n\u003cp\u003eIn a materialized view the data itself is copied into the \u0026ldquo;view\u0026rdquo; and you can add indexes and other things\nthat optimize queries on this set of data.\u003c/p\u003e\n\n\u003cp\u003eThe downsize to materialized views is that the data can get out of sync with the original data.\u003c/p\u003e\n\n\u003cp\u003eMaterialized views are very useful when the source of the data is a foreign data wrapper.  Especially\nwhen the foreign data is slow or only periodically changes.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s use our table with some names in it. (From Interactive Homework 08)\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecreate table name_list ( \n\tname_list_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\treal_name text, \n\tage int check ( age \u0026gt; 0 and age \u0026lt; 154 ),\t \n\tstate char varying (2) \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFirst let\u0026rsquo;s refresh the data in name_list so that we know what is in it.\u003c/p\u003e\n\n\u003cp\u003eRun File \u003ccode\u003ehw39_2.sql\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDELETE FROM name_list ; \n \nINSERT INTO name_list ( real_name, age, state, pay ) values \n\t( ''Bob True'',            22, ''WY'', 31000 ), \n\t( ''Jane True'',           20, ''WY'', 28000 ), \n\t( ''Tom Ace'',             31, ''NJ'', 82500 ), \n\t( ''Steve Pen'',           33, ''NJ'', 89400 ), \n\t( ''Laura Jean Alkinoos'', 34, ''PA'', 120000 ), \n\t( ''Philip Schlump'',      62, ''WY'', 101200 ), \n\t( ''Liz Trubune'',         30, ''WY'', 48000 ), \n\t( ''Lary Smith'',          58, ''NJ'', 48000 ), \n\t( ''Dave Dave'',           21, ''NJ'', 48000 ), \n\t( ''Laura Ann Alkinoos'',  34, ''PA'', 48000 ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow a materialize view that rolls up the count of the number of names in each state.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP materialized view count_by_state_of_names ; \n \nCREATE materialized view count_by_state_of_names as \n\tSELECT count(1) as count_by_state, \n\t\tstate \n\tFROM name_list \n\tGROUP BY state \n; \nCREATE INDEX count_by_state_of_names_p1 on count_by_state_of_names ( count_by_state ); \nCREATE INDEX count_by_state_of_names_p2 on count_by_state_of_names ( state ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow let\u0026rsquo;s select the data:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nSELECT * from count_by_state_of_names ; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should get back 3 rows.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;materialized view\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":39}' where homework_id = 'a9d4c79c-5b34-4f5c-6a4c-3c91d202bc2f';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2d96b794-f3f9-46e8-4a75-2c242ea9416a', 'Interactive - 40 - refresh materialized view', '40', 'hw40.mp4', 'hw40.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'c5f5580b-dba5-46f2-4f04-9b22b4548e83', '2d96b794-f3f9-46e8-4a75-2c242ea9416a' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'd8288635-8f0e-4dac-73c0-75c0d781e0b6', 40, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 40 - refresh materialized view\u003c/h1\u003e\n\n\u003cp\u003eLast time we created a materialized view, \u003ccode\u003ecount_by_state_of_names\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis time let\u0026rsquo;s refresh it with new data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eREFRESH MATERIALIZED VIEW count_by_state_of_names; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMaterialized views don\u0026rsquo;t change when the underlying data changes.\u003cbr /\u003e\nYou have to refresh them.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;materialized view\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":40}' where homework_id = '2d96b794-f3f9-46e8-4a75-2c242ea9416a';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2902c456-2d9d-4e4d-44ba-699e798c7233', 'Interactive - 41 - case/when - if in projected columns', '41', 'hw41.mp4', 'hw41.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd7bc91ca-4621-4530-5893-af7605881cbc', 'when' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd7bc91ca-4621-4530-5893-af7605881cbc', '2902c456-2d9d-4e4d-44ba-699e798c7233' );
insert into ct_tag ( tag_id, tag_word ) values ( '2c56075f-645f-463e-51b5-f681e67c41b5', 'projected data' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '2c56075f-645f-463e-51b5-f681e67c41b5', '2902c456-2d9d-4e4d-44ba-699e798c7233' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '347f9ff0-286d-404e-4c56-fcec8e95814f', 41, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 41 - case/when - if in projected columns\u003c/h1\u003e\n\n\u003cp\u003eYou can change the return values in the projected columns.\u003c/p\u003e\n\n\u003cp\u003eFor example if you want to map certain values to new values in a query.\nAn example with the name_list table is to create a new column that is\nan in-Wyoming column.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT \n\t\t  t1.real_name \n\t\t, t1.state \n\t\t, case \n\t\t\twhen t1.state = ''WY'' then ''y'' \n\t\t\twhen t1.state is null then ''n'' \n\t\t\telse ''n'' \n\t\t  end as \u0026quot;in_wyoming\u0026quot; \n\tFROM name_list as t1 \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;when\u0026rdquo;,\u0026ldquo;projected data\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":41}' where homework_id = '2902c456-2d9d-4e4d-44ba-699e798c7233';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '2714b9ff-74b2-4eee-6355-4ad18c2c0005', 'Interactive - 42 - foreign data wrapper', '42', 'hw42.mp4', 'hw42.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'ac0e38bd-765f-4826-60d4-9a11e0c840b4', 'foreign data wrapper' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'ac0e38bd-765f-4826-60d4-9a11e0c840b4', '2714b9ff-74b2-4eee-6355-4ad18c2c0005' );
insert into ct_tag ( tag_id, tag_word ) values ( 'b3394c6e-6aa7-44df-775e-76469e07fb19', 'csv' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'b3394c6e-6aa7-44df-775e-76469e07fb19', '2714b9ff-74b2-4eee-6355-4ad18c2c0005' );
insert into ct_tag ( tag_id, tag_word ) values ( 'a4070b2c-75e7-4857-5135-fffc112b4ae3', 'fdw' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'a4070b2c-75e7-4857-5135-fffc112b4ae3', '2714b9ff-74b2-4eee-6355-4ad18c2c0005' );
insert into ct_tag ( tag_id, tag_word ) values ( '4f853045-5c11-4bf2-5543-9ae3943c7298', 'import data' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4f853045-5c11-4bf2-5543-9ae3943c7298', '2714b9ff-74b2-4eee-6355-4ad18c2c0005' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'b40fb118-c09c-419b-5a55-30ba674d54bf', 42, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 42 - foreign data wrapper\u003c/h1\u003e\n\n\u003cp\u003ePostgreSQL can access data outside of the database.  This is called a foreign data wrapper (FDW).   There are all sorts of foreign data\nwrappers.  You can access data in other databases like Oracle or MySQL.  You can access\ndata in NoSQL databases like MongoDB.     For a full list (of over 30 different kinds of data you can access)\n\u003ca href=\"https://wiki.postgresql.org/wiki/Foreign_data_wrappers\"\u003ehttps://wiki.postgresql.org/wiki/Foreign_data_wrappers\u003c/a\u003e .\u003c/p\u003e\n\n\u003cp\u003eAlso you can use files like comma separated value (CSV) files through the FDW.  There is a file_fdw data wrapper!\u003c/p\u003e\n\n\u003cp\u003eTo set this up you need to create the extension in PostgreSQL.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE EXTENSION if not exists file_fdw; \nCREATE SERVER import FOREIGN DATA WRAPPER file_fdw; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen we can use data on the PostgreSQL server and access it.   There is a file with data on our server at \u003ccode\u003e/home/uw4820/hw42_data.csv\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe data in the file is:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eabc,def \nghi,jkl \nabc,jkl \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe can create a table that matches with this and imports the data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP FOREIGN TABLE if exits table1_import ; \n \nCREATE FOREIGN TABLE table1_import ( \n\tcol1 text, \n\tcol2 text \n) SERVER import OPTIONS ( filename ''/home/uw4820/hw42_03.csv'', format ''csv'' ); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we can use standard selects to access the data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nSELECT * from table1_import; \n \nSELECT * from table1_import where col1 = ''abc''; \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe limitation on the selects and the table is that it will do a full table scan (slow)\neach time you access the data.  If you want to create indexes on it you need to use\na materialized view or create a new table with the data in it.  Then create indexes\nand other data objects based on that table.\u003c/p\u003e\n\n\u003cp\u003eYou can use FDW to access other PostgreSQL databases and other databases in different\nmachines.\u003c/p\u003e\n\n\u003cp\u003eAnother way to access a different database is to use \u003ccode\u003edblink\u003c/code\u003e in a query.  This is\nmore efficient, but can only be used to access database in the same running instance\nof PotreSQL.\u003c/p\u003e\n\n\u003cp\u003eThis is an example of using \u003ccode\u003edblink\u003c/code\u003e - you don\u0026rsquo;t need to run it.  It is just an example.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT *  \nFROM   table1 as t1  \nLEFT   JOIN ( \n   SELECT * \n   FROM dblink(''dbname=database2'',''SELECT t3.id, t3.code FROM table2 as t3'') AS t2(id int, code text) \n) AS t4 ON t4.column = t1.column \n; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;foreign data wrapper\u0026rdquo;,\u0026ldquo;csv\u0026rdquo;,\u0026ldquo;fdw\u0026rdquo;,\u0026ldquo;import data\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":42}' where homework_id = '2714b9ff-74b2-4eee-6355-4ad18c2c0005';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a397ba5c-ae94-4fff-70a0-5d39f2d3bba4', 'Interactive - 43 - indexes on functions - soundex', '43', 'hw43.mp4', 'hw43.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'dbff2892-8d9e-482d-7e0f-507ed9fd4795', 'fuzzy match' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'dbff2892-8d9e-482d-7e0f-507ed9fd4795', 'a397ba5c-ae94-4fff-70a0-5d39f2d3bba4' );
insert into ct_tag ( tag_id, tag_word ) values ( '4d9340b5-7db5-4f47-6679-e1fc8fa6f704', 'soundex' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4d9340b5-7db5-4f47-6679-e1fc8fa6f704', 'a397ba5c-ae94-4fff-70a0-5d39f2d3bba4' );
insert into ct_tag ( tag_id, tag_word ) values ( '8512575b-4c92-4971-75a5-681ed072742b', 'function based index' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '8512575b-4c92-4971-75a5-681ed072742b', 'a397ba5c-ae94-4fff-70a0-5d39f2d3bba4' );
insert into ct_file_list ( file_list_id, homework_no, file_name ) values ( '03bb0470-9b8a-496f-47e2-f8ca0dbc8fee', 43, 'hw43_1.sql' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'ad37537a-ebcf-45b9-5f87-3a1f58e3416a', 43, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 43 - indexes on functions - soundex\u003c/h1\u003e\n\n\u003cp\u003eYou can create indexes on the output of functions then use this\nto quickly lookup a row that matches.  An example of this is\nsoundex - a fuzzy match for a name that is based on a phonetic\nlookup.\u003c/p\u003e\n\n\u003cp\u003eNote: If you need to have an effective name lookup there are\nbetter functions for this - search for \u003ccode\u003efuzzy-match  postgresql\u003c/code\u003e\nand there is a built in library - but the other fuzzy match\nfunctions are much more complex.\u003c/p\u003e\n\n\u003cp\u003eAnother example would be an upper or lower case function\u003cbr /\u003e\napplied to a text field.\u003c/p\u003e\n\n\u003cp\u003eThis example is the how-to build an index using a function.\nSo\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003eThe function is\u0026hellip;\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE FUNCTION soundex(input text) RETURNS text \nIMMUTABLE STRICT COST 500 LANGUAGE plpgsql \nAS $$ \nDECLARE \n\tsoundex text = ''''; \n\tchar text; \n\tsymbol text; \n\tlast_symbol text = ''''; \n\tpos int = 1; \nBEGIN \n\tWHILE length(soundex) \u0026lt; 4 LOOP \n\t\tchar = upper(substr(input, pos, 1)); \n\t\tpos = pos + 1; \n\t\tCASE char \n\t\tWHEN '''' THEN \n\t\t\t-- End of input string \n\t\t\tIF soundex = '''' THEN \n\t\t\t\tRETURN ''''; \n\t\t\tELSE \n\t\t\t\tRETURN rpad(soundex, 4, ''0''); \n\t\t\tEND IF; \n\t\tWHEN ''B'', ''F'', ''P'', ''V'' THEN \n\t\t\tsymbol = ''1''; \n\t\tWHEN ''C'', ''G'', ''J'', ''K'', ''Q'', ''S'', ''X'', ''Z'' THEN \n\t\t\tsymbol = ''2''; \n\t\tWHEN ''D'', ''T'' THEN \n\t\t\tsymbol = ''3''; \n\t\tWHEN ''L'' THEN \n\t\t\tsymbol = ''4''; \n\t\tWHEN ''M'', ''N'' THEN \n\t\t\tsymbol = ''5''; \n\t\tWHEN ''R'' THEN \n\t\t\tsymbol = ''6''; \n\t\tELSE \n\t\t\t-- Not a consonant; no output, but next similar consonant will be re-recorded \n\t\t\tsymbol = ''''; \n\t\tEND CASE; \n \n\t\tIF soundex = '''' THEN \n\t\t\t-- First character; only accept strictly English ASCII characters \n\t\t\tIF char ~\u0026gt;=~ ''A'' AND char ~\u0026lt;=~ ''Z'' THEN \n\t\t\t\tsoundex = char; \n\t\t\t\tlast_symbol = symbol; \n\t\t\tEND IF; \n\t\tELSIF last_symbol != symbol THEN \n\t\t\tsoundex = soundex || symbol; \n\t\t\tlast_symbol = symbol; \n\t\tEND IF; \n\tEND LOOP; \n \n\tRETURN soundex; \nEND; \n$$; \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou should already have the function loaded.  This function should be setup as part of your account\nso you should not need to run it.  The file if it is not there is hw43_1.sql.\u003c/p\u003e\n\n\u003cp\u003eTo create the index:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE INDEX name_list_func_soundex ON name_list (soundex(real_name)); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen to query on this field:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT *  \n\tFROM name_list  \n\tWHERE soundex(real_name) = soundex(''philip schlump'') \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis will use the output from the function to do the query.  This makes for a fast lookup.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;fuzzy match\u0026rdquo;,\u0026ldquo;soundex\u0026rdquo;,\u0026ldquo;function based index\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":43}' where homework_id = 'a397ba5c-ae94-4fff-70a0-5d39f2d3bba4';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '86f14bb3-21c3-427d-7098-f291742e24bc', 'Interactive - 44 - alter table to add columns, remove columns', '44', 'hw44.mp4', 'hw44.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '4c051c16-00b7-43a0-6add-8241317d89fe', 'alter' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4c051c16-00b7-43a0-6add-8241317d89fe', '86f14bb3-21c3-427d-7098-f291742e24bc' );
insert into ct_tag ( tag_id, tag_word ) values ( '56e27c1b-433b-439f-7b85-b13a53e5967d', 'add column' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '56e27c1b-433b-439f-7b85-b13a53e5967d', '86f14bb3-21c3-427d-7098-f291742e24bc' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'd88141d2-6cbf-4d30-45af-79f7887d7f1e', 44, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 44 - alter table to add columns, remove columns\u003c/h1\u003e\n\n\u003cp\u003eYou can alter tables to add or remove columns or to rename columns.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDROP TABLE if exists name_list2 ; \nCREATE TABLE name_list2 ( \n\tname_list_id UUID NOT NULL DEFAULT uuid_generate_v4() primary key, \n\treal_name text check ( length(real_name) \u0026gt;= 1 ) not null, \n\tage int check ( age \u0026gt; 0 and age \u0026lt; 154 ) not  null,\t \n\tstate char varying (2) not null, \n\tpay numeric(10,2)  \n); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSuppose that you decide that you really need the state name and a state_2letter_code as the columns.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eALTER TABLE name_list2 rename column state to state_2letter_code; \nALTER TABLE name_list2 add column state varchar(50); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;alter\u0026rdquo;,\u0026ldquo;add column\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":44}' where homework_id = '86f14bb3-21c3-427d-7098-f291742e24bc';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '19c0d1b3-1079-44d7-51b8-48240286d481', 'Interactive - 45 - alter table to add columns, remove columns', '45', 'hw45.mp4', 'hw45.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4c051c16-00b7-43a0-6add-8241317d89fe', '19c0d1b3-1079-44d7-51b8-48240286d481' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '56e27c1b-433b-439f-7b85-b13a53e5967d', '19c0d1b3-1079-44d7-51b8-48240286d481' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '39bf6d90-e122-4505-5c17-e661c8ad0314', 45, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 45 - alter table to add columns, remove columns\u003c/h1\u003e\n\n\u003cp\u003eUsing the same table, name_list2 lets add a constraint to the us_state table.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eALTER TABLE name_list2 \n\tADD column state_nick_name text \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;alter\u0026rdquo;,\u0026ldquo;add column\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":45}' where homework_id = '19c0d1b3-1079-44d7-51b8-48240286d481';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '457083b4-0150-47ca-4458-fdd4727fc245', 'Interactive - 46 -  NULL - differences between databases', '46', 'hw46.mp4', 'hw46.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '71c7ae47-4f2f-4772-6373-f4dc15731654', 'NULL' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '71c7ae47-4f2f-4772-6373-f4dc15731654', '457083b4-0150-47ca-4458-fdd4727fc245' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( 'dd56ad89-35d7-4d98-4cb5-1e2cf5718631', 46, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 46 -  NULL - differences between databases\u003c/h1\u003e\n\n\u003cp\u003eBy now you have noticed that if a column allows you can have NULL values in it.\nThis is a non-data value.\u003c/p\u003e\n\n\u003cp\u003eThe handling of NULL differers just enough between different databases to make\ncode non-portable from database to database (At least it requires a lot of\u003cbr /\u003e\neffort to port).\u003c/p\u003e\n\n\u003cp\u003eFirst thing to no about NULL is that NULL data is not indexed.  So if you go\nlooking for NULL it will result in a full table scan.\u003c/p\u003e\n\n\u003cp\u003eAlso NULL is not equal to anything.  There is a special pair of operators, \u003ccode\u003eIS NULL\u003c/code\u003e and \u003ccode\u003eIS NOT NULL\u003c/code\u003e\nfor checking if a column or value is null.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT ''found'' where NULL = NULL; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ewill return 0 rows because NULL is not equal to anything, even itself.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT ''found'' where NULL is NULL; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePostgreSQL provides 2 functions for dealing with nulls.  The first is \u003ccode\u003enullif\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf the 2 arguments are equal then NULL is returned.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT nullif(1,1); \n \nSELECT nullif(1,2); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf the 2 arguments are NOT equal then the first argument is returned.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT nullif(1,2); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe second function is \u003ccode\u003ecoalesce\u003c/code\u003e.\nThis function substitutes a default value when the first argument is NULL.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT coalesce(NULL,2); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf the first argument is NULL then the defalut, in this case 2, is returned.\u003c/p\u003e\n\n\u003cp\u003eIf the first argument is not NULL then the non-null first argument is returned.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT coalesce(5,2); \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNote: In the Oracle database you use the \u0026lsquo;nvl\u0026rsquo; function and a special table with 1 row in it called \u0026lsquo;dual\u0026rsquo;;\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;NULL\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":46}' where homework_id = '457083b4-0150-47ca-4458-fdd4727fc245';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '33907206-076a-4ab4-427d-f0e2d994b1ed', 'Interactive - 47 - NoSQL databases ( mongoDB ) v.s. JSONb in PostreSQL', '47', 'hw47.mp4', 'hw47.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( '3f64bac7-d569-4b93-6b4b-1268de542e46', 'JSONb' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '3f64bac7-d569-4b93-6b4b-1268de542e46', '33907206-076a-4ab4-427d-f0e2d994b1ed' );
insert into ct_tag ( tag_id, tag_word ) values ( '76a158c6-5802-4442-6bee-01fc421c4ef5', 'MongoDB' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '76a158c6-5802-4442-6bee-01fc421c4ef5', '33907206-076a-4ab4-427d-f0e2d994b1ed' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '0ccb2a95-8fef-422b-4ee4-a64b8db61b2c', 47, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 47 - NoSQL databases ( mongoDB ) v.s. JSONb in PostreSQL\u003c/h1\u003e\n\n\u003cp\u003eOne of the most common alternatives to a SQL database is MongoDB.\nFront end developers like MongoDB because everting is in JSON.\u003c/p\u003e\n\n\u003cp\u003eThere are two reasons why I don\u0026rsquo;t use MongoDB.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eConcurrency control is incredibly important.  Google reviewed\nits code base and counted the number of defects related to bad\u003cbr /\u003e\nimplementations of custom concurrency control.   The problems\nwere bad enough that Google banned the use of MongoDB.\u003c/li\u003e\n\u003cli\u003eEverything that can be done in MogoDB can be done just as\nfast using JSONb data in PostgreSQL.  Also with PostgreSQL\nyou get a complete relational database with tables and\nindexes and spacial data and\u0026hellip;   That other stuff just\nget thrown in.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo\u0026hellip; Let\u0026rsquo;s look at how to use JSONb in PostgreSQL.\u003c/p\u003e\n\n\u003cp\u003eFirst let\u0026rsquo;s create a table.  This is the same as creating a \u0026ldquo;collection\u0026rdquo;\u003cbr /\u003e\nin MongoDB.  The table will use a GIN index to index all of the\u003cbr /\u003e\ndata in the JSON data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop TABLE if exists test_collection ; \n \nCREATE TABLE test_collection ( \n\tid serial primary key not null, \n\tdata JSONB \n); \n \nCREATE INDEX test_collection_gin_1 ON test_collection USING gin (data); \n \nINSERT INTO test_collection ( data ) values\t \n\t( ''{\u0026quot;name\u0026quot;:\u0026quot;bob\u0026quot;}'' ) \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePostgreSQL has a slew of operators.\u003c/p\u003e\n\n\u003cp\u003e| Operator | Right Operand Type | Description                                                                                        | Example                                             | Example Result  |\n|:--------:|--------------------|----------------------------------------------------------------------------------------------------|-----------------------------------------------------|-----------------|\n| \u003ccode\u003e-\u0026gt;\u003c/code\u003e     | int                | Get JSON array element (indexed from zero, negative integers count from the end)                   | \u003ccode\u003e''[{\u0026quot;a\u0026quot;:\u0026quot;foo\u0026quot;},{\u0026quot;b\u0026quot;:\u0026quot;bar\u0026quot;},{\u0026quot;c\u0026quot;:\u0026quot;baz\u0026quot;}]''::json-\u0026gt;2\u003c/code\u003e  | \u003ccode\u003e{\u0026quot;c\u0026quot;:\u0026quot;baz\u0026quot;}\u003c/code\u003e   |\n| \u003ccode\u003e-\u0026gt;\u003c/code\u003e     | text               | Get JSON object field by key                                                                       | \u003ccode\u003e''{\u0026quot;a\u0026quot;: {\u0026quot;b\u0026quot;:\u0026quot;foo\u0026quot;}}''::json-\u0026gt;''a''\u003c/code\u003e                   | \u003ccode\u003e{\u0026quot;b\u0026quot;:\u0026quot;foo\u0026quot;}\u003c/code\u003e   |\n| \u003ccode\u003e-\u0026gt;\u0026gt;\u003c/code\u003e    | int                | Get JSON array element as text                                                                     | \u003ccode\u003e''[1,2,3]''::json-\u0026gt;\u0026gt;2\u003c/code\u003e                               | \u003ccode\u003e3\u003c/code\u003e             |\n| \u003ccode\u003e-\u0026gt;\u0026gt;\u003c/code\u003e    | text               | Get JSON object field as text                                                                      | \u003ccode\u003e''{\u0026quot;a\u0026quot;:1,\u0026quot;b\u0026quot;:2}''::json-\u0026gt;\u0026gt;''b''\u003c/code\u003e                       | \u003ccode\u003e2\u003c/code\u003e             |\n| \u003ccode\u003e#\u0026gt;\u003c/code\u003e     | text[]             | Get JSON object at specified path                                                                  | \u003ccode\u003e''{\u0026quot;a\u0026quot;: {\u0026quot;b\u0026quot;:{\u0026quot;c\u0026quot;: \u0026quot;foo\u0026quot;}}}''::json#\u0026gt;''{a,b}''\u003c/code\u003e        | \u003ccode\u003e{\u0026quot;c\u0026quot;: \u0026quot;foo\u0026quot;}\u003c/code\u003e  |\n| \u003ccode\u003e#\u0026gt;\u0026gt;\u003c/code\u003e    | text[]             | Get JSON object at specified path as text                                                          | \u003ccode\u003e''{\u0026quot;a\u0026quot;:[1,2,3],\u0026quot;b\u0026quot;:[4,5,6]}''::json#\u0026gt;\u0026gt;''{a,2}''\u003c/code\u003e       | \u003ccode\u003e3\u003c/code\u003e             |\n| \u003ccode\u003e@\u0026gt;\u003c/code\u003e     | JSONb              | Does the left JSON value contain the right JSON path/value entries at the top level?               | \u003ccode\u003e''{\u0026quot;a\u0026quot;:1, \u0026quot;b\u0026quot;:2}''::JSONb @\u0026gt; ''{\u0026quot;b\u0026quot;:2}''::JSONb\u003c/code\u003e       |                 |\n| \u003ccode\u003e\u0026lt;@\u003c/code\u003e     | JSONb              | Are the left JSON path/value entries contained at the top level within the right JSON value?       | \u003ccode\u003e''{\u0026quot;b\u0026quot;:2}''::JSONb \u0026lt;@ ''{\u0026quot;a\u0026quot;:1, \u0026quot;b\u0026quot;:2}''::JSONb\u003c/code\u003e       |                 |\n| \u003ccode\u003e?\u003c/code\u003e      | text               | Does the string exist as a top-level key within the JSON value?                                    | \u003ccode\u003e''{\u0026quot;a\u0026quot;:1, \u0026quot;b\u0026quot;:2}''::JSONb ? ''b''\u003c/code\u003e                     |                 |\n| \u003ccode\u003e?|\u003c/code\u003e     | text[]             | Do any of these array strings exist as top-level keys?                                             | \u003ccode\u003e''{\u0026quot;a\u0026quot;:1, \u0026quot;b\u0026quot;:2, \u0026quot;c\u0026quot;:3}''::JSONb ?| array[''b'', ''c'']\u003c/code\u003e |                 |\n| \u003ccode\u003e?\u0026amp;\u003c/code\u003e     | text[]             | Do all of these array strings exist as top-level keys?                                             | \u003ccode\u003e''[\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;]''::JSONb ?\u0026amp; array[''a'', ''b'']\u003c/code\u003e            |                 |\n| \u003ccode\u003e||\u003c/code\u003e     | JSONb              | Concatenate two JSONb values into a new JSONb value                                                | \u003ccode\u003e''[\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;]''::JSONb || ''[\u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;]''::JSONb\u003c/code\u003e        |                 |\n| \u003ccode\u003e-\u003c/code\u003e      | text               | Delete key/value pair or string element from left operand. Key/value pairs are matched based on their key value. | \u003ccode\u003e''{\u0026quot;a\u0026quot;: \u0026quot;b\u0026quot;}''::JSONb - ''a''\u003c/code\u003e           |                 |\n| \u003ccode\u003e-\u003c/code\u003e      | integer            | Delete the array element with specified index (Negative integers count from the end). Throws an error if top level container is not an array. | \u003ccode\u003e''[\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;]''::JSONb - 1\u003c/code\u003e |    |\n| \u003ccode\u003e#-\u003c/code\u003e     | text[]             | Delete the field or element with specified path (for JSON arrays, negative integers count from the end) | \u003ccode\u003e''[\u0026quot;a\u0026quot;, {\u0026quot;b\u0026quot;:1}]''::JSONb #- ''{1,b}''\u003c/code\u003e           |                 |\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT *  \n\tFROM test_collection  \n\tWHERE data-\u0026gt;\u0026gt;''name'' = ''bob'' \n; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eShould return 1 row the name equal to \u003ccode\u003ebob\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;JSONb\u0026rdquo;,\u0026ldquo;MongoDB\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":47}' where homework_id = '33907206-076a-4ab4-427d-f0e2d994b1ed';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a105f728-d2bf-4d1e-4026-2f6cd6d7f6ab', 'Interactive - 48 - window functions', '48', 'hw48.mp4', 'hw48.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '4c051c16-00b7-43a0-6add-8241317d89fe', 'a105f728-d2bf-4d1e-4026-2f6cd6d7f6ab' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '56e27c1b-433b-439f-7b85-b13a53e5967d', 'a105f728-d2bf-4d1e-4026-2f6cd6d7f6ab' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '676c28f4-aef5-4997-6a43-5ac4a1672729', 48, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 48 - window functions\u003c/h1\u003e\n\n\u003cp\u003eWindow functions allow operations of a set of data.  First let\u0026rsquo;s setup an example.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nDROP TABLE if exists emp_sal; \n \nCREATE TABLE emp_sal ( \n\temp_id serial primary key not null, \n\tdept text not null, \n\tsalary numeric \n); \n \nINSERT INTO emp_sal ( dept, emp_id, salary ) values  \n\t( ''Dev''   \t,    11 ,   5200 ), \n\t( ''Dev''   \t,     7 ,   4200 ), \n\t( ''Dev''   \t,     9 ,   4500 ), \n\t( ''Dev''   \t,     8 ,   6000 ), \n\t( ''Dev''   \t,    10 ,   5200 ), \n\t( ''H.R.'' \t,     5 ,   3500 ), \n\t( ''H.R.'' \t,     2 ,   3900 ), \n\t( ''sales''   ,     3 ,   4800 ), \n\t( ''sales''   ,     1 ,   5000 ), \n\t( ''sales''   ,     4 ,   4800 ) \n; \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eA window function can be used to calculate the sum of salary across each department.\u003cbr /\u003e\nThis start with the \u003ccode\u003eOVER\u003c/code\u003e operator and a expression of how the data is to be grouped.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT  \n\t\tdept, \n\t\temp_id, \n\t\tsalary, \n\t\tsum(salary) OVER (PARTITION BY dept)  as  dept_total \n\tFROM emp_sal \n; \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;alter\u0026rdquo;,\u0026ldquo;add column\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":48}' where homework_id = 'a105f728-d2bf-4d1e-4026-2f6cd6d7f6ab';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( 'a0bb4419-157c-4ca2-7782-55d020466605', 'Interactive - 49 - PostgreSQL database maintenance', '49', 'hw49.mp4', 'hw49.svg', '{}' );
insert into ct_tag ( tag_id, tag_word ) values ( 'd6829128-b8a4-43b3-5aa8-5fc8b71276e9', 'vacuum' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd6829128-b8a4-43b3-5aa8-5fc8b71276e9', 'a0bb4419-157c-4ca2-7782-55d020466605' );
insert into ct_tag ( tag_id, tag_word ) values ( '339ea1fd-14dc-45c8-59d6-cdd5ef0f805a', 'analyze' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '339ea1fd-14dc-45c8-59d6-cdd5ef0f805a', 'a0bb4419-157c-4ca2-7782-55d020466605' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '6a6a799d-7923-4bd8-5c1b-7ce3eef2161e', 49, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 49 - PostgreSQL database maintenance\u003c/h1\u003e\n\n\u003cp\u003eWhen a table has a substantial change in size the set of statistics\nthat are used to create and optimize queries needs to be updated.\nThis is done with the \u003ccode\u003evacuum\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003eAlso when deletes occur the data is marked as deleted but the space\nis not reclaimed.   To reclaim the space you need to run a \u003ccode\u003evacuum\u003c/code\u003e\u003cbr /\u003e\non the table or on all tables.   Because this can be a very time\nconsuming process this is often set up to run at an off-peek time.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003evacuum full; \nvacuum analyze name_list; \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;vacuum\u0026rdquo;,\u0026ldquo;analyze\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":49}' where homework_id = 'a0bb4419-157c-4ca2-7782-55d020466605';


insert into ct_homework ( homework_id, homework_title, homework_no, video_url, video_img, lesson_body ) values ( '8cbdc078-9cf6-4a85-7b07-be5098b91475', 'Interactive - 50 - Geometric Data / PostGIS', '50', 'hw50.mp4', 'hw50.svg', '{}' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( 'd6829128-b8a4-43b3-5aa8-5fc8b71276e9', '8cbdc078-9cf6-4a85-7b07-be5098b91475' );
insert into ct_tag_homework ( tag_id, homework_id ) values ( '339ea1fd-14dc-45c8-59d6-cdd5ef0f805a', '8cbdc078-9cf6-4a85-7b07-be5098b91475' );
insert into ct_val_homework ( val_id, homework_no, val_type, val_data  ) values ( '5559bd23-b50a-4c2e-6475-1a19e3c855af', 50, 'SQL-Select', 'select ''PASS'' as x' );
update ct_homework set lesson_body = '{"Lesson":"\u003cstyle\u003e \n.pagebreak { page-break-before: always; } \n.half { height: 200px; } \n\u003c/style\u003e \n \n\n\u003ch1\u003eInteractive - 50 - Geometric Data / PostGIS\u003c/h1\u003e\n\n\u003cp\u003ePostgreSQL also has a substantial set of constructs that allow both indexing and data storage of points.\nCollectively these base capabilities are built into a very good Geographic Information System, PostGIS.\u003c/p\u003e\n\n\u003cp\u003ePostGIS adds all sorts of fun stuff like projections and data for all the counties in the US.\u003c/p\u003e\n\n\u003cp\u003eBefore using PostGIS you need to understand the basics - like points and lines and that PostgreSQL\ncan store and search spacial data.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e \nxyzzy \n \n \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eTags: \u0026ldquo;vacuum\u0026rdquo;,\u0026ldquo;analyze\u0026rdquo;\u003c/h4\u003e\n","Lesson_no":50}' where homework_id = '8cbdc078-9cf6-4a85-7b07-be5098b91475';


-- [32;40mPASS[0m



select grade_hw_migrate();
